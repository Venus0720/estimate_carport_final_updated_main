import * as THREE from "three";
import axios from 'axios';
import { params, const_var, initialState,commonFunctionForColor, calcOverhangSize} from './reducer';
import * as cuComponent from './componentReducer';
import * as ColorHelper from '../../_helper/colors';
import * as utlis from './utils'


import * as CenterBuildingRoofPitch from '../../_helper/_CenterBuilding/Update_CB_Roof';
import * as CenterBuildingWalls from '../../_helper/_CenterBuilding/Update_CB_Walls';
import * as CenterBuildingLegs from '../../_helper/_CenterBuilding/Update_CB_Legs';
import * as CenterBuildingArrows from '../../_helper/UpdateArrow&Dimension';

import * as LeanToPorchLegs from '../../_helper/Porches/UpdateLeanPorchLegs';
import * as LeanToPorchRoof from '../../_helper/Porches/UpdateLeanPorchRoof';
import * as LeanToPorchWalls from '../../_helper/Porches/UpdateLeanPorchWalls';

import * as LeftLeanToLegs from '../../_helper/Left Lean-To/UpdateLeftLeanLegs';
import * as LeftLeanToRoof from '../../_helper/Left Lean-To/UpdateLeftLeanRoof';
import * as LeftLeanToWalls from '../../_helper/Left Lean-To/UpdateLeftLeanWalls';

import * as RightLeanToLegs from '../../_helper/Right Lean-To/UpdateRightLeanLegs';
import * as RightLeanToRoof from '../../_helper/Right Lean-To/UpdateRightLeanRoof';
import * as RightLeanToWalls from '../../_helper/Right Lean-To/UpdateRightLeanWalls';

import * as FrontLeanToLegs from '../../_helper/FrontLeanTo/UpdateFrontLeanLegs';
import * as FrontLeanToRoof from '../../_helper/FrontLeanTo/UpdateFrontLeanRoof';
import * as FrontLeanToWalls from '../../_helper/FrontLeanTo/UpdateFrontLeanWalls';

import * as BackLeanToLegs from '../../_helper/BackLeanTo/UpdateBackLeanLegs';
import * as BackLeanToRoof from '../../_helper/BackLeanTo/UpdateBackLeanRoof';
import * as BackLeanToWalls from '../../_helper/BackLeanTo/UpdateBackLeanWalls';
import SKY_IMG from '../../assets/images/imgTextures/sky.jpg';
import GROUND_IMG from '../../assets/images/imgTextures/grass.jpg';
import GROUND_IMG1 from "../../assets/images/imgTextures/grass.jpg";
import SKY_IMG1 from "../../assets/images/imgTextures/bd1.png";



export const BuildingUpdate = (Val,newFlag) => { 
    // console.log(const_var.checkPanelForLean.left,"const_var.checkPanelForLean")
    if(params.m_s_n==122)
    {
        if(params.add_front_lean==false && (params.p_f_w=="Half_Close" || params.p_f_w=="One_Fourth_Close" || params.p_f_w=="Three_Fourth_Close"))
        {
          params.p_f_w = "Open";
        }
        if(params.add_back_lean==false && (params.p_b_w=="Half_Close" || params.p_b_w=="One_Fourth_Close" || params.p_b_w=="Three_Fourth_Close"))
        {
          params.p_b_w = "Open";
        }
        if(params.add_left_lean==false && (params.p_l_w=="Half_Close" || params.p_l_w=="One_Fourth_Close" || params.p_l_w=="Three_Fourth_Close"))
        {
          params.p_l_w = "Open";
        }
        if(params.add_right_lean==false && (params.p_r_w=="Half_Close" || params.p_r_w=="One_Fourth_Close" || params.p_r_w=="Three_Fourth_Close"))
        {
          params.p_r_w = "Open";
        }
    }
    if(params.add_left_lean==true && params.p_l_w!="Close") {
        var pitchCalulation = (params.lean_p_w  * params.b_l_t_r_p / 12);
        var calData = (params.lean_p_w * (params.b_l_t_r_p) / 12);
        var finalHeight = params.p_h - (calData + params.lean_p_h);   
        var calVal = Math.ceil(finalHeight / 3);
        var oneFourthValue = params.p_h/4;
        var halfCloseValue = params.p_h/2;
        if(oneFourthValue < finalHeight && halfCloseValue < finalHeight  && params.p_l_w!=="Three_Fourth_Close"/*|| (2 * oneFourthValue) < finalHeight || (3 * oneFourthValue) < finalHeight */)
        {
            params.p_l_w = (params.p_l_w>(calVal))?params.p_l_w:calVal.toString();
        }
        if(calVal!=0  && params.p_l_w!=="Half_Close" && params.p_l_w!=="One_Fourth_Close" && params.p_l_w!=="Three_Fourth_Close")
        {
            if(params.p_h == (calData + params.lean_p_h))
            {
                params.p_l_w = "Open";
            }else
            {
                if(const_var.a_p_d_a.length>0 && const_var.a_p_d_a.panel.length==0)
                {
                    params.p_l_w = "Close";
                } else if ( params.p_h > (const_var.b_m_i_hlean + Number(params.b_l_t_r_p)))
                {
                    params.p_l_w = (params.p_l_w>(calVal))?params.p_l_w:calVal.toString();
                    if(const_var.checkPanelForLean.left===false)
                    {
                        const_var.checkPanelForLean.left = true;
                    }
                }
                let hdfp = params.p_h - (params.lean_p_h + (parseInt(params.b_l_t_r_p)/12) * params.lean_p_w);
                 if(params.add_left_lean && hdfp > 0 &&  (Math.abs(params.p_l_w) * 3) -hdfp < 3)
                 {
                    const_var.checkPanelForLean.left = true;
                 }

            }
        }else{
            if(params.p_l_w=="Half_Close" || params.p_l_w=="One_Fourth_Close" || params.p_l_w=="Three_Fourth_Close")
            {
                params.p_l_w = (params.a_c_p_l==true)?params.p_l_w:params.p_l_w;
            } else if ( params.p_h > (const_var.b_m_i_hlean + Number(params.b_l_t_r_p)))
            {
                params.p_l_w = (params.a_c_p_l==true)?params.p_l_w:"Open";
            }
        }
    
    }
    if (params.add_right_lean==true && params.p_r_w!="Close") {
        var pitchCalulation = (params.leanR_p_w  * params.b_l_t_r_pR / 12);
        var calData = (params.leanR_p_w * (params.b_l_t_r_pR) / 12);
        var finalHeight = params.p_h - (calData + params.leanR_p_h);   
        var calVal = Math.ceil(finalHeight / 3);
        var oneFourthValue = params.p_h/4;
        var oneFourthValue = params.p_h/2;
        var halfCloseValue = params.p_h/2;
        if(oneFourthValue < finalHeight && halfCloseValue < finalHeight  && params.p_l_w!=="Three_Fourth_Close" /*|| (2 * oneFourthValue) < finalHeight || (3 * oneFourthValue) < finalHeight*/)
        {
            params.p_r_w = (params.p_r_w>(calVal))?params.p_r_w:calVal.toString();
        }
        if(calVal!=0  && params.p_r_w!=="Half_Close" && params.p_r_w!=="One_Fourth_Close" && params.p_r_w!=="Three_Fourth_Close")
        {
            if(params.p_h == (calData + params.leanR_p_h))
            {
                params.p_r_w = "Open";
            }else
            {
                if(const_var.a_p_d_a.length>0 && const_var.a_p_d_a.panel.length==0)
                {
                    params.p_r_w = "Close";
                }else
                {
                    params.p_r_w = (params.p_r_w>(calVal))?params.p_r_w:calVal.toString();
                    if(const_var.checkPanelForLean.right===false)
                    {
                        const_var.checkPanelForLean.right = true;
                    }
                }
                let hdfp = params.p_h - (params.leanR_p_h + (parseInt(params.b_l_t_r_pR)/12) * params.leanR_p_w);
                if(params.add_right_lean && hdfp > 0  &&  (Math.abs(params.p_r_w) * 3) -hdfp < 3)
                {
                    const_var.checkPanelForLean.right = true;
                }
            }
        }
        else{
            if(params.p_r_w=="Half_Close" || params.p_r_w=="One_Fourth_Close" || params.p_r_w=="Three_Fourth_Close")
            {
                params.p_r_w = (params.a_c_p_r==true)?params.p_r_w:params.p_r_w;
            }else
            {
                params.p_r_w = (params.a_c_p_r==true)?params.p_r_w:"Open";
            }
        }

    }
    if(params.add_front_lean==true) {
         let mainIndexF;
         let fHight = params.p_h - (params.leanF_p_h + (parseInt(params.b_l_t_r_pF)/12) * params.leanF_p_w);

        Object.entries(const_var.wallArray["front"]).forEach(([key, value], index) => {
        
            if(fHight<2.5){
                params.p_f_wF = "Gable"
                if(params.p_f_wF==value)
                    {
                    mainIndexF = index;
                    }
                if(index>=mainIndexF)
                {
                const_var.wallArray["front"][key] = value;
                }else{
                    delete const_var.wallArray["front"][key]
                }
            } else if(fHight >= 2.5 && fHight <= 3.5 && const_var.a_p_d_a.gable_end[0] != undefined && (const_var.a_p_d_a.gable_end[0].extended != 0 || const_var.a_p_d_a.gable_end[0].vertical_extended != 0)) {
                params.p_f_wF = "Extended Gable"
                if(params.p_f_wF==value)
                {
                mainIndexF = index;
                }
                if(index>=mainIndexF)
                {
                const_var.wallArray["front"][key] = value;
                }else{
                    delete const_var.wallArray["front"][key]
                }

            }else if(fHight > 3.5 && fHight <= (params.p_h/4)  || (const_var.a_p_d_a.gable_end[0] != undefined && fHight >= 2.5 && fHight <= 3.5 && const_var.a_p_d_a.gable_end[0].extended == 0 || const_var.a_p_d_a.gable_end[0] != undefined && fHight >= 2.5 && fHight <= 3.5 && const_var.a_p_d_a.gable_end[0].vertical_extended == 0))
            {
            params.p_f_wF = "One_Fourth_Close"
            if(params.p_f_wF==value)
            {
            mainIndexF = index;
            }
            if(index>=mainIndexF)
            {
                const_var.wallArray["front"][key] = value;
            }else{
                delete const_var.wallArray["front"][key]
            }
            }else if(fHight > (params.p_h/4) && fHight <= (params.p_h/2)){
            params.p_f_wF = "Half_Close"
            if(params.p_f_wF==value)
            {
            mainIndexF = index;
            }
            if(index>=mainIndexF)
            {
                const_var.wallArray["front"][key] = value;
            }else{
                delete const_var.wallArray["front"][key]
            }
            }else if(fHight > (params.p_h/2) && fHight <= (params.p_h*(3/4)) ){
            params.p_f_wF = "Three_Fourth_Close"
            if(params.p_f_wF==value)
            {
            mainIndexF = index;
            }
            if(index>=mainIndexF)
            {
                const_var.wallArray["front"][key] = value;
            }else{
                delete const_var.wallArray["front"][key]
            }
            }else{
                params.p_f_wF = "Close"
                if(params.p_f_wF==value)
                {
                mainIndexF = index;
                }
                if(index>=mainIndexF)
                {
                const_var.wallArray["front"][key] = value;
                }else{
                    delete const_var.wallArray["front"][key]
                }
            }

    
        }) 

        if(Object.values(const_var.wallArray["front"]).includes(params.p_f_w)==false && Object.values(const_var.wallArray["front"]).length != 0){
           params.p_f_w = params.p_f_wF

        }

    }
    if (params.add_back_lean==true) {
        let bHight = params.p_h - (params.leanB_p_h + (parseInt(params.b_l_t_r_pB)/12) * params.leanB_p_w);
        let mainIndexB
        Object.entries(const_var.wallArray["back"]).forEach(([key, value], index) => {

            if(bHight<2.5){
                params.p_b_wB = "Gable"
                if(params.p_b_wB==value)
                {
                mainIndexB = index;
                }
                if(index>=mainIndexB)
                {
                const_var.wallArray["back"][key] = value;
                }else{
                    delete const_var.wallArray["back"][key]
                }

            } else if(bHight >= 2.5 && bHight <= 3.5 && const_var.a_p_d_a.gable_end[0] != undefined && (const_var.a_p_d_a.gable_end[0].extended != 0 || const_var.a_p_d_a.gable_end[0].vertical_extended != 0)) {

                params.p_b_wB = "Extended Gable"
                if(params.p_b_wB==value)
                {
                mainIndexB = index;
                }
                if(index>=mainIndexB)
                {
                const_var.wallArray["back"][key] = value;
                }else{
                    delete const_var.wallArray["back"][key]
                }
            }else if(bHight > 3.5 && bHight <= (params.p_h/4) || (const_var.a_p_d_a.gable_end[0] != undefined && bHight >= 2.5 && bHight <= 3.5 && const_var.a_p_d_a.gable_end[0].extended == 0 || const_var.a_p_d_a.gable_end[0] != undefined && bHight >= 2.5 && bHight <= 3.5 && const_var.a_p_d_a.gable_end[0].vertical_extended == 0)){
            params.p_b_wB = "One_Fourth_Close"
            if(params.p_b_wB==value)
            {
            mainIndexB = index;
            }
            if(index>=mainIndexB)
            {
                const_var.wallArray["back"][key] = value;
            }else{
                delete const_var.wallArray["back"][key]
            }
            }else if(bHight > (params.p_h/4) && bHight <= (params.p_h/2)){
            params.p_b_wB = "Half_Close"
            if(params.p_b_wB==value)
            {
            mainIndexB = index;
            }
            if(index>=mainIndexB)
            {
                const_var.wallArray["back"][key] = value;
            }else{
                delete const_var.wallArray["back"][key]
            }
            }else if(bHight > (params.p_h/2) && bHight <= (params.p_h*(3/4)) ){
            params.p_b_wB = "Three_Fourth_Close"
            if(params.p_b_wB==value)
            {
            mainIndexB = index;
            }
            if(index>=mainIndexB)
            {
            const_var.wallArray["back"][key] = value;
            }else{
                delete const_var.wallArray["back"][key]
            }
            }else{
                params.p_b_wB = "Close"
                if(params.p_b_wB==value)
                {
                mainIndexB = index;
                }
                if(index>=mainIndexB)
                {
                const_var.wallArray["back"][key] = value;
                }else{
                    delete const_var.wallArray["back"][key]
                }
            }

        })

        if(Object.values(const_var.wallArray["back"]).includes(params.p_b_w)==false && Object.values(const_var.wallArray["back"]).length != 0){
            params.p_b_w = params.p_b_wB
        }
      

    }
    // setTimeout( () => {const_var.scene.getObjectByName("C_B_Walls").visible = true;},1000)
         CenterBuildingLegs.updateCenterBuildingLegs();
         CenterBuildingRoofPitch.updateCenterBuildingRoofPitch();
         CenterBuildingWalls.updateCenterBuildingWalls();
         ColorHelper.colors();

    if (newFlag !== "forcedStopDoorCSGFlag") {
        DoorCSG();
    }

    // if (const_var.entry_points.length > 0){   
    //     cuComponent.updateDoorWalls();
    //     cuComponent.doDoorlegsCSG();
    //     cuComponent.doDoorHatChannelsCSG();
    //     if (params.p_w_c_n == true){
    //         cuComponent.updateDoorWainscot();
    //     }
    // }

    updateDoorWallNameForEnclosed();
    // const_var.crmSetting.main_domain_url ="carport1.com";
    if(const_var.loginSession==false && const_var.crmSetting.main_domain_url !== undefined && const_var.crmSetting.main_domain_url !== "" && const_var.crmSetting.main_domain_url !==null && (const_var.showNonLoginWaterMark.includes( const_var.crmSetting.main_domain_url)))
    {
        // setUpWatermarkLogo();
    }
    if(const_var.loginSession==true)
    {
        // setUpWatermarkLogoforLoggedin();
    }
    // const_var.controls.maxDistance = (params.p_d <= 150 )?
       
    // (params.add_front_lean == true|| params.add_left_lean == true|| params.add_right_lean == true|| params.add_back_lean == true) ?  120 : ((params.p_d/2)+(params.p_w/2)+40)
    
    //  :240;

    let fLength = params.p_d;
    let fWidth = params.p_w;                        
    params.add_front_lean && (fLength += params.leanF_p_w);
    params.add_back_lean && (fLength += params.leanB_p_w);
    params.add_left_lean && (fWidth += params.lean_p_w);
    params.add_right_lean && (fWidth += params.leanR_p_w);
    let diag = new THREE.Vector3(fLength, fWidth, params.p_h).length();
    let zMul = 2;
    if (window.innerWidth < 1000) {
       zMul = 3;
    }
    const_var.controls.maxDistance =  (diag  >= 100) ? 290: (diag * zMul);
    
     const_var.showInsulation = ((const_var.a_p_d_a.insulation && const_var.a_p_d_a.insulation.length>0))?true:false;
        
    //  params.insulation.center.isDisableFullInsulation = (params.p_f_w == "Open" && params.p_l_w == "Open" && params.p_r_w == "Open" && params.p_b_w == "Open" && !params.p_c_p_r && !params.p_c_p_l) ? true : false;
        if(((params.p_f_w=="Close" || params.p_b_w=="Close" || params.p_l_w=="Close" || params.p_r_w=="Close") || (params.p_b_c_b_l_f=="Close" || params.p_b_c_b_l=="Close" || params.p_b_c_b_r_f=="Close" || params.p_b_c_b_r=="Close" || params.p_b_c_b_f_f=="Close" || params.p_b_c_b_f_b=="Close" || params.p_b_c_b_f_l=="Close" || params.p_b_c_b_b_f=="Close" || params.p_b_c_b_b_b=="Close" || params.p_b_c_b_b_l=="Close")|| (params.add_storage_check==true) || (params.add_storage_check_right==true) || (params.add_storage_check_front==true) || (params.add_storage_check_back==true) || (params.p_u_c==true)))
        {
            const_var.showWainscotJSX = true;
        }else{
            const_var.showWainscotJSX = false;
            params.p_w_c_n = false;
        }
        if(((params.p_f_w!="Open" || params.p_b_w!="Open" || params.p_l_w!="Open" || params.p_r_w!="Open") || (params.p_b_c_b_l_f!="Open" || params.p_b_c_b_l!="Open" || params.p_b_c_b_r_f!="Open" || params.p_b_c_b_r!="Open" || params.p_b_c_b_f_f!="Open" || params.p_b_c_b_f_b!="Open" || params.p_b_c_b_f_l!="Open" || params.p_b_c_b_b_f!="Open" || params.p_b_c_b_b_b!="Open" || params.p_b_c_b_b_l!="Open") || (params.p_u_c==true) || (params.add_storage_check==true) || (params.add_storage_check_right==true) || (params.add_storage_check_front==true) || (params.add_storage_check_back==true) || (params.p_c_p_l==true || params.p_c_p_r==true)))
        {
            const_var.showWallColorJSX = true;
        }else{
            const_var.showWallColorJSX = false;
        }
        


//   },1100)
  }

export const updateDoorWallNameForEnclosed = () => {
    if (params.cB_addStorage_check_left || params.cB_addStorage_check_right || params.p_u_c || params.add_storage_check || params.add_storage_check_right || params.add_storage_check_front || params.add_storage_check_back){
        const_var.scene.children.forEach(function(Geometry) {
            let wallName = Geometry.userData.wallName;
               
            switch(Geometry.userData.wallName) {
                case "c_b_r_s_f_w":
                case "c_b_l_s_f_w":
                    if (params.p_f_w == "Close") Geometry.userData.wallName = "c_b_f_w";
                    wallName = Geometry.userData.wallName;
                    break;
                
                case "c_b_l_s_b_w":
                case "c_b_r_s_b_w":
                    if (params.p_b_w == "Close") Geometry.userData.wallName = "c_b_b_w";
                    wallName = Geometry.userData.wallName;
                    break;

                case "c_b_l_s_w":
                    if (params.p_l_w == "Close") Geometry.userData.wallName = "c_b_l_w";
                    wallName = Geometry.userData.wallName;
                    break;
                case "c_b_r_s_w":
                    if (params.p_r_w == "Close") {
                        if(!params.singleSlope) Geometry.userData.wallName = "c_b_r_w"
                        else  Geometry.userData.wallName = "F_S_L_R_W";
                    }
                    wallName = Geometry.userData.wallName;
                    break;

                case "L_L_R_S_W":
                    // if (params.p_l_w == "Close") Geometry.userData.wallName = "c_b_l_w";
                    // wallName = Geometry.userData.wallName;
                    break;
                case "L_L_L_S_W":
                    if (params.p_b_c_b_l == "Close") Geometry.userData.wallName = "L_L_L_W";
                    wallName = Geometry.userData.wallName;
                    break;

                case "R_L_L_S_W":
                    // if (params.p_r_w == "Close") Geometry.userData.wallName = "c_b_r_w";
                    // wallName = Geometry.userData.wallName;
                    break;
                case "R_L_R_S_W":
                    if (params.p_b_c_b_r == "Close") Geometry.userData.wallName = "R_L_R_W";
                    wallName = Geometry.userData.wallName;
                    break;
    
                case "F_L_F_S_W":
                    if (params.p_b_c_b_f_l == "Close") Geometry.userData.wallName = "F_L_F_W";
                    wallName = Geometry.userData.wallName;
                    break;
                case "B_L_F_S_W":
                    if (params.p_b_c_b_b_l == "Close") Geometry.userData.wallName = "B_L_S_W";
                    wallName = Geometry.userData.wallName;
                    break;  

                case "L_S_F_2W_VT":
                    if (params.p_f_w == "Close") {
                        Geometry.userData.wallName = "c_b_f_w";
                        wallName = Geometry.userData.wallName
                    } else {
                        wallName = "c_b_l_s_f_w";
                    }
                    break;

                case "L_S_B_2W_VT":
                    if (params.p_b_w == "Close") {
                        Geometry.userData.wallName = "c_b_b_w";
                        wallName = Geometry.userData.wallName
                    } else {
                        wallName = "c_b_l_s_b_w";
                    }
                    break;

                case "R_S_F_2W_VT":
                    if (params.p_f_w == "Close") {
                        Geometry.userData.wallName = "c_b_f_w";
                        wallName = Geometry.userData.wallName
                    } else {
                        wallName = "c_b_r_s_f_w";
                    }
                    break;

                case "R_S_B_2W_VT":
                    if (params.p_b_w == "Close") {
                        Geometry.userData.wallName = "c_b_b_w";
                        wallName = Geometry.userData.wallName
                    } else {
                        wallName = "c_b_r_s_b_w";
                    }
                    break;                                
            }            

            const doorObj = const_var.entry_points.filter((item) => item.uniqueId === Geometry.userData.uniqueId);
            if(doorObj.length > 0){
                if(wallName!=undefined)
                {
                    doorObj[0].component_wall_name = wallName;
                    doorObj[0].entry_component_location = const_var.entry_wall_location[wallName];
                    doorObj[0].entry_location = const_var.entry_wall_location[wallName];
                }
            }
        })
    }
}
  export const UpdateLeftLean = (type) => {
    if (type == "roof"){
        LeftLeanToRoof.updateLeftLeanToRoofPitch();
        // console.log("UpdateLeftLean legs");
    } else if (type == "legs"){
        LeftLeanToLegs.updateLeftLeanToLegs(params.add_left_lean);
        // console.log("UpdateLeftLean roof");
    } else if (type == "walls"){
        // console.log("UpdateLeftLean walls");
        LeftLeanToWalls.updateLeftLeanToWalls();
        LeftLeanToLegs.updateLeftLeanToLegs(params.add_left_lean);
        // params.insulation.leftLean.isDisableFullInsulation = (params.p_b_c_b_l_f == "Open" && params.p_b_c_b_l_b == "Open" && params.p_b_c_b_l == "Open") ? true : false;
        // if (params.insulation.leftLean.insulationId != 0 ) UpdateInulationOptionsOnWallValueChange("leftLean");
    } else {
        // console.log("UpdateLeftLean all");
        LeftLeanToLegs.updateLeftLeanToLegs(params.add_left_lean);
        LeftLeanToWalls.updateLeftLeanToWalls()
        LeftLeanToRoof.updateLeftLeanToRoofPitch();
    }
    if (params.add_left_front_lean_porch || params.add_left_back_lean_porch) {
        UpdateLeanPorches();
    }
    ColorHelper.colors();
    //DoorCSG();
    if(params.add_left_lean==true && params.p_l_w!="Close")
    {
        var pitchCalulation = (params.lean_p_w  * params.b_l_t_r_p / 12);
        var calData = (params.lean_p_w * (params.b_l_t_r_p) / 12);
        var finalHeight = params.p_h - (calData + params.lean_p_h);   
        var calVal = Math.ceil(finalHeight / 3);
        var oneFourthValue = params.p_h/4;
        var halfCloseValue = params.p_h/2;
        if(oneFourthValue < finalHeight && halfCloseValue < finalHeight  && params.p_l_w!=="Three_Fourth_Close"/*|| (2 * oneFourthValue) < finalHeight || (3 * oneFourthValue) < finalHeight */)
        {
            params.p_l_w = (params.p_l_w>(calVal))?params.p_l_w:calVal.toString();
        }
        if(calVal!=0  && params.p_l_w!=="Half_Close" && params.p_l_w!=="One_Fourth_Close" && params.p_l_w!=="Three_Fourth_Close")
        {
            if(params.p_h == (calData + params.lean_p_h))
            {
                params.p_l_w = "Open";
            }else
            {
                if(const_var.a_p_d_a.length>0 && const_var.a_p_d_a.panel.length==0)
                {
                    params.p_l_w = "Close";
                }else
                {
                    params.p_l_w = (params.p_l_w>(calVal))?params.p_l_w:calVal.toString();
                }
            }
        }else{
            if(params.p_l_w=="Half_Close" || params.p_l_w=="One_Fourth_Close" || params.p_l_w=="Three_Fourth_Close")
            {
                params.p_l_w = (params.a_c_p_l==true)?params.p_l_w:params.p_l_w;
            }else
            {
                params.p_l_w = (params.a_c_p_l==true)?params.p_l_w:"Open";
            }
        }
    }

    updateDoorWallNameForEnclosed();
  }

  export const UpdateRightLean = (type) => {
    if (type == "roof"){
        RightLeanToRoof.updateRightLeanToRoofPitch();
    } else if (type == "legs"){
        RightLeanToLegs.updateRightLeanToLegs(params.add_right_lean);
    } else if (type == "walls"){
        RightLeanToWalls.updateRightLeanToWalls();
        RightLeanToLegs.updateRightLeanToLegs(params.add_right_lean);
        // params.insulation.rightLean.isDisableFullInsulation = (params.p_b_c_b_r_f == "Open" && params.p_b_c_b_r_b == "Open" && params.p_b_c_b_r == "Open") ? true : false;
        // if (params.insulation.rightLean.insulationId != 0 )UpdateInulationOptionsOnWallValueChange("rightLean");
    } else {
        RightLeanToLegs.updateRightLeanToLegs(params.add_right_lean);
        RightLeanToWalls.updateRightLeanToWalls();
        RightLeanToRoof.updateRightLeanToRoofPitch();
    }

    if (params.add_right_front_lean_porch || params.add_right_back_lean_porch) {
        UpdateLeanPorches();
    }
    ColorHelper.colors();
    //DoorCSG();
    if(params.add_right_lean==true && params.p_r_w!="Close")
    {
        var pitchCalulation = (params.leanR_p_w  * params.b_l_t_r_pR / 12);
        var calData = (params.leanR_p_w * (params.b_l_t_r_pR) / 12);
        var finalHeight = params.p_h - (calData + params.leanR_p_h);   
        var calVal = Math.ceil(finalHeight / 3);
        var oneFourthValue = params.p_h/4;
        var oneFourthValue = params.p_h/2;
        var halfCloseValue = params.p_h/2;
        if(oneFourthValue < finalHeight && halfCloseValue < finalHeight  && params.p_l_w!=="Three_Fourth_Close" /*|| (2 * oneFourthValue) < finalHeight || (3 * oneFourthValue) < finalHeight*/)
        {
            params.p_r_w = (params.p_r_w>(calVal))?params.p_r_w:calVal.toString();
        }
        if(calVal!=0  && params.p_r_w!=="Half_Close" && params.p_r_w!=="One_Fourth_Close" && params.p_r_w!=="Three_Fourth_Close")
        {
            if(params.p_h == (calData + params.leanR_p_h))
            {
                params.p_r_w = "Open";
            }else
            {
                if(const_var.a_p_d_a.length>0 && const_var.a_p_d_a.panel.length==0)
                {
                    params.p_r_w = "Close";
                }else
                {
                    params.p_r_w = (params.p_r_w>(calVal))?params.p_r_w:calVal.toString();
                }
            }
        }
        else{
            if(params.p_r_w=="Half_Close" || params.p_r_w=="One_Fourth_Close" || params.p_r_w=="Three_Fourth_Close")
            {
                params.p_r_w = (params.a_c_p_r==true)?params.p_r_w:params.p_r_w;
            }else
            {
                params.p_r_w = (params.a_c_p_r==true)?params.p_r_w:"Open";
            }
        }
    }

    updateDoorWallNameForEnclosed();
  }

  export const UpdateFrontLean = (type) => {
    if (type == "roof"){
        FrontLeanToRoof.updateFrontLeanToRoofPitch();
    } else if (type == "legs"){
        FrontLeanToLegs.updateFrontLeanToLegs(params.add_front_lean);
    } else if (type == "walls"){
        FrontLeanToWalls.updateFrontLeanToWalls();
        FrontLeanToLegs.updateFrontLeanToLegs(params.add_front_lean);
        // params.insulation.frontLean.isDisableFullInsulation = (params.p_b_c_b_f_l == "Open" && params.p_b_c_b_f_f == "Open" && params.p_b_c_b_f_b == "Open") ? true : false;
        // if (params.insulation.frontLean.insulationId != 0 )UpdateInulationOptionsOnWallValueChange("frontLean");
    } else {
        FrontLeanToLegs.updateFrontLeanToLegs(params.add_front_lean);
        FrontLeanToWalls.updateFrontLeanToWalls();
        FrontLeanToRoof.updateFrontLeanToRoofPitch();
    }
    if (params.add_left_front_lean_porch || params.add_right_front_lean_porch) {
        UpdateLeanPorches();
    }
    
        // Calculation of center building front wall according to front lean-to
        let mainIndexF;
        let fHight = params.p_h - (params.leanF_p_h + (parseInt(params.b_l_t_r_pF)/12) * params.leanF_p_w);
        if(params.add_front_lean==true)
        { 
        Object.entries(const_var.wallArray["front"]).forEach(([key, value], index) => {
        
            if(fHight<2.5){
                params.p_f_wF = "Gable"
                if(params.p_f_wF==value)
                    {
                     mainIndexF = index;
                    }
                if(index>=mainIndexF)
                {
                  const_var.wallArray["front"][key] = value;
                }else{
                    delete const_var.wallArray["front"][key]
                }
            } else if(fHight >= 2.5 && fHight <= 3.5 && const_var.a_p_d_a.gable_end[0] != undefined && (const_var.a_p_d_a.gable_end[0].extended != 0 || const_var.a_p_d_a.gable_end[0].vertical_extended != 0)) {
                params.p_f_wF = "Extended Gable"
                if(params.p_f_wF==value)
                {
                 mainIndexF = index;
                }
                if(index>=mainIndexF)
                {
                  const_var.wallArray["front"][key] = value;
                }else{
                    delete const_var.wallArray["front"][key]
                }

            }else if(fHight > 3.5 && fHight <= (params.p_h/4)  || (const_var.a_p_d_a.gable_end[0] != undefined && fHight >= 2.5 && fHight <= 3.5 && const_var.a_p_d_a.gable_end[0].extended == 0 || const_var.a_p_d_a.gable_end[0] != undefined && fHight >= 2.5 && fHight <= 3.5 && const_var.a_p_d_a.gable_end[0].vertical_extended == 0))
            {
              params.p_f_wF = "One_Fourth_Close"
              if(params.p_f_wF==value)
              {
               mainIndexF = index;
              }
              if(index>=mainIndexF)
              {
                const_var.wallArray["front"][key] = value;
              }else{
                  delete const_var.wallArray["front"][key]
              }
            }else if(fHight > (params.p_h/4) && fHight <= (params.p_h/2)){
              params.p_f_wF = "Half_Close"
              if(params.p_f_wF==value)
              {
               mainIndexF = index;
              }
              if(index>=mainIndexF)
              {
                const_var.wallArray["front"][key] = value;
              }else{
                  delete const_var.wallArray["front"][key]
              }
            }else if(fHight > (params.p_h/2) && fHight <= (params.p_h*(3/4)) ){
              params.p_f_wF = "Three_Fourth_Close"
              if(params.p_f_wF==value)
              {
               mainIndexF = index;
              }
              if(index>=mainIndexF)
              {
                const_var.wallArray["front"][key] = value;
              }else{
                  delete const_var.wallArray["front"][key]
              }
            }else{
                params.p_f_wF = "Close"
                if(params.p_f_wF==value)
                {
                 mainIndexF = index;
                }
                if(index>=mainIndexF)
                {
                  const_var.wallArray["front"][key] = value;
                }else{
                    delete const_var.wallArray["front"][key]
                }
            }

    
        }) 

            if(Object.values(const_var.wallArray["front"]).includes(params.p_f_w)==false && Object.values(const_var.wallArray["front"]).length != 0){
               params.p_f_w = params.p_f_wF

            }
        }
        ColorHelper.colors();
        //DoorCSG();
        updateDoorWallNameForEnclosed();
  }
  export const UpdateBackLean = (type) => {
    if (type == "roof"){
        BackLeanToRoof.updateBackLeanToRoofPitch();
    } else if (type == "legs"){
        BackLeanToLegs.updateBackLeanToLegs(params.add_back_lean);
    } else if (type == "walls"){
        BackLeanToWalls.updateBackLeanToWalls();
        BackLeanToLegs.updateBackLeanToLegs(params.add_back_lean);
        // params.insulation.backLean.isDisableFullInsulation = (params.p_b_c_b_b_b == "Open" && params.p_b_c_b_b_l == "Open" && params.p_b_c_b_b_f == "Open") ? true : false;
        // if (params.insulation.backLean.insulationId != 0 )UpdateInulationOptionsOnWallValueChange("backLean");
    } else {
        BackLeanToLegs.updateBackLeanToLegs(params.add_back_lean);
        BackLeanToWalls.updateBackLeanToWalls();
        BackLeanToRoof.updateBackLeanToRoofPitch();
    }
    if (params.add_left_back_lean_porch || params.add_right_back_lean_porch) {
        UpdateLeanPorches();
    }
        // Calculation of center building back wall according to back lean-to
        let bHight = params.p_h - (params.leanB_p_h + (parseInt(params.b_l_t_r_pB)/12) * params.leanB_p_w);
        let mainIndexB
        if(params.add_back_lean==true)
        {
        Object.entries(const_var.wallArray["back"]).forEach(([key, value], index) => {
        
            
            if(bHight<2.5){
                params.p_b_wB = "Gable"
                if(params.p_b_wB==value)
                {
                 mainIndexB = index;
                }
                if(index>=mainIndexB)
                {
                  const_var.wallArray["back"][key] = value;
                }else{
                    delete const_var.wallArray["back"][key]
                }

            } else if(bHight >= 2.5 && bHight <= 3.5 && const_var.a_p_d_a.gable_end[0] != undefined && (const_var.a_p_d_a.gable_end[0].extended != 0 || const_var.a_p_d_a.gable_end[0].vertical_extended != 0)) {

                params.p_b_wB = "Extended Gable"
                if(params.p_b_wB==value)
                {
                 mainIndexB = index;
                }
                if(index>=mainIndexB)
                {
                  const_var.wallArray["back"][key] = value;
                }else{
                    delete const_var.wallArray["back"][key]
                }
            }else if(bHight > 3.5 && bHight <= (params.p_h/4) || (const_var.a_p_d_a.gable_end[0] != undefined && bHight >= 2.5 && bHight <= 3.5 && const_var.a_p_d_a.gable_end[0].extended == 0 || const_var.a_p_d_a.gable_end[0] != undefined && bHight >= 2.5 && bHight <= 3.5 && const_var.a_p_d_a.gable_end[0].vertical_extended == 0)){
              params.p_b_wB = "One_Fourth_Close"
              if(params.p_b_wB==value)
              {
               mainIndexB = index;
              }
              if(index>=mainIndexB)
              {
                const_var.wallArray["back"][key] = value;
              }else{
                  delete const_var.wallArray["back"][key]
              }
            }else if(bHight > (params.p_h/4) && bHight <= (params.p_h/2)){
              params.p_b_wB = "Half_Close"
              if(params.p_b_wB==value)
              {
               mainIndexB = index;
              }
              if(index>=mainIndexB)
              {
                const_var.wallArray["back"][key] = value;
              }else{
                  delete const_var.wallArray["back"][key]
              }
            }else if(bHight > (params.p_h/2) && bHight <= (params.p_h*(3/4)) ){
              params.p_b_wB = "Three_Fourth_Close"
            }else{
                params.p_b_wB = "Close"
                if(params.p_b_wB==value)
                {
                 mainIndexB = index;
                }
                if(index>=mainIndexB)
                {
                  const_var.wallArray["back"][key] = value;
                }else{
                    delete const_var.wallArray["back"][key]
                }
            }

        })

            if(Object.values(const_var.wallArray["back"]).includes(params.p_b_w)==false && Object.values(const_var.wallArray["back"]).length != 0){
                params.p_b_w = params.p_b_wB
            }

        }
        ColorHelper.colors();
        //DoorCSG();
        updateDoorWallNameForEnclosed();
  }
  export const UpdateLeantos = () => {
      FrontLeanToRoof.updateFrontLeanToRoofPitch();
      FrontLeanToLegs.updateFrontLeanToLegs(params.add_front_lean);
      FrontLeanToWalls.updateFrontLeanToWalls();
      LeftLeanToRoof.updateLeftLeanToRoofPitch();
      LeftLeanToLegs.updateLeftLeanToLegs(params.add_left_lean);
      LeftLeanToWalls.updateLeftLeanToWalls()
      RightLeanToRoof.updateRightLeanToRoofPitch();
      RightLeanToLegs.updateRightLeanToLegs(params.add_right_lean);
      RightLeanToWalls.updateRightLeanToWalls();
      BackLeanToRoof.updateBackLeanToRoofPitch();
      BackLeanToLegs.updateBackLeanToLegs(params.add_back_lean);
      BackLeanToWalls.updateBackLeanToWalls();
      ColorHelper.colors();
  }
  export const UpdateLeanPorches = () => {
      LeanToPorchRoof.updateLeanToPorchRoofPitch();
      LeanToPorchLegs.updateLeanToPorchLegs();
      ColorHelper.colors();
  }


  export const UpdateInulationOptionsOnWallValueChange = (type) => {

    if (type == "center") {
        if (params.p_f_w == "Open" && params.p_l_w == "Open" && params.p_r_w == "Open" && params.p_b_w == "Open" && !params.p_c_p_l && !params.p_c_p_r) {
            params.p_r_o = true;
            params.p_f_i = false;
            params.insulation.center.isDisableFullInsulation = true;
            const_var.UpdatedPriceData.insulation_price = undefined;
        } else{
             params.insulation.center.isDisableFullInsulation = false;
        }
    }
    if (type == "frontLean") {
        if (params.p_b_c_b_f_l == "Open" && params.p_b_c_b_f_f == "Open" && params.p_b_c_b_f_b == "Open") {
            params.insulation.frontLean.roofOnly = true;
            params.insulation.frontLean.fullBuilding = false;
            params.insulation.frontLean.isDisableFullInsulation = true;
            const_var.UpdatedPriceData.front_lean_insulation_price_changed = true;
        } else{
             params.insulation.frontLean.isDisableFullInsulation = false;
        }
    }
    if (type == "leftLean") {
        if (params.p_b_c_b_l_f == "Open" && params.p_b_c_b_l_b == "Open" && params.p_b_c_b_l == "Open") {
            params.insulation.leftLean.roofOnly = true;
            params.insulation.leftLean.fullBuilding = false;
            params.insulation.leftLean.isDisableFullInsulation = true;
            const_var.UpdatedPriceData.left_lean_insulation_price_changed = true;
        } else{
             params.insulation.leftLean.isDisableFullInsulation = false;
        }
    }
    if (type == "rightLean") {
        if (params.p_b_c_b_r_f == "Open" && params.p_b_c_b_r_b == "Open" && params.p_b_c_b_r == "Open") {
            params.insulation.rightLean.roofOnly = true;
            params.insulation.rightLean.fullBuilding = false;
            params.insulation.rightLean.isDisableFullInsulation = true;
            const_var.UpdatedPriceData.right_lean_insulation_price_changed = true;
        } else{
             params.insulation.rightLean.isDisableFullInsulation = false;
        }
    }
    if (type == "backLean") {
        if (params.p_b_c_b_b_b == "Open" && params.p_b_c_b_b_l == "Open" && params.p_b_c_b_b_f == "Open") {
            params.insulation.backLean.roofOnly = true;
            params.insulation.backLean.fullBuilding = false;
            params.insulation.backLean.isDisableFullInsulation = true;
            const_var.UpdatedPriceData.back_lean_insulation_price_changed = true;

        } else{
             params.insulation.backLean.isDisableFullInsulation = false;
        }
    }
}

  export const DoorCSG = () =>{
    if (const_var.entry_points.length > 0){
        // console.log(const_var.sum,'==',const_var.hodldEditBuildingData.entry_points.length)
   
    // if(const_var.sum==const_var.hodldEditBuildingData.entry_points.length)
    // {
    // console.log("how many times im in this");
            cuComponent.updateDoorWalls();
            cuComponent.doDoorlegsCSG();
            cuComponent.doDoorHatChannelsCSG();
            if (params.p_w_c_n == true){
                cuComponent.updateDoorWainscot();
            }
    // }  
   } 
  }

  export const DoorCSG1 = () =>{
    cuComponent.updateDoorWalls();
    cuComponent.doDoorlegsCSG(true);
    cuComponent.doDoorHatChannelsCSG();
    if (params.p_w_c_n == true){
        cuComponent.updateDoorWainscot();
    }   
  }


  const pricingReducer = (state = initialState, action) => {
    const newState = { ...state };
    return newState;
  };

  export const rP = () => {

 }
  
  export const F = () => {
    const_var.scene.getObjectByName("foundation").visible = false;
    var a = const_var.scene.getObjectByName("foundation");
    var b = 0;
    var c = 0;
    var LeanWdth = 0;
    var LeanLegth = 0;
    if(params.add_left_lean==true)
    {
    LeanWdth = (LeanWdth>params.lean_p_w)?LeanWdth:params.lean_p_w;
    LeanLegth = (LeanLegth>params.lean_p_d)?LeanLegth:params.lean_p_d;
    }if(params.add_right_lean==true)
    {
    LeanWdth = (LeanWdth>params.leanR_p_w)?LeanWdth:params.leanR_p_w;
    LeanLegth = (LeanLegth>params.leanR_p_d)?LeanLegth:params.leanR_p_d;
    }
    a.scale.x = ((params.add_left_lean==true || params.add_right_lean==true))?params.p_w + LeanWdth *2 + b + c + 8 / 12:params.p_w + b + c + 8 / 12;
    a.scale.z = (LeanLegth>params.p_d)?LeanLegth + 8 / 12:params.p_d + 8 / 12;
    a.position.x = (c - b) / 2;
    a.material.map.repeat.set((params.p_w + 8 / 12) / 10, (params.p_d + 8 / 12) / 10);
    a.material.map.offset.x = (params.p_w + 8 / 12) / -20 + .5;
    a.material.map.offset.y = (params.p_d + 8 / 12) / -20 + .5;
   
  }  
export const ConvStr = (str)=>
{
    return typeof str === "string"?str.toLowerCase():str;
}
function CheckString(mapVal,str){
    return mapVal.indexOf(str);
  }
  
  /* Function for FindStringByName */
  function FindStringByName(arr,str)
  {
    for(var i=0;i<=arr.length-1;i++)
    {
        if(arr[i].name.includes(str))
        {
            return i;
        }
    }
    return "false";
  }
export const cPforRLeanOnlyComparision = (data,iiD) => 
    {       let t_c_b = 0;
            let b = {};
            let newParams = const_var.ComparisionDataArray[iiD].paramsData;
            CheckLeanLegsByResponseForCompare(newParams,"rightLean");
            
            if(newParams.add_right_lean==true)
            {
                removeDataFromArrayCompare(2);
                let leftLeanData = "";
            
            b = {"leanto_type":2,"width": newParams.leanR_p_w,"height": newParams.leanR_p_h,'length':newParams.leanR_p_d,"leanto_drop":"","front_wall": ConvStr(newParams.p_b_c_b_r_f),"back_wall": ConvStr(newParams.p_b_c_b_r_b),"side_wall": ConvStr(newParams.p_b_c_b_r),"front_wall_price":0,"back_wall_price":0,"side_wall_price":0,"front_wall_vertical":newParams.p_v_w,"back_wall_vertical":newParams.p_v_w,"side_wall_vertical":newParams.p_v_w,"certificate":const_var.makeCertificateArrayLeft[newParams.leanR_p_e_i]};
            //a.concat(b);
            
            
            var data = data;
            var mapVal = const_var.map[newParams.p_r_s];
            var CalCulateRoofBasePrice = 0;
            var CalCulateRoofEndClosePrice = 0;
            var CalCulateRoofEndGablePrice = 0;
            var CalCulateRoofUtilityEndPrice =0;

            const_var.main_extraItems_arr_Rlean_Compare = [];
            if(const_var.main_extraItems_arr_Rlean_Compare[newParams.p_e_i]!=undefined)
            {
                newParams.leanR_p_e_i = const_var.main_extraItems_arr_Rlean_Compare[newParams.p_e_i].name;
            }else
            {
                newParams.leanR_p_e_i = (newParams.p_e_i=="Select")?'':newParams.p_e_i;
            }

          if ((data.certificate!=undefined) && (data.certificate.length>0)) {
             newParams.leanR_p_e_i="Select";
             for (var i=0;i<=data.certificate.length-1;i++) {
                if(params.p_e_l ==true)
                {
                    if(data.certificate[i].has_other_leg==1)
                        {
                            const_var.main_extraItems_arr_Rlean_Compare[data.certificate[i].certificate_id] = data.certificate[i];
                             if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || newParams.gauge_val == data.certificate[i].gauge) )
                             {
                                 newParams.leanR_p_e_i =(newParams.leanR_p_e_i=="Select")?data.certificate[i].certificate_id:newParams.leanR_p_e_i;
                             }
                        }

                    
                }else
                {
                    if(data.certificate[i].has_other_leg==0)
                        {
                            const_var.main_extraItems_arr_Rlean_Compare[data.certificate[i].certificate_id] = data.certificate[i];
                             if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || newParams.gauge_val == data.certificate[i].gauge) )
                             {
                                 newParams.leanR_p_e_i =(newParams.leanR_p_e_i=="Select")?data.certificate[i].certificate_id:newParams.leanR_p_e_i;
                             }
                             
                        }
                }
             }
          }
          
            const_var.insulationArrayForLeantoRightCompare = [];
            if (const_var.isInsulaltionForOldQuotes && params.p_i_o !== 0 && (params.p_r_o || params.p_f_i)){
                newParams.insulation.rightLean.insulationId = params.p_i_o;
                newParams.insulation.rightLean.fullBuilding = params.p_f_i;
                newParams.insulation.rightLean.roofOnly = params.p_r_o;
            } 

            if(data!="" && data?.insulation?.length > 0 && newParams.insulation.rightLean.insulationId !== 0)
            {
                let checkInsulation = data.insulation.filter(insulation => insulation.insulation_id == newParams.insulation.rightLean.insulationId)[0]
                const_var.compareInsulationForRightLeanto = checkInsulation!= undefined ? checkInsulation : data.insulation[0]

                newParams.insulation.rightLean.insulationId = const_var.compareInsulationForRightLeanto ? const_var.compareInsulationForRightLeanto.insulation_id : 0;
                if (newParams.add_right_lean && const_var.compareInsulationForRightLeanto!=undefined && newParams.insulation.rightLean.insulationId !=0 ) {
                    const insulationRes = utlis.insulationForCompare(const_var.compareInsulationForRightLeanto, newParams.insulation.rightLean.fullBuilding, newParams.insulation.rightLean.roofOnly, 'rightLean', params.add_storage_check_right, params.p_b_c_b_r);

                    b.insulation = insulationRes.insulation;
                    b.insulation_price = insulationRes.insulationPrice;
                    b.insulation_type = const_var.compareInsulationForRightLeanto;
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                }
            }
      
      b.certificate = const_var.main_extraItems_arr_Rlean_Compare.filter(data=>((data.gauge==0 || newParams.gauge_val == data.gauge)))[0];
      if(newParams.leanR_p_e_i=="Select")
      {
        newParams.leanR_p_e_i = b.certificate.certificate_id;
      }
            if(newParams.add_storage_check_right==true)
            {
                data.side = data.side;
                data.panel = data.panel;
            }else
            {
                data.side = (data.full_length_side!=undefined)?data.full_length_side:data.side;
                data.panel = (data.full_length_panel!=undefined)?data.full_length_panel:data.panel;
            }
           
            if(data.base.length>0)
            {
                let chkGauge = data.base.filter(data=>data.gauge==const_var.g_v);
                for(var i=0;i< data.base.length;i++)
                {
                    if(const_var.g_v==data.base[i].gauge)
                    {
                        b.basic_price = data.base[i][mapVal];
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                        CalCulateRoofBasePrice = b.basic_price;
                    }else if(chkGauge.length==0)
                    {
                        b.basic_price = data.base[i][mapVal];
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                        CalCulateRoofBasePrice = b.basic_price;
                    }
                }
            }else
            {
                    b.basic_price = 0;
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                    CalCulateRoofBasePrice = b.basic_price;
            }
            if(newParams.add_right_front_lean_porch==true )
            {
                b.porch = {'type':'right','length':newParams.leanR_p_d+newParams.leanF_p_d}
            }if(newParams.add_right_back_lean_porch==true )
            {
                b.porch = {'type':'right','length':newParams.leanR_p_d+newParams.leanB_p_d}
            }if(newParams.add_right_back_lean_porch==true && newParams.add_right_front_lean_porch==true)
            {
                b.porch = {'type':'right','length':newParams.leanR_p_d+newParams.leanB_p_d+newParams.leanF_p_d}
            }
            let heightFullData = (data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side:undefined;
            b.lean_has_double_leg = newParams.leanR_p_e_l;
            b.lean_has_double_leg_name = const_var.compareLeanLegs.rightLean.leanRHasDoublelegName;
            b.legstype = const_var.compareLeanLegs.rightLean.leanLegstype;
            if(const_var.g_v==14)
            {
                if(heightFullData[0].double_leg_baserail_cost!=0 && newParams.leanR_p_e_l==true)
                {
                    b.height_price = ((heightFullData[0].double_leg_baserail_cost!=0)?(heightFullData[0].double_leg_baserail_cost):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }else{
                    b.height_price = (heightFullData[0].leg_height_cost);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }
            }
            if(const_var.g_v==12)
            {
                if(newParams.leanR_p_e_l==true)
                {
                    if(heightFullData[0].double_leg_baserail_cost_12 ==0 && heightFullData[0].double_leg_baserail_cost==0)
                    {
                      b.height_price = ((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));    
                      t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }else
                    {
                      b.height_price = ((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].double_leg_baserail_cost));    
                      t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }
                }else{
                    b.height_price = ((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                } 
            }


            // b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_height_price_changed!=true)?leftLeanData.height_price:(data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side[0].leg_height_cost:0;
            // t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
            if(newParams.p_b_c_b_r_f=="Gable" )
            {
                var ShowPrice = "";
                if(newParams.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(newParams.leanR_p_e_i!="" && newParams.leanR_p_e_i!="other" && newParams.leanR_p_e_i!="0" && const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)):(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = ((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(newParams.leanR_p_e_i!="" && newParams.leanR_p_e_i!="other" && newParams.leanR_p_e_i!="0" && const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = ((data.gable_end[0].uncertified));
                    }
                }
                b.front_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndGablePrice = b.front_wall_price;
                //b.back_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
            }if(newParams.p_b_c_b_r_b=="Gable"  && newParams.add_storage_check_right!=true)
            {
                var ShowPrice = "";
                if(newParams.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(newParams.leanR_p_e_i!="" && newParams.leanR_p_e_i!="other" && newParams.leanR_p_e_i!="0" && const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)) :(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = ((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(newParams.leanR_p_e_i!="" && newParams.leanR_p_e_i!="other" && newParams.leanR_p_e_i!="0" && const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = ((data.gable_end[0].uncertified));
                    }
                }  
                //b.front_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                b.back_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndGablePrice = CalCulateRoofEndGablePrice + b.back_wall_price;
            }
            if(newParams.p_b_c_b_r_f=="Half_Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(newParams.p_b_c_b_r_f=="One_Fourth_Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(newParams.p_b_c_b_r_f=="Three_Fourth_Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }
            if(newParams.p_b_c_b_r_f=="Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost) ) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndClosePrice = b.front_wall_price;
                //b.back_wall_price  = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
            }
            if(newParams.p_b_c_b_r_b=="Half_Close" )
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(newParams.p_b_c_b_r_b=="One_Fourth_Close" )
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(newParams.p_b_c_b_r_b=="Three_Fourth_Close" )
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }
            if(newParams.p_b_c_b_r_b=="Close"  && newParams.add_storage_check!=true)
            {
                b.back_wall_price = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndClosePrice = CalCulateRoofEndClosePrice + b.back_wall_price;
            }if(newParams.p_b_c_b_r=="Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true )?(data.side[0].vertical_side_cost)+(data.side[0].side_close_cost):(data.side[0].side_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            }
            if(newParams.p_b_c_b_r=="Half_Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].half_vertical_side_cost)+(data.side[0].half_side_close_cost)).toFixed(2):(data.side[0].half_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(newParams.p_b_c_b_r=="One_Fourth_Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].one_fourth_vertical_side_cost)+(data.side[0].one_fourth_side_close_cost)).toFixed(2):(data.side[0].one_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(newParams.p_b_c_b_r=="Three_Fourth_Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].three_fourth_vertical_side_cost)+(data.side[0].three_fourth_side_close_cost)).toFixed(2):(data.side[0].three_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }
            if(newParams.p_b_c_b_r!=="Close" && newParams.p_b_c_b_r!=="Open"  && newParams.p_b_c_b_r!="Half_Close" && newParams.p_b_c_b_r!="One_Fourth_Close" && newParams.p_b_c_b_r!="Three_Fourth_Close")
            {
                b.side_wall_price = (newParams.p_v_w==true )?(data.panel[0].vertical_panel_cost * newParams.p_b_c_b_r):(data.panel[0].cost * newParams.p_b_c_b_r);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            } 
            
            if(newParams.add_storage_check_right==true && data.utility_side.length>0)
            {   
                if (newParams.p_r_w != 'Close') {
                    b.utility_price = (newParams.p_v_w==true)?(data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2):(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2);
                } else {
                    b.utility_price = (newParams.p_v_w==true)?(data.utility_side[0].vertical_side_cost)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2):(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2);
                }
                t_c_b = parseFloat(t_c_b) + parseFloat(b.utility_price);
               b.utility_length = newParams.add_storage_right;
               b.has_utility = true;
               b.utility_vertical = (newParams.p_v_w)?true:false;
               b.utility_on_centers = (const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s]==undefined)?5:const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s];
               CalCulateRoofUtilityEndPrice = parseFloat(b.utility_price); 
            }
            if ((data.roof_pitch!=undefined) && (data.roof_pitch.length>0)) {
                const_var.rightLeanRoofData = [];
                for (var i=0;i<=data.roof_pitch.length-1;i++) {
                   const_var.rightLeanRoofData[(data.roof_pitch[i].roof_pitch).replace("/", "")] = data.roof_pitch[i];
                   if (data.roof_pitch[i].is_default=="yes" && data.roof_pitch[i].roof_pitch.split("/")[0] != params.b_l_t_r_pR ) {
                        newParams.b_l_t_r_pR = (data.roof_pitch[i].roof_pitch).replace("/", "");
                    }  if (data.roof_pitch[i].roof_pitch.split("/")[0] == params.b_l_t_r_pR ) {
                        newParams.b_l_t_r_pR = (data.roof_pitch[i].roof_pitch).replace("/", "");
                        break;
                    }
                }
             }
            if( const_var.rightLeanRoofData?.length > 0 && const_var.rightLeanRoofData[newParams.b_l_t_r_pR]!=undefined)
            {            
                if(const_var.rightLeanRoofData[newParams.b_l_t_r_pR].cost_type == "%")
                {
                    
                var splitVal = (const_var.rightLeanRoofData[newParams.b_l_t_r_pR].percentage_of!=undefined && const_var.rightLeanRoofData[newParams.b_l_t_r_pR].percentage_of!=0)?const_var.rightLeanRoofData[newParams.b_l_t_r_pR].percentage_of.split(","):0;
                var splval = 0;
                if(splitVal!=0)
                {
                    if(splitVal.includes("1")!=false)
                    {
                        splval = splval + CalCulateRoofBasePrice;
                    }if(splitVal.includes("2")!=false)
                    {
                        if(CalCulateRoofUtilityEndPrice!=0)
                        {
                            splval = splval + CalCulateRoofUtilityEndPrice;
                        }
                        splval = splval + CalCulateRoofEndClosePrice;
                    }if(splitVal.includes("3")!=false)
                    {
                        splval = splval + CalCulateRoofEndGablePrice;
                    }
                }else
                {
                    splval = splval + CalCulateRoofBasePrice;
                }
                    var rightLeanRoofPrice = (const_var.rightLeanRoofData[newParams.b_l_t_r_pR])?(splval * const_var.rightLeanRoofData[newParams.b_l_t_r_pR].cost / 100):0;
                    b.roof_pitch = const_var.rightLeanRoofData[newParams.b_l_t_r_pR].roof_pitch;
                    b.roof_pitch_name = const_var.rightLeanRoofData[newParams.b_l_t_r_pR].roof_pitch;
                    b.roof_pitch_price = rightLeanRoofPrice
                    t_c_b =  parseFloat(t_c_b) + parseFloat(rightLeanRoofPrice);              
                }
                else
                {
                    var rightLeanRoofPrice = (const_var.rightLeanRoofData[newParams.b_l_t_r_pR])?const_var.rightLeanRoofData[newParams.b_l_t_r_pR].cost:0;
                    t_c_b =  parseFloat(t_c_b) + parseFloat(rightLeanRoofPrice);
                    b.roof_pitch = const_var.rightLeanRoofData[newParams.b_l_t_r_pR].roof_pitch;
                    b.roof_pitch_name = const_var.rightLeanRoofData[newParams.b_l_t_r_pR].roof_pitch;
                    b.roof_pitch_price = rightLeanRoofPrice;                
                }
            }else{
           
                b.roof_pitch = "3/12";
                b.roof_pitch_name = "3/12";
                b.roof_pitch_price = 0;   
            }
            if(newParams.leanR_p_e_i!="" && newParams.leanR_p_e_i!="0" && newParams.leanR_p_e_i!="other" && const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i]!=undefined)
            {
                if(newParams.p_i_s=="1")
                {
                    if(const_var.main_extraItems_arr_Rlean_Compare.length >0 && const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of!=undefined && const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of_cost)?(t_c_b * const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                    }else{
                        var finalCertPrice = (const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].certification_concrete_cost)?const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].certification_concrete_cost:0;
                        // t_c_b = parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price = finalCertPrice;
                    }
                }else{
                    if(const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of!=undefined && const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of_cost)?(t_c_b * const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                        //console.log(b.certificate_price,"b.certificate_price",b.certificate_price * certVal);
                    }else
                    {
                        var finalCertPrice = (const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].cost)?const_var.main_extraItems_arr_Rlean_Compare[newParams.leanR_p_e_i].cost:0;
                        // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price =finalCertPrice;
                    }
                }
            }
            if(newParams.leanR_p_e_i=="other")
            {
                b.certificate = {'gauge': 0,'certified': 1,'has_double_leg': 0,'has_ladder_leg': 0,'has_other_leg': 0,'height': 0,'id': -1,'cost':0,'is_default': "no",'length': 0,'map_id': 0,'name': "Other"};
                b.certificate_other_name = (newParams.leanR_p_e_i_other!='')?newParams.leanR_p_e_i_other:'Other';
                b.certificate_price  = 0;
                t_c_b =  parseFloat(t_c_b) + parseFloat(b.certificate_price);
            }
        b.pricing_data =  data;
        
        b.t_c_b = parseFloat(t_c_b);
        const_var.leantoCompare.push(b);
        }
        else
        {
            removeDataFromArrayCompare(2);
    
        }
        
        setComparePricingData(iiD);
        
    }
    export const cPforFLeanOnlyComparision = (data,iiD) => 
    {       let t_c_b = 0;
            let b = {};
            let newParams = const_var.ComparisionDataArray[iiD].paramsData;
            CheckLeanLegsByResponseForCompare(newParams,"frontLean");
            
            if(newParams.add_front_lean==true)
            {
                removeDataFromArrayCompare(3);
                let leftLeanData = "";
            
            b = {"leanto_type":3,"width": newParams.leanF_p_w,"height": newParams.leanF_p_h,'length':newParams.leanF_p_d,"leanto_drop":"","front_wall": ConvStr(newParams.p_b_c_b_f_f),"back_wall": ConvStr(newParams.p_b_c_b_f_b),"side_wall": ConvStr(newParams.p_b_c_b_f_l),"front_wall_price":0,"back_wall_price":0,"side_wall_price":0,"front_wall_vertical":newParams.p_v_w,"back_wall_vertical":newParams.p_v_w,"side_wall_vertical":newParams.p_v_w,"certificate":const_var.makeCertificateArrayFront[newParams.leanF_p_e_i]};
            //a.concat(b);
            const_var.main_extraItems_arr_Flean_Compare = [];
            if(const_var.main_extraItems_arr_Flean_Compare[newParams.p_e_i]!=undefined)
            {
                newParams.leanF_p_e_i = const_var.main_extraItems_arr_Flean_Compare[newParams.p_e_i].name;
            }else
            {
                newParams.leanF_p_e_i = (newParams.p_e_i=="Select")?'':newParams.p_e_i;
            }
            
            var data = data;
            var mapVal = const_var.map[newParams.p_r_s];
            var CalCulateRoofBasePrice = 0;
            var CalCulateRoofEndClosePrice = 0;
            var CalCulateRoofEndGablePrice = 0;
            var CalCulateRoofUtilityEndPrice =0;


            
          if ((data.certificate!=undefined) && (data.certificate.length>0)) {
            newParams.leanF_p_e_i="Select";
             for (var i=0;i<=data.certificate.length-1;i++) {
                if(params.leanF_p_e_l ==true)
                {
                    if(data.certificate[i].has_other_leg==1)
                        {
                            const_var.main_extraItems_arr_Flean_Compare[data.certificate[i].certificate_id] = data.certificate[i];
                             if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || newParams.gauge_val == data.certificate[i].gauge) )
                             {
                                 newParams.leanF_p_e_i =(newParams.leanF_p_e_i=="Select")?data.certificate[i].certificate_id:newParams.leanF_p_e_i;
                             }
                        }

                    
                }else
                {
                    if(data.certificate[i].has_other_leg==0)
                        {
                            const_var.main_extraItems_arr_Flean_Compare[data.certificate[i].certificate_id] = data.certificate[i];
                             if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || newParams.gauge_val == data.certificate[i].gauge) )
                             {
                                 newParams.leanF_p_e_i =(newParams.leanF_p_e_i=="Select")?data.certificate[i].certificate_id:newParams.leanF_p_e_i;
                             }
                             
                        }
                }
             }
          }
        const_var.insulationArrayForLeantoFrontCompare = [];
        if (const_var.isInsulaltionForOldQuotes && params.p_i_o !== 0 && (params.p_r_o || params.p_f_i)){
            newParams.insulation.frontLean.insulationId = params.p_i_o;
            newParams.insulation.frontLean.fullBuilding = params.p_f_i;
            newParams.insulation.frontLean.roofOnly = params.p_r_o;
        } 
          if(data!="" && data?.insulation?.length > 0 && newParams.insulation.frontLean.insulationId !== 0)
            {
                let checkInsulation = data.insulation.filter(insulation => insulation.insulation_id == newParams.insulation.frontLean.insulationId)[0]
                const_var.compareInsulationForFrontLeanto = checkInsulation!= undefined ? checkInsulation : data.insulation[0]

                newParams.insulation.frontLean.insulationId = const_var.compareInsulationForFrontLeanto ? const_var.compareInsulationForFrontLeanto.insulation_id : 0;
                if (newParams.add_front_lean && const_var.compareInsulationForFrontLeanto!=undefined && newParams.insulation.frontLean.insulationId !=0 ) {
                    const insulationRes = utlis.insulationForCompare(const_var.compareInsulationForFrontLeanto, newParams.insulation.frontLean.fullBuilding, newParams.insulation.frontLean.roofOnly, 'frontLean', params.add_storage_check_front, params.p_b_c_b_f_l );

                    b.insulation = insulationRes.insulation;
                    b.insulation_price = insulationRes.insulationPrice;
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                    b.insulation_type = const_var.compareInsulationForFrontLeanto;
                }

            }
            
      b.certificate = const_var.main_extraItems_arr_Flean_Compare.filter(data=>((data.gauge==0 || newParams.gauge_val == data.gauge)))[0];
      if(newParams.leanF_p_e_i=="Select")
      {
        newParams.leanF_p_e_i = b.certificate.certificate_id;
      }
            if(newParams.leanF_p_e_i==0)
              {
                newParams.leanF_p_e_i = b.certificate.certificate_id;
              }
            if(newParams.add_storage_check_front==true)
            {
                data.side = data.side;
                data.panel = data.panel;
            }else
            {
                data.side = (data.full_length_side!=undefined)?data.full_length_side:data.side;
                data.panel = (data.full_length_panel!=undefined)?data.full_length_panel:data.panel;
            }


           
            if(data.base.length>0)
            {
                let chkGauge = data.base.filter(data=>data.gauge==const_var.g_v);
                for(var i=0;i< data.base.length;i++)
                {
                    if(const_var.g_v==data.base[i].gauge)
                    {
                        b.basic_price = data.base[i][mapVal];
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                        CalCulateRoofBasePrice = b.basic_price;
                    }else if(chkGauge.length==0)
                    {
                        b.basic_price = data.base[i][mapVal];
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                        CalCulateRoofBasePrice = b.basic_price;
                    }
                }
            }else
            {
                    b.basic_price = 0;
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                    CalCulateRoofBasePrice = b.basic_price;
            }
            b.wrappedLength = 0;
            if(newParams.add_left_front_lean_porch==true )
            {
                b.porch = {'type':'front','length':newParams.lean_p_w+newParams.leanF_p_d}
                b.wrappedLength = newParams.lean_p_w+newParams.leanF_p_d;
            }if(newParams.add_right_front_lean_porch==true )
            {
                b.porch = {'type':'front','length':newParams.leanR_p_w+newParams.leanF_p_d}
                b.wrappedLength = newParams.leanR_p_w+newParams.leanF_p_d;
            }if(newParams.add_right_front_lean_porch==true && newParams.add_left_front_lean_porch==true)
            {
                b.porch = {'type':'front','length':newParams.leanR_p_w+newParams.lean_p_w+newParams.leanF_p_d}
                b.wrappedLength = newParams.leanR_p_w+newParams.lean_p_w+newParams.leanF_p_d;
            }
            let heightFullData = (data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side:undefined;
            b.lean_has_double_leg = newParams.leanF_p_e_l;
            b.lean_has_double_leg_name = const_var.compareLeanLegs.frontLean.leanFHasDoublelegName;
            b.legstype = const_var.compareLeanLegs.frontLean.leanLegstype;
            if(const_var.g_v==14)
            {
                if(heightFullData[0].double_leg_baserail_cost!=0 && newParams.leanF_p_e_l==true)
                {
                    b.height_price = ((heightFullData[0].double_leg_baserail_cost!=0)?(heightFullData[0].double_leg_baserail_cost):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }else{
                    b.height_price = (heightFullData[0].leg_height_cost);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }
            }
            if(const_var.g_v==12)
            {
                if(params.leanF_p_e_l==true)
                {
                    if(heightFullData[0].double_leg_baserail_cost_12 ==0 && heightFullData[0].double_leg_baserail_cost==0)
                    {
                      b.height_price = ((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }else
                    {
                      b.height_price = ((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].double_leg_baserail_cost));    
                      t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }
                }else{
                    b.height_price = ((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                } 
            }


            // b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_height_price_changed!=true)?leftLeanData.height_price:(data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side[0].leg_height_cost:0;
            // t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
            if(newParams.p_b_c_b_f_f=="Gable" )
            {
                var ShowPrice = "";
                if(newParams.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(newParams.leanF_p_e_i!="" && newParams.leanF_p_e_i!="other" && newParams.leanF_p_e_i!="0" && const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)):(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = ((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(newParams.leanF_p_e_i!="" && newParams.leanF_p_e_i!="other" && newParams.leanF_p_e_i!="0" && const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = ((data.gable_end[0].uncertified));
                    }
                }
                b.front_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndGablePrice = b.front_wall_price;
                //b.back_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
            }if(newParams.p_b_c_b_f_b=="Gable"  && newParams.add_storage_check_front!=true)
            {
                var ShowPrice = "";
                if(newParams.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(newParams.leanF_p_e_i!="" && newParams.leanF_p_e_i!="other" && newParams.leanF_p_e_i!="0" && const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)) :(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = ((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(newParams.leanF_p_e_i!="" && newParams.leanF_p_e_i!="other" && newParams.leanF_p_e_i!="0" && const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = ((data.gable_end[0].uncertified));
                    }
                }  
                //b.front_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                b.back_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndGablePrice = CalCulateRoofEndGablePrice + b.back_wall_price;
            }
            if(newParams.p_b_c_b_f_f=="Half_Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(newParams.p_b_c_b_f_f=="One_Fourth_Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(newParams.p_b_c_b_f_f=="Three_Fourth_Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }
            if(newParams.p_b_c_b_f_f=="Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost) ) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndClosePrice = b.front_wall_price;
                //b.back_wall_price  = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
            }
            if(newParams.p_b_c_b_f_b=="Half_Close" )
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(newParams.p_b_c_b_f_b=="One_Fourth_Close" )
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(newParams.p_b_c_b_f_b=="Three_Fourth_Close" )
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }
            if(newParams.p_b_c_b_f_b=="Close"  && newParams.add_storage_check_front!=true)
            {
                b.back_wall_price = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndClosePrice = CalCulateRoofEndClosePrice + b.back_wall_price;
            }if(newParams.p_b_c_b_f_l=="Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true )?(data.side[0].vertical_side_cost)+(data.side[0].side_close_cost):(data.side[0].side_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            }
            if(newParams.p_b_c_b_f_l=="Half_Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].half_vertical_side_cost)+(data.side[0].half_side_close_cost)).toFixed(2):(data.side[0].half_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(newParams.p_b_c_b_f_l=="One_Fourth_Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].one_fourth_vertical_side_cost)+(data.side[0].one_fourth_side_close_cost)).toFixed(2):(data.side[0].one_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(newParams.p_b_c_b_f_l=="Three_Fourth_Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].three_fourth_vertical_side_cost)+(data.side[0].three_fourth_side_close_cost)).toFixed(2):(data.side[0].three_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }
            if(newParams.p_b_c_b_f_l!=="Close" && newParams.p_b_c_b_f_l!=="Open"  && newParams.p_b_c_b_f_l!="Half_Close" && newParams.p_b_c_b_f_l!="One_Fourth_Close" && newParams.p_b_c_b_f_l!="Three_Fourth_Close")
            {
                b.side_wall_price = (newParams.p_v_w==true )?(data.panel[0].vertical_panel_cost * newParams.p_b_c_b_f_l):(data.panel[0].cost * newParams.p_b_c_b_f_l);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            } 
            
            if(newParams.add_storage_check_front==true && data.utility_side.length>0)
            {   
                if (newParams.p_f_w != 'Close') {
                    b.utility_price = (newParams.p_v_w==true)?(data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2):(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2);
                } else {
                    b.utility_price = (newParams.p_v_w==true)?(data.utility_side[0].vertical_side_cost)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2):(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2);
                }
            
                t_c_b = parseFloat(t_c_b) + parseFloat(b.utility_price);
               b.utility_length = newParams.add_storage_front;
               b.has_utility = true;
               b.utility_vertical = (newParams.p_v_w)?true:false;
               b.utility_on_centers = (const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s]==undefined)?5:const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s];
               CalCulateRoofUtilityEndPrice = parseFloat(b.utility_price); 
            }
            if ((data.roof_pitch!=undefined) && (data.roof_pitch.length>0)) {
                const_var.frontLeanRoofData = [];
                for (var i=0;i<=data.roof_pitch.length-1;i++) {
                   const_var.frontLeanRoofData[(data.roof_pitch[i].roof_pitch).replace("/", "")] = data.roof_pitch[i];
                   if (data.roof_pitch[i].is_default=="yes" && data.roof_pitch[i].roof_pitch.split("/")[0] != params.b_l_t_r_pF ) {
                        newParams.b_l_t_r_pF = (data.roof_pitch[i].roof_pitch).replace("/", "");
                    }  if (data.roof_pitch[i].roof_pitch.split("/")[0] == params.b_l_t_r_pF ) {
                        newParams.b_l_t_r_pF = (data.roof_pitch[i].roof_pitch).replace("/", "");
                        break;
                    }
                }
             }
            if(const_var.frontLeanRoofData != undefined && const_var.frontLeanRoofData.length > 0 && const_var.frontLeanRoofData[newParams.b_l_t_r_pF]!=undefined)
            {            
                if(const_var.frontLeanRoofData[newParams.b_l_t_r_pF].cost_type == "%")
                {
                    
                var splitVal = (const_var.frontLeanRoofData[newParams.b_l_t_r_pF].percentage_of!=undefined && const_var.frontLeanRoofData[newParams.b_l_t_r_pF].percentage_of!=0)?const_var.frontLeanRoofData[newParams.b_l_t_r_pF].percentage_of.split(","):0;
                var splval = 0;
                if(splitVal!=0)
                {
                    if(splitVal.includes("1")!=false)
                    {
                        splval = splval + CalCulateRoofBasePrice;
                    }if(splitVal.includes("2")!=false)
                    {
                        if(CalCulateRoofUtilityEndPrice!=0)
                        {
                            splval = splval + CalCulateRoofUtilityEndPrice;
                        }
                        splval = splval + CalCulateRoofEndClosePrice;
                    }if(splitVal.includes("3")!=false)
                    {
                        splval = splval + CalCulateRoofEndGablePrice;
                    }
                }else
                {
                    splval = splval + CalCulateRoofBasePrice;
                }
                    var frontLeanRoofPrice = (const_var.frontLeanRoofData[newParams.b_l_t_r_pF])?(splval * const_var.frontLeanRoofData[newParams.b_l_t_r_pF].cost / 100):0;
                    b.roof_pitch = const_var.frontLeanRoofData[newParams.b_l_t_r_pF].roof_pitch;
                    b.roof_pitch_name = const_var.frontLeanRoofData[newParams.b_l_t_r_pF].roof_pitch;
                    b.roof_pitch_price = frontLeanRoofPrice
                    t_c_b =  parseFloat(t_c_b) + parseFloat(frontLeanRoofPrice);              
                }
                else
                {
                    var frontLeanRoofPrice = (const_var.frontLeanRoofData[newParams.b_l_t_r_pF])?const_var.frontLeanRoofData[newParams.b_l_t_r_pF].cost:0;
                    t_c_b =  parseFloat(t_c_b) + parseFloat(frontLeanRoofPrice);
                    b.roof_pitch = const_var.frontLeanRoofData[newParams.b_l_t_r_pF].roof_pitch;
                    b.roof_pitch_name = const_var.frontLeanRoofData[newParams.b_l_t_r_pF].roof_pitch;
                    b.roof_pitch_price = frontLeanRoofPrice;                
                }
            }else{
           
                b.roof_pitch = "3/12";
                b.roof_pitch_name = "3/12";
                b.roof_pitch_price = 0;   
            }
            if(newParams.leanF_p_e_i!="" && newParams.leanF_p_e_i!="0" && newParams.leanF_p_e_i!="other" && const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i]!=undefined)
            {
                if(newParams.p_i_s=="1")
                {
                    if(const_var.main_extraItems_arr_Flean_Compare.length >0 && const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of!=undefined && const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of_cost)?(t_c_b * const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                    }else{
                        var finalCertPrice = (const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].certification_concrete_cost)?const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].certification_concrete_cost:0;
                        // t_c_b = parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price = finalCertPrice;
                    }
                }else{
                    if(const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of!=undefined && const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of_cost)?(t_c_b * const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                        //console.log(b.certificate_price,"b.certificate_price",b.certificate_price * certVal);
                    }else
                    {
                        var finalCertPrice = (const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].cost)?const_var.main_extraItems_arr_Flean_Compare[newParams.leanF_p_e_i].cost:0;
                        // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price =finalCertPrice;
                    }
                }
            }
            if(newParams.leanF_p_e_i=="other")
            {
                b.certificate = {'gauge': 0,'certified': 1,'has_double_leg': 0,'has_ladder_leg': 0,'has_other_leg': 0,'height': 0,'id': -1,'cost':0,'is_default': "no",'length': 0,'map_id': 0,'name': "Other"};
                b.certificate_other_name = (newParams.leanF_p_e_i_other!='')?newParams.leanF_p_e_i_other:'Other';
                b.certificate_price  = 0;
                t_c_b =  parseFloat(t_c_b) + parseFloat(b.certificate_price);
            }
            
    
        b.pricing_data =  data;
        
        b.t_c_b = parseFloat(t_c_b);
        const_var.leantoCompare.push(b);
        }
        else
        {
            removeDataFromArrayCompare(3);
    
        }
        
        setComparePricingData(iiD);
        
    }
    export const cPforBLeanOnlyComparision = (data,iiD) => 
    {       let t_c_b = 0;
            let b = {};
            let newParams = const_var.ComparisionDataArray[iiD].paramsData;
            CheckLeanLegsByResponseForCompare(newParams,"backLean");
            
            if(newParams.add_back_lean==true)
            {
                removeDataFromArrayCompare(4);
                let leftLeanData = "";
            
            b = {"leanto_type":4,"width": newParams.leanB_p_w,"height": newParams.leanB_p_h,'length':newParams.leanB_p_d,"leanto_drop":"","front_wall": ConvStr(newParams.p_b_c_b_b_f),"back_wall": ConvStr(newParams.p_b_c_b_b_b),"side_wall": ConvStr(newParams.p_b_c_b_b_l),"front_wall_price":0,"back_wall_price":0,"side_wall_price":0,"front_wall_vertical":newParams.p_v_w,"back_wall_vertical":newParams.p_v_w,"side_wall_vertical":newParams.p_v_w,"certificate":const_var.makeCertificateArrayBack[newParams.leanB_p_e_i]};
            //a.concat(b);
            
            
            var data = data;
            var mapVal = const_var.map[newParams.p_r_s];
            var CalCulateRoofBasePrice = 0;
            var CalCulateRoofEndClosePrice = 0;
            var CalCulateRoofEndGablePrice = 0;
            var CalCulateRoofUtilityEndPrice =0;


            const_var.main_extraItems_arr_Blean_Compare = [];
         if(const_var.main_extraItems_arr_Blean_Compare[newParams.p_e_i]!=undefined)
            {
                newParams.leanB_p_e_i = const_var.main_extraItems_arr_Blean_Compare[newParams.p_e_i].name;
            }else
            {
                newParams.leanB_p_e_i = (newParams.p_e_i=="Select")?'':newParams.p_e_i;
            }
      

          if ((data.certificate!=undefined) && (data.certificate.length>0)) {
            newParams.leanB_p_e_i="Select";
             for (var i=0;i<=data.certificate.length-1;i++) {
                if(params.p_e_l ==true)
                {
                    if(data.certificate[i].has_other_leg==1)
                        {
                            const_var.main_extraItems_arr_Blean_Compare[data.certificate[i].certificate_id] = data.certificate[i];
                             if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || newParams.gauge_val == data.certificate[i].gauge) )
                             {
                                 newParams.leanB_p_e_i =(newParams.leanB_p_e_i=="Select")?data.certificate[i].certificate_id:newParams.leanB_p_e_i;
                             }
                        }

                    
                }else
                {
                    if(data.certificate[i].has_other_leg==0)
                        {
                            const_var.main_extraItems_arr_Blean_Compare[data.certificate[i].certificate_id] = data.certificate[i];
                             if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || newParams.gauge_val == data.certificate[i].gauge) )
                             {
                                 newParams.leanB_p_e_i =(newParams.leanB_p_e_i=="Select")?data.certificate[i].certificate_id:newParams.leanB_p_e_i;
                             }
                             
                        }
                }
             }
          }
        const_var.insulationArrayForLeantoBackCompare = [];
        if (const_var.isInsulaltionForOldQuotes && params.p_i_o !== 0 && (params.p_r_o || params.p_f_i)){
            newParams.insulation.backLean.insulationId = params.p_i_o;
            newParams.insulation.backLean.fullBuilding = params.p_f_i;
            newParams.insulation.backLean.roofOnly = params.p_r_o;
        }
          if(data!="" && data?.insulation?.length > 0 && newParams.insulation.backLean.insulationId != 0 )
            {
                let checkInsulation = data.insulation.filter(insulation => insulation.insulation_id == newParams.insulation.backLean.insulationId)[0]
                const_var.compareInsulationForBacktLeanto = checkInsulation!= undefined ? checkInsulation : data.insulation[0]

                newParams.insulation.backLean.insulationId = const_var.compareInsulationForBacktLeanto ? const_var.compareInsulationForBacktLeanto.insulation_id : 0;
                if (newParams.add_back_lean && const_var.compareInsulationForBacktLeanto!=undefined && newParams.insulation.backLean.insulationId !=0 ) {
                    const insulationRes = utlis.insulationForCompare(const_var.compareInsulationForBacktLeanto, newParams.insulation.backLean.fullBuilding, newParams.insulation.backLean.roofOnly, 'backLean', params.add_storage_check_back, params.p_b_c_b_b_l);

                    b.insulation = insulationRes.insulation;
                    b.insulation_price = insulationRes.insulationPrice;
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                    b.insulation_type = const_var.compareInsulationForBacktLeanto;
                }

            }
            
      b.certificate = const_var.main_extraItems_arr_Blean_Compare.filter(data=>((data.gauge==0 || newParams.gauge_val == data.gauge)))[0];
      if(newParams.leanB_p_e_i=="Select")
      {
        newParams.leanB_p_e_i = b.certificate.certificate_id;
      }
            if(newParams.leanB_p_e_i==0)
              {
                newParams.leanB_p_e_i = b.certificate.certificate_id;
              }
            if(newParams.add_storage_check_back==true)
            {
                data.side = data.side;
                data.panel = data.panel;
            }else
            {
                data.side = (data.full_length_side!=undefined)?data.full_length_side:data.side;
                data.panel = (data.full_length_panel!=undefined)?data.full_length_panel:data.panel;
            }


           
            if(data.base.length>0)
            {
                let chkGauge = data.base.filter(data=>data.gauge==const_var.g_v);
                for(var i=0;i< data.base.length;i++)
                {
                    if(const_var.g_v==data.base[i].gauge)
                    {
                        b.basic_price = data.base[i][mapVal];
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                        CalCulateRoofBasePrice = b.basic_price;
                    }else if(chkGauge.length==0)
                    {
                        b.basic_price = data.base[i][mapVal];
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                        CalCulateRoofBasePrice = b.basic_price;
                    }
                }
            }else
            {
                    b.basic_price = 0;
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                    CalCulateRoofBasePrice = b.basic_price;
            }
            b.wrappedLength = 0;
            if(newParams.add_left_back_lean_porch==true )
            {
                b.porch = {'type':'back','length':newParams.lean_p_w+newParams.leanB_p_d}
                b.wrappedLength = newParams.lean_p_w+newParams.leanB_p_d;
            }if(newParams.add_right_back_lean_porch==true )
            {
                b.porch = {'type':'back','length':newParams.leanR_p_w+newParams.leanB_p_d}
                b.wrappedLength = newParams.leanR_p_w+newParams.leanB_p_d;
            }if(newParams.add_right_back_lean_porch==true && newParams.add_left_back_lean_porch==true)
            {
                b.porch = {'type':'back','length':newParams.leanR_p_w+newParams.lean_p_w+newParams.leanB_p_d}
                b.wrappedLength = newParams.leanR_p_w+newParams.lean_p_w+newParams.leanB_p_d;
            }

            let heightFullData = (data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side:undefined;
            b.lean_has_double_leg = newParams.leanB_p_e_l;
            b.lean_has_double_leg_name = const_var.compareLeanLegs.backLean.leanBHasDoublelegName;
            b.legstype = const_var.compareLeanLegs.backLean.leanLegstype;

            if(const_var.g_v==14)
            {
                if(heightFullData[0].double_leg_baserail_cost!=0 && newParams.leanB_p_e_l==true)
                {
                    b.height_price = ((heightFullData[0].double_leg_baserail_cost!=0)?(heightFullData[0].double_leg_baserail_cost):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }else{
                    b.height_price = (heightFullData[0].leg_height_cost);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }
            }
            if(const_var.g_v==12)
            {
                if(params.leanB_p_e_l==true)
                {
                  if(heightFullData[0].double_leg_baserail_cost_12 ==0 && heightFullData[0].double_leg_baserail_cost==0)
                    {
                      b.height_price = ((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].leg_height_cost));    
                      t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }else
                    {
                      b.height_price = ((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].double_leg_baserail_cost));    
                      t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }
                    
                }else{
                    b.height_price = ((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                } 
            }


            // b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_height_price_changed!=true)?leftLeanData.height_price:(data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side[0].leg_height_cost:0;
            // t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
            if(newParams.p_b_c_b_b_f=="Gable" )
            {
                var ShowPrice = "";
                if(newParams.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(newParams.leanB_p_e_i!="" && newParams.leanB_p_e_i!="other" && newParams.leanB_p_e_i!="0" && const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)):(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = ((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(newParams.leanB_p_e_i!="" && newParams.leanB_p_e_i!="other" && newParams.leanB_p_e_i!="0" && const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = ((data.gable_end[0].uncertified));
                    }
                }
                b.front_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndGablePrice = b.front_wall_price;
                //b.back_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
            }if(newParams.p_b_c_b_b_b=="Gable"  && newParams.add_storage_check_back!=true)
            {
                var ShowPrice = "";
                if(newParams.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(newParams.leanB_p_e_i!="" && newParams.leanB_p_e_i!="other" && newParams.leanB_p_e_i!="0" && const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)) :(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = ((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(newParams.leanB_p_e_i!="" && newParams.leanB_p_e_i!="other" && newParams.leanB_p_e_i!="0" && const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = ((data.gable_end[0].uncertified));
                    }
                }  
                //b.front_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                b.back_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndGablePrice = CalCulateRoofEndGablePrice + b.back_wall_price;
            }
            if(newParams.p_b_c_b_b_f=="Half_Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(newParams.p_b_c_b_b_f=="One_Fourth_Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(newParams.p_b_c_b_b_f=="Three_Fourth_Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }
            if(newParams.p_b_c_b_b_f=="Close" )
            {
                b.front_wall_price = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost) ) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndClosePrice = b.front_wall_price;
                //b.back_wall_price  = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
            }
            if(newParams.p_b_c_b_b_b=="Half_Close" )
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(newParams.p_b_c_b_b_b=="One_Fourth_Close" )
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(newParams.p_b_c_b_b_b=="Three_Fourth_Close" )
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }
            if(newParams.p_b_c_b_b_b=="Close"  && newParams.add_storage_check_back!=true)
            {
                b.back_wall_price = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndClosePrice = CalCulateRoofEndClosePrice + b.back_wall_price;
            }if(newParams.p_b_c_b_b_l=="Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true )?(data.side[0].vertical_side_cost)+(data.side[0].side_close_cost):(data.side[0].side_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            }
            if(newParams.p_b_c_b_b_l=="Half_Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].half_vertical_side_cost)+(data.side[0].half_side_close_cost)).toFixed(2):(data.side[0].half_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(newParams.p_b_c_b_b_l=="One_Fourth_Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].one_fourth_vertical_side_cost)+(data.side[0].one_fourth_side_close_cost)).toFixed(2):(data.side[0].one_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(newParams.p_b_c_b_b_l=="Three_Fourth_Close" )
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].three_fourth_vertical_side_cost)+(data.side[0].three_fourth_side_close_cost)).toFixed(2):(data.side[0].three_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }
            if(newParams.p_b_c_b_b_l!=="Close" && newParams.p_b_c_b_b_l!=="Open"  && newParams.p_b_c_b_b_l!="Half_Close" && newParams.p_b_c_b_b_l!="One_Fourth_Close" && newParams.p_b_c_b_b_l!="Three_Fourth_Close")
            {
                b.side_wall_price = (newParams.p_v_w==true )?(data.panel[0].vertical_panel_cost * newParams.p_b_c_b_b_l):(data.panel[0].cost * newParams.p_b_c_b_b_l);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            } 
            
            if(newParams.add_storage_check_back==true && data.utility_side.length>0)
            {   
                if (newParams.p_b_w != 'Close') {
                    b.utility_price = (newParams.p_v_w==true)?(data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2):(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2);
                } else {
                    b.utility_price = (newParams.p_v_w==true)?(data.utility_side[0].vertical_side_cost)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2):(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2);
                }
            
                t_c_b = parseFloat(t_c_b) + parseFloat(b.utility_price);
               b.utility_length = newParams.add_storage_back;
               b.has_utility = true;
               b.utility_vertical = (newParams.p_v_w)?true:false;
               b.utility_on_centers = (const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s]==undefined)?5:const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s];
               CalCulateRoofUtilityEndPrice = parseFloat(b.utility_price); 
            }
            if ((data.roof_pitch!=undefined) && (data.roof_pitch.length>0)) {
                const_var.backLeanRoofData = [];
                for (var i=0;i<=data.roof_pitch.length-1;i++) {
                   const_var.backLeanRoofData[(data.roof_pitch[i].roof_pitch).replace("/", "")] = data.roof_pitch[i];
                   if (data.roof_pitch[i].is_default=="yes" && data.roof_pitch[i].roof_pitch.split("/")[0] != params.b_l_t_r_pB ) {
                        newParams.b_l_t_r_pB = (data.roof_pitch[i].roof_pitch).replace("/", "");
                    } if (data.roof_pitch[i].roof_pitch.split("/")[0] == params.b_l_t_r_pB ) {
                        newParams.b_l_t_r_pB = (data.roof_pitch[i].roof_pitch).replace("/", "");
                        break;
                    }
                }
             }
            if( const_var.backLeanRoofData?.length > 0 && const_var.backLeanRoofData[newParams.b_l_t_r_pB]!=undefined)
            {            
                if(const_var.backLeanRoofData[newParams.b_l_t_r_pB].cost_type == "%")
                {
                    
                var splitVal = (const_var.backLeanRoofData[newParams.b_l_t_r_pB].percentage_of!=undefined && const_var.backLeanRoofData[newParams.b_l_t_r_pB].percentage_of!=0)?const_var.backLeanRoofData[newParams.b_l_t_r_pB].percentage_of.split(","):0;
                var splval = 0;
                if(splitVal!=0)
                {
                    if(splitVal.includes("1")!=false)
                    {
                        splval = splval + CalCulateRoofBasePrice;
                    }if(splitVal.includes("2")!=false)
                    {
                        if(CalCulateRoofUtilityEndPrice!=0)
                        {
                            splval = splval + CalCulateRoofUtilityEndPrice;
                        }
                        splval = splval + CalCulateRoofEndClosePrice;
                    }if(splitVal.includes("3")!=false)
                    {
                        splval = splval + CalCulateRoofEndGablePrice;
                    }
                }else
                {
                    splval = splval + CalCulateRoofBasePrice;
                }
                    var backLeanRoofPrice = (const_var.backLeanRoofData[newParams.b_l_t_r_pB])?(splval * const_var.backLeanRoofData[newParams.b_l_t_r_pB].cost / 100):0;
                    b.roof_pitch = const_var.backLeanRoofData[newParams.b_l_t_r_pB].roof_pitch;
                    b.roof_pitch_name = const_var.backLeanRoofData[newParams.b_l_t_r_pB].roof_pitch;
                    b.roof_pitch_price = backLeanRoofPrice
                    t_c_b =  parseFloat(t_c_b) + parseFloat(backLeanRoofPrice);              
                }
                else
                {
                    var backLeanRoofPrice = (const_var.backLeanRoofData[newParams.b_l_t_r_pB])?const_var.backLeanRoofData[newParams.b_l_t_r_pB].cost:0;
                    t_c_b =  parseFloat(t_c_b) + parseFloat(backLeanRoofPrice);
                    b.roof_pitch = const_var.backLeanRoofData[newParams.b_l_t_r_pB].roof_pitch;
                    b.roof_pitch_name = const_var.backLeanRoofData[newParams.b_l_t_r_pB].roof_pitch;
                    b.roof_pitch_price = backLeanRoofPrice;                
                }
            }else{
           
                b.roof_pitch = "3/12";
                b.roof_pitch_name = "3/12";
                b.roof_pitch_price = 0;   
            }
            if(newParams.leanB_p_e_i!="" && newParams.leanB_p_e_i!="0" && newParams.leanB_p_e_i!="other" && const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i]!=undefined)
            {
                if(newParams.p_i_s=="1")
                {
                    if(const_var.main_extraItems_arr_Blean_Compare.length >0 && const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of!=undefined && const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of_cost)?(t_c_b * const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                    }else{
                        var finalCertPrice = (const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].certification_concrete_cost)?const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].certification_concrete_cost:0;
                        // t_c_b = parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price = finalCertPrice;
                    }
                }else{
                    if(const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of!=undefined && const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of_cost)?(t_c_b * const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                        //console.log(b.certificate_price,"b.certificate_price",b.certificate_price * certVal);
                    }else
                    {
                        var finalCertPrice = (const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].cost)?const_var.main_extraItems_arr_Blean_Compare[newParams.leanB_p_e_i].cost:0;
                        t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price =finalCertPrice;
                    }
                }
            }
            if(newParams.leanB_p_e_i=="other")
            {
                b.certificate = {'gauge': 0,'certified': 1,'has_double_leg': 0,'has_ladder_leg': 0,'has_other_leg': 0,'height': 0,'id': -1,'cost':0,'is_default': "no",'length': 0,'map_id': 0,'name': "Other"};
                b.certificate_other_name = (newParams.leanB_p_e_i_other!='')?newParams.leanB_p_e_i_other:'Other';
                b.certificate_price  = 0;
                t_c_b =  parseFloat(t_c_b) + parseFloat(b.certificate_price);
            }
            
        if(newParams.continous_left_lean==true)
        {
            b.continous_lean = true;
        }else
        {
            b.continous_lean = false;
        }
    
        b.pricing_data =  data;
        
        b.t_c_b = parseFloat(t_c_b);
        const_var.leantoCompare.push(b);
        }
        else
        {
            removeDataFromArrayCompare(4);
    
        }
        
        setComparePricingData(iiD);
        
    }
    export const cPforLLeanOnlyComparision = (data,iiD) => 
    {       let t_c_b = 0;
            let b = {};
            let newParams = const_var.ComparisionDataArray[iiD].paramsData;
            CheckLeanLegsByResponseForCompare(newParams,"leftLean");
            if(newParams.add_left_lean==true)
            {
                removeDataFromArrayCompare(1);
                let leftLeanData = "";
               b = {"leanto_type":1,"width": newParams.lean_p_w,"height": newParams.lean_p_h,'length':newParams.lean_p_d,"leanto_drop":"","front_wall": ConvStr(newParams.p_b_c_b_l_f),"back_wall": ConvStr(newParams.p_b_c_b_l_b),"side_wall": ConvStr(newParams.p_b_c_b_l),"front_wall_price":0,"back_wall_price":0,"side_wall_price":0,"front_wall_vertical":newParams.p_v_w,"back_wall_vertical":newParams.p_v_w,"side_wall_vertical":newParams.p_v_w,"certificate":const_var.makeCertificateArrayLeft[newParams.lean_p_e_i]};
            //a.concat(b);
            
            
            var data = data;
            var mapVal = const_var.map[newParams.p_r_s];
            var CalCulateRoofBasePrice = 0;
            var CalCulateRoofEndClosePrice = 0;
            var CalCulateRoofEndGablePrice = 0;
            var CalCulateRoofUtilityEndPrice =0;


            const_var.main_extraItems_arr_Llean_Compare = [];
            if (const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i]!=undefined)
            {
                newParams.lean_p_e_i = const_var.main_extraItems_arr_Llean_Compare[newParams.p_e_i].name;
            }else
            {
                newParams.lean_p_e_i = (newParams.p_e_i=="Select")?'':newParams.p_e_i;
            }

          if ((data.certificate!=undefined) && (data.certificate.length>0)) {
            newParams.lean_p_e_i="Select";
             for (var i=0;i<=data.certificate.length-1;i++) {
                if(params.p_e_l ==true)
                {
                    if(data.certificate[i].has_other_leg==1)
                        {
                            const_var.main_extraItems_arr_Llean_Compare[data.certificate[i].certificate_id] = data.certificate[i];
                             if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || newParams.gauge_val == data.certificate[i].gauge) )
                             {
                                 newParams.lean_p_e_i =(newParams.lean_p_e_i=="Select")?data.certificate[i].certificate_id:newParams.lean_p_e_i;
                             }
                        }

                    
                }else
                {
                    if(data.certificate[i].has_other_leg==0)
                        {
                            const_var.main_extraItems_arr_Llean_Compare[data.certificate[i].certificate_id] = data.certificate[i];
                             if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || newParams.gauge_val == data.certificate[i].gauge) )
                             {
                                 newParams.lean_p_e_i =(newParams.lean_p_e_i=="Select")?data.certificate[i].certificate_id:newParams.lean_p_e_i;
                             }
                             
                        }
                }
             }
          }
          if (const_var.isInsulaltionForOldQuotes && params.p_i_o !== 0 && (params.p_r_o || params.p_f_i)){
            newParams.insulation.leftLean.insulationId = params.p_i_o;
            newParams.insulation.leftLean.fullBuilding = params.p_f_i;
            newParams.insulation.leftLean.roofOnly = params.p_r_o;
          } 
        const_var.insulationArrayForLeantoLeftCompare = [];
          if(data!="" && data?.insulation?.length > 0 && newParams.insulation.leftLean.insulationId != 0 )
            {                                                
                let checkInsulation = data.insulation.filter(insulation => insulation.insulation_id == newParams.insulation.leftLean.insulationId)[0]
                const_var.compareInsulationForLefttLeanto = checkInsulation!= undefined ? checkInsulation : data.insulation[0]

                newParams.insulation.leftLean.insulationId = const_var.compareInsulationForLefttLeanto ? const_var.compareInsulationForLefttLeanto.insulation_id : 0;
                if (newParams.add_left_lean && const_var.compareInsulationForLefttLeanto!=undefined && newParams.insulation.leftLean.insulationId !=0 ) {
                    const insulationRes = utlis.insulationForCompare(const_var.compareInsulationForLefttLeanto,  newParams.insulation.leftLean.fullBuilding, newParams.insulation.leftLean.roofOnly, 'leftLean', params.add_storage_check, params.p_b_c_b_l);

                    b.insulation = insulationRes.insulation;
                    b.insulation_price = insulationRes.insulationPrice;
                    b.insulation_type = const_var.compareInsulationForLefttLeanto;
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                }
            }
            
      b.certificate = const_var.main_extraItems_arr_Llean_Compare.filter(data=>((data.gauge==0 || newParams.gauge_val == data.gauge)))[0];
      if(newParams.lean_p_e_i=="Select")
      {
        newParams.lean_p_e_i = b.certificate.certificate_id;
      }
            if(newParams.lean_p_e_i==0)
              {
                newParams.lean_p_e_i = b.certificate.certificate_id;
              }
            if(newParams.add_storage_check==true)
            {
                data.side = data.side;
                data.panel = data.panel;
            }else
            {
                data.side = (data.full_length_side!=undefined)?data.full_length_side:data.side;
                data.panel = (data.full_length_panel!=undefined)?data.full_length_panel:data.panel;
            }

            if(data.base.length>0)
            {
                let chkGauge = data.base.filter(data=>data.gauge==const_var.g_v);
                for(var i=0;i< data.base.length;i++)
                {
                    if(const_var.g_v==data.base[i].gauge)
                    {
                        b.basic_price = data.base[i][mapVal];
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                        CalCulateRoofBasePrice = b.basic_price;
                    }else if(chkGauge.length==0)
                    {
                        b.basic_price = data.base[i][mapVal];
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                        CalCulateRoofBasePrice = b.basic_price;
                    }
                }
            }else
            {
                    b.basic_price = 0;
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                    CalCulateRoofBasePrice = b.basic_price;
            }
           
            
            if ( newParams.add_left_front_lean_porch==true ) {
                b.porch = {'type':'left','length':newParams.lean_p_d+newParams.leanF_p_d}
            }if ( newParams.add_left_back_lean_porch==true ){
                b.porch = {'type':'left','length':newParams.lean_p_d+newParams.leanB_p_d}
            }if ( newParams.add_left_back_lean_porch==true && newParams.add_left_front_lean_porch==true) {
                b.porch = {'type':'left','length':newParams.lean_p_d+newParams.leanB_p_d+newParams.leanF_p_d}
            }

            let heightFullData = (data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side:undefined;
          
            b.lean_has_double_leg = newParams.lean_p_e_l;
            // b.legstype = const_var.leanLegstype;
            b.lean_has_double_leg_name = const_var.compareLeanLegs.leftLean.leanHasDoublelegName;
            b.legstype = const_var.compareLeanLegs.leftLean.leanLegstype;
          
            if(const_var.g_v==14)
            {
                if(heightFullData[0].double_leg_baserail_cost!=0 && newParams.lean_p_e_l==true)
                {
                    b.height_price = ((heightFullData[0].double_leg_baserail_cost!=0)?(heightFullData[0].double_leg_baserail_cost):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }else{
                    b.height_price = (heightFullData[0].leg_height_cost);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }
            }
            if(const_var.g_v==12)
            {
                if(newParams.p_e_l==true)
                {
                    b.height_price = ((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }else{
                    b.height_price = ((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                } 
            }


            // b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_height_price_changed!=true)?leftLeanData.height_price:(data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side[0].leg_height_cost:0;
            // t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
            
            if(newParams.p_b_c_b_l_f=="Gable")
            {
                var ShowPrice = "";
                if(newParams.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(newParams.lean_p_e_i!="" && newParams.lean_p_e_i!="other" && newParams.lean_p_e_i!="0" && const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)):(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = ((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(newParams.lean_p_e_i!="" && newParams.lean_p_e_i!="other" && newParams.lean_p_e_i!="0" && const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = ((data.gable_end[0].uncertified));
                    }
                }
                b.front_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndGablePrice = b.front_wall_price;
                //b.back_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
            }if(newParams.p_b_c_b_l_b=="Gable" && newParams.add_storage_check!=true)
            {
                var ShowPrice = "";
                if(newParams.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(newParams.lean_p_e_i!="" && newParams.lean_p_e_i!="other" && newParams.lean_p_e_i!="0" && const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)) :(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = ((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(newParams.lean_p_e_i!="" && newParams.lean_p_e_i!="other" && newParams.lean_p_e_i!="0" && const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = ((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = ((data.gable_end[0].uncertified));
                    }
                }  
                //b.front_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                b.back_wall_price = ShowPrice;//(newParams.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndGablePrice = CalCulateRoofEndGablePrice + b.back_wall_price;
            }
            if(newParams.p_b_c_b_l_f=="Half_Close")
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(newParams.p_b_c_b_l_f=="One_Fourth_Close")
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(newParams.p_b_c_b_l_f=="Three_Fourth_Close")
            {
                b.front_wall_price = (newParams.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }
            if(newParams.p_b_c_b_l_f=="Close")
            {
                b.front_wall_price = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost) ) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndClosePrice = b.front_wall_price;
                //b.back_wall_price  = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
            }
            if(newParams.p_b_c_b_l_b=="Half_Close")
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(newParams.p_b_c_b_l_b=="One_Fourth_Close")
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(newParams.p_b_c_b_l_b=="Three_Fourth_Close")
            {
                b.back_wall_price = (newParams.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }
            if(newParams.p_b_c_b_l_b=="Close" && newParams.add_storage_check!=true)
            {
                b.back_wall_price = (newParams.p_v_w==true )?((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndClosePrice = CalCulateRoofEndClosePrice + b.back_wall_price;
            }if(newParams.p_b_c_b_l=="Close")
            {
                b.side_wall_price = (newParams.p_v_w==true )?(data.side[0].vertical_side_cost)+(data.side[0].side_close_cost):(data.side[0].side_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            }
            if(newParams.p_b_c_b_l=="Half_Close")
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].half_vertical_side_cost)+(data.side[0].half_side_close_cost)).toFixed(2):(data.side[0].half_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(newParams.p_b_c_b_l=="One_Fourth_Close")
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].one_fourth_vertical_side_cost)+(data.side[0].one_fourth_side_close_cost)).toFixed(2):(data.side[0].one_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(newParams.p_b_c_b_l=="Three_Fourth_Close")
            {
                b.side_wall_price = (newParams.p_v_w==true)?((data.side[0].three_fourth_vertical_side_cost)+(data.side[0].three_fourth_side_close_cost)).toFixed(2):(data.side[0].three_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }
            if(newParams.p_b_c_b_l!=="Close" && newParams.p_b_c_b_l!=="Open" && newParams.p_b_c_b_l!="Half_Close" && newParams.p_b_c_b_l!="One_Fourth_Close" && newParams.p_b_c_b_l!="Three_Fourth_Close")
            {
                b.side_wall_price = (newParams.p_v_w==true )?(data.panel[0].vertical_panel_cost * newParams.p_b_c_b_l):(data.panel[0].cost * newParams.p_b_c_b_l);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            } 
            
            if(newParams.add_storage_check==true && data.utility_side.length>0)
            {   
                if (newParams.p_l_w != 'Close') {
                    b.utility_price = (newParams.p_v_w==true)?(data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2):(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2);
                } else {
                    b.utility_price = (newParams.p_v_w==true)?(data.utility_side[0].vertical_side_cost)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2):(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2);
                }
            
                t_c_b = parseFloat(t_c_b) + parseFloat(b.utility_price);
               b.utility_length = newParams.add_storage;
               b.has_utility = true;
               b.utility_vertical = (newParams.p_v_w)?true:false;
              b.utility_on_centers = (const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s]==undefined)?5:const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s];
               CalCulateRoofUtilityEndPrice = parseFloat(b.utility_price); 
            }
            if ((data.roof_pitch!=undefined) && (data.roof_pitch.length>0)) {
                const_var.leftLeanRoofData = [];
                for (var i=0;i<=data.roof_pitch.length-1;i++) {
                   const_var.leftLeanRoofData[(data.roof_pitch[i].roof_pitch).replace("/", "")] = data.roof_pitch[i];
                   if (data.roof_pitch[i].is_default=="yes" && data.roof_pitch[i].roof_pitch.split("/")[0] != params.b_l_t_r_p ) {
                        newParams.b_l_t_r_p = (data.roof_pitch[i].roof_pitch).replace("/", "");
                    }if (data.roof_pitch[i].roof_pitch.split("/")[0] == params.b_l_t_r_p ) {
                        newParams.b_l_t_r_p = (data.roof_pitch[i].roof_pitch).replace("/", "");
                        break;
                    }
                }
             }
  
             
            if(const_var.leftLeanRoofData?.length > 0 && const_var.leftLeanRoofData[newParams.b_l_t_r_p]!=undefined)
            {            
                if(const_var.leftLeanRoofData[newParams.b_l_t_r_p].cost_type == "%")
                {
                    
                var splitVal = (const_var.leftLeanRoofData[newParams.b_l_t_r_p].percentage_of!=undefined && const_var.leftLeanRoofData[newParams.b_l_t_r_p].percentage_of!=0)?const_var.leftLeanRoofData[newParams.b_l_t_r_p].percentage_of.split(","):0;
                var splval = 0;
                if(splitVal!=0)
                {
                    if(splitVal.includes("1")!=false)
                    {
                        splval = splval + CalCulateRoofBasePrice;
                    }if(splitVal.includes("2")!=false)
                    {
                        if(CalCulateRoofUtilityEndPrice!=0)
                        {
                            splval = splval + CalCulateRoofUtilityEndPrice;
                        }
                        splval = splval + CalCulateRoofEndClosePrice;
                    }if(splitVal.includes("3")!=false)
                    {
                        splval = splval + CalCulateRoofEndGablePrice;
                    }
                }else
                {
                    splval = splval + CalCulateRoofBasePrice;
                }
                    var leftLeanRoofPrice = (const_var.leftLeanRoofData[newParams.b_l_t_r_p])?(splval * const_var.leftLeanRoofData[newParams.b_l_t_r_p].cost / 100):0;
                    b.roof_pitch = const_var.leftLeanRoofData[newParams.b_l_t_r_p].roof_pitch;
                    b.roof_pitch_name = const_var.leftLeanRoofData[newParams.b_l_t_r_p].roof_pitch;
                    b.roof_pitch_price = leftLeanRoofPrice
                    t_c_b =  parseFloat(t_c_b) + parseFloat(leftLeanRoofPrice);              
                }
                else
                {
                    var leftLeanRoofPrice = (const_var.leftLeanRoofData[newParams.b_l_t_r_p])?const_var.leftLeanRoofData[newParams.b_l_t_r_p].cost:0;
                    t_c_b =  parseFloat(t_c_b) + parseFloat(leftLeanRoofPrice);
                    b.roof_pitch = const_var.leftLeanRoofData[newParams.b_l_t_r_p].roof_pitch;
                    b.roof_pitch_name = const_var.leftLeanRoofData[newParams.b_l_t_r_p].roof_pitch;
                    b.roof_pitch_price = leftLeanRoofPrice;                
                }
            }else{
           
                b.roof_pitch = "3/12";
                b.roof_pitch_name = "3/12";
                b.roof_pitch_price = 0;   
            }
            if(newParams.lean_p_e_i!="" && newParams.lean_p_e_i!="0" && newParams.lean_p_e_i!="other" && const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i]!=undefined)
            {
                if(newParams.p_i_s=="1")
                {
                    if(const_var.main_extraItems_arr_Llean_Compare.length >0 && const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of!=undefined && const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of_cost)?(t_c_b * const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                    }else{
                        var finalCertPrice = (const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].certification_concrete_cost)?const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].certification_concrete_cost:0;
                        // t_c_b = parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price = finalCertPrice;
                    }
                }else{
                    if(const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of!=undefined && const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of_cost)?(t_c_b * const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].percentage_of_cost / 100):0;
                            // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                        //console.log(b.certificate_price,"b.certificate_price",b.certificate_price * certVal);
                    }else
                    {
                        var finalCertPrice = (const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].cost)?const_var.main_extraItems_arr_Llean_Compare[newParams.lean_p_e_i].cost:0;
                        // t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price =finalCertPrice;
                    }
                }
            }
            if(newParams.lean_p_e_i=="other")
            {
                b.certificate = {'gauge': 0,'certified': 1,'has_double_leg': 0,'has_ladder_leg': 0,'has_other_leg': 0,'height': 0,'id': -1,'cost':0,'is_default': "no",'length': 0,'map_id': 0,'name': "Other"};
                b.certificate_other_name = (newParams.lean_p_e_i_other!='')?newParams.lean_p_e_i_other:'Other';
                b.certificate_price  = 0;
                t_c_b =  parseFloat(t_c_b) + parseFloat(b.certificate_price);
            }
    
        b.pricing_data =  data;
        
        b.t_c_b = parseFloat(t_c_b);
        const_var.leantoCompare.push(b);
        }
        else
        {
            removeDataFromArrayCompare(1);
    
        }
        
        setComparePricingData(iiD);
        
    }
    export const CheckLeanLegsByResponseForCompare = (newParams, type) => {
        if ( type == "leftLean" ){
            let j = 0;
            if(const_var.conditionArrForLeanCompare['left']!=undefined && const_var.conditionArrForLeanCompare['left'].length>0 ){
                for(let i=0;i<=const_var.conditionArrForLeanCompare['left'].length-1;i++) {
                    const_var.conditionArrForLeanCompare['left'][i].min_width = (const_var.conditionArrForLeanCompare['left'][i].min_width=='' || const_var.conditionArrForLeanCompare['left'][i].min_width==null)?0:const_var.conditionArrForLeanCompare['left'][i].min_width;
                    const_var.conditionArrForLeanCompare['left'][i].min_height = (const_var.conditionArrForLeanCompare['left'][i].min_height=='' || const_var.conditionArrForLeanCompare['left'][i].min_height==null)?0:const_var.conditionArrForLeanCompare['left'][i].min_height;
                    if(const_var.conditionArrForLeanCompare['left'][i].min_width==0 && const_var.conditionArrForLeanCompare['left'][i].min_height <= newParams.lean_p_h && const_var.conditionArrForLeanCompare['left'][i].max_height >= newParams.lean_p_h) {
                        if(const_var.conditionArrForLeanCompare['left'][i].is_default=="Y"){
                            newParams.lean_p_e_l=true;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegdisable = true;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegshow = true;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegName = const_var.conditionArrForLeanCompare['left'][i].name;
                        }else{
                            newParams.lean_p_e_l = newParams.lean_p_e_l;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegdisable = false;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegshow = true;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegName = const_var.conditionArrForLeanCompare['left'][i].name;
                        }  
                        const_var.compareLeanLegs.leftLean.leanLegstype = (const_var.conditionArrForLeanCompare['left'][i].legs_type=="reinforced")?"double":const_var.conditionArrForLeanCompare['left'][i].legs_type;
                    } else if (const_var.conditionArrForLeanCompare['left'][i].min_height==0 && const_var.conditionArrForLeanCompare['left'][i].min_width <= newParams.lean_p_w && const_var.conditionArrForLeanCompare['left'][i].max_width >= newParams.lean_p_w){
                        if(const_var.conditionArrForLeanCompare['left'][i].is_default=="Y"){
                            newParams.lean_p_e_l=true;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegdisable = true;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegshow = true;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegName = const_var.conditionArrForLeanCompare['left'][i].name;
                        }else{
                            newParams.lean_p_e_l = (newParams.lean_p_e_l && const_var.crmSetting.is_Edit) ? newParams.lean_p_e_l : false;
                            newParams.lean_p_e_l = newParams.lean_p_e_l;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegdisable = false;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegshow = true;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegName = const_var.conditionArrForLeanCompare['left'][i].name;
                        }  
                        const_var.compareLeanLegs.leftLean.leanLegstype = (const_var.conditionArrForLeanCompare['left'][i].legs_type=="reinforced")?"double":const_var.conditionArrForLeanCompare['left'][i].legs_type;
                    } else {
                        j = j+1;
                        if(j==const_var.conditionArrForLeanCompare['left'].length){
                            newParams.lean_p_e_l = false;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegdisable = false;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegshow = false;
                            const_var.compareLeanLegs.leftLean.leanHasDoublelegName = '';
                            const_var.compareLeanLegs.leftLean.leanLegstype = "single";
                        }
                    }
                }
            } else{
                newParams.lean_p_e_l = false;    
                const_var.compareLeanLegs.leftLean.leanHasDoublelegdisable = false;
                const_var.compareLeanLegs.leftLean.leanHasDoublelegshow = false;
                const_var.compareLeanLegs.leftLean.leanHasDoublelegName = '';
                const_var.compareLeanLegs.leftLean.leanLegstype = "single";
            }
        } else if ( type == "rightLean" ){
            let j = 0;
            if(const_var.conditionArrForLeanCompare['right']!=undefined && const_var.conditionArrForLeanCompare['right'].length>0){
                for(var i=0;i<=const_var.conditionArrForLeanCompare['right'].length-1;i++) {
                    const_var.conditionArrForLeanCompare['right'][i].min_width = (const_var.conditionArrForLeanCompare['right'][i].min_width=='' || const_var.conditionArrForLeanCompare['right'][i].min_width==null)?0:const_var.conditionArrForLeanCompare['right'][i].min_width;
                    const_var.conditionArrForLeanCompare['right'][i].min_height = (const_var.conditionArrForLeanCompare['right'][i].min_height=='' || const_var.conditionArrForLeanCompare['right'][i].min_height==null)?0:const_var.conditionArrForLeanCompare['right'][i].min_height;
                    if(const_var.conditionArrForLeanCompare['right'][i].min_width==0 && const_var.conditionArrForLeanCompare['right'][i].min_height <= newParams.leanR_p_h && const_var.conditionArrForLeanCompare['right'][i].max_height >= newParams.leanR_p_h) {
                        if(const_var.conditionArrForLeanCompare['right'][i].is_default=="Y") {
                            newParams.leanR_p_e_l=true;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegdisable = true;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegshow = true;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegName = const_var.conditionArrForLeanCompare['right'][i].name;
                        }else{
                            newParams.leanR_p_e_l = newParams.leanR_p_e_l;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegdisable = false;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegshow = true;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegName = const_var.conditionArrForLeanCompare['right'][i].name;
                        }  
                        const_var.compareLeanLegs.rightLean.leanRLegstype = (const_var.conditionArrForLeanCompare['right'][i].legs_type=="reinforced")?"double":const_var.conditionArrForLeanCompare['right'][i].legs_type;
                    } else if (const_var.conditionArrForLeanCompare['right'][i].min_height==0 && const_var.conditionArrForLeanCompare['right'][i].min_width <= newParams.leanR_p_w && const_var.conditionArrForLeanCompare['right'][i].max_width >= newParams.leanR_p_w){
                        if(const_var.conditionArrForLeanCompare['right'][i].is_default=="Y") {
                            newParams.leanR_p_e_l=true;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegdisable = true;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegshow = true;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegName = const_var.conditionArrForLeanCompare['right'][i].name;
                        }else{
                            newParams.leanR_p_e_l = newParams.leanR_p_e_l;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegdisable = false;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegshow = true;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegName = const_var.conditionArrForLeanCompare['right'][i].name;
                        }  
                        const_var.compareLeanLegs.rightLean.leanRLegstype = (const_var.conditionArrForLeanCompare['right'][i].legs_type=="reinforced")?"double":const_var.conditionArrForLeanCompare['right'][i].legs_type;
                    } else {
                        j = j+1;
                        
                        if(j==const_var.conditionArrForLeanCompare['right'].length) {
                            newParams.leanR_p_e_l = false;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegdisable = false;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegshow = false;
                            const_var.compareLeanLegs.rightLean.leanRHasDoublelegName = '';
                            const_var.compareLeanLegs.rightLean.leanRLegstype = "single";
                        }

                    }
                }
            }else{
                newParams.leanR_p_e_l = false;
                const_var.compareLeanLegs.rightLean.leanRHasDoublelegdisable = false;
                const_var.compareLeanLegs.rightLean.leanRHasDoublelegshow = false;
                const_var.compareLeanLegs.rightLean.leanRHasDoublelegName = '';
                const_var.compareLeanLegs.rightLean.leanRLegstype = "single";
            }
        }  else if ( type == "frontLean" ){
            let j = 0;
            if(const_var.conditionArrForLeanCompare['front']!=undefined && const_var.conditionArrForLeanCompare['front'].length>0){
                for(var i=0;i<=const_var.conditionArrForLeanCompare['front'].length-1;i++) {
                    const_var.conditionArrForLeanCompare['front'][i].min_width = (const_var.conditionArrForLeanCompare['front'][i].min_width=='' || const_var.conditionArrForLeanCompare['front'][i].min_width==null)?0:const_var.conditionArrForLeanCompare['front'][i].min_width;
                    const_var.conditionArrForLeanCompare['front'][i].min_height = (const_var.conditionArrForLeanCompare['front'][i].min_height=='' || const_var.conditionArrForLeanCompare['front'][i].min_height==null)?0:const_var.conditionArrForLeanCompare['front'][i].min_height;
                    if(const_var.conditionArrForLeanCompare['front'][i].min_width==0 && const_var.conditionArrForLeanCompare['front'][i].min_height <= newParams.leanF_p_h && const_var.conditionArrForLeanCompare['front'][i].max_height >= newParams.leanF_p_h) {
                        if(const_var.conditionArrForLeanCompare['front'][i].is_default=="Y") {
                            newParams.leanF_p_e_l=true;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegdisable = true;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegshow = true;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegName = const_var.conditionArrForLeanCompare['front'][i].name;
                        }else{
                            newParams.leanF_p_e_l= newParams.leanF_p_e_l;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegdisable = false;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegshow = true;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegName = const_var.conditionArrForLeanCompare['front'][i].name;
                        }  
                        const_var.compareLeanLegs.frontLean.leanFLegstype = (const_var.conditionArrForLeanCompare['front'][i].legs_type=="reinforced")?"double":const_var.conditionArrForLeanCompare['front'][i].legs_type;
                    } else if (const_var.conditionArrForLeanCompare['front'][i].min_height==0 && const_var.conditionArrForLeanCompare['front'][i].min_width <= newParams.leanF_p_w && const_var.conditionArrForLeanCompare['front'][i].max_width >= newParams.leanF_p_w){
                        if(const_var.conditionArrForLeanCompare['front'][i].is_default=="Y") {
                            newParams.leanF_p_e_l=true;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegdisable = true;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegshow = true;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegName = const_var.conditionArrForLeanCompare['front'][i].name;
                        }else{
                            newParams.leanF_p_e_l= newParams.leanF_p_e_l;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegdisable = false;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegshow = true;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegName = const_var.conditionArrForLeanCompare['front'][i].name;
                        }  
                        const_var.compareLeanLegs.frontLean.leanFLegstype = (const_var.conditionArrForLeanCompare['front'][i].legs_type=="reinforced")?"double":const_var.conditionArrForLeanCompare['front'][i].legs_type;
                    } else {
                        j = j+1;
                        
                        if(j==const_var.conditionArrForLeanCompare['front'].length) {
                            newParams.leanF_p_e_l = false;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegdisable = false;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegshow = false;
                            const_var.compareLeanLegs.frontLean.leanFHasDoublelegName = '';
                            const_var.compareLeanLegs.frontLean.leanFLegstype = "single";
                        }

                    }
                }
            }else{
                newParams.leanF_p_e_l = false;
                const_var.compareLeanLegs.frontLean.leanFHasDoublelegdisable = false;
                const_var.compareLeanLegs.frontLean.leanFHasDoublelegshow = false;
                const_var.compareLeanLegs.frontLean.leanFHasDoublelegName = '';
                const_var.compareLeanLegs.frontLean.leanFLegstype = "single";
            }

        }  else if ( type == "backLean" ){
            let j = 0;
            if(const_var.conditionArrForLeanCompare['back']!=undefined && const_var.conditionArrForLeanCompare['back'].length>0 ){
                for(var i=0;i<=const_var.conditionArrForLeanCompare['back'].length-1;i++) {
                    const_var.conditionArrForLeanCompare['back'][i].min_width = (const_var.conditionArrForLeanCompare['back'][i].min_width=='' || const_var.conditionArrForLeanCompare['back'][i].min_width==null)?0:const_var.conditionArrForLeanCompare['back'][i].min_width;
                    const_var.conditionArrForLeanCompare['back'][i].min_height = (const_var.conditionArrForLeanCompare['back'][i].min_height=='' || const_var.conditionArrForLeanCompare['back'][i].min_height==null)?0:const_var.conditionArrForLeanCompare['back'][i].min_height;
                    if(const_var.conditionArrForLeanCompare['back'][i].min_width==0 && const_var.conditionArrForLeanCompare['back'][i].min_height <= newParams.leanB_p_h && const_var.conditionArrForLeanCompare['back'][i].max_height >= newParams.leanB_p_h){
                        if(const_var.conditionArrForLeanCompare['back'][i].is_default=="Y") {
                            newParams.leanB_p_e_l=true;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegdisable = true;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegshow = true;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegName = const_var.conditionArrForLeanCompare['back'][i].name;
                        }else{
                            newParams.leanB_p_e_l= newParams.leanB_p_e_l;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegdisable = false;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegshow = true;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegName = const_var.conditionArrForLeanCompare['back'][i].name;
                        }  
                        const_var.compareLeanLegs.backLean.leanBLegstype = (const_var.conditionArrForLeanCompare['back'][i].legs_type=="reinforced")?"double":const_var.conditionArrForLeanCompare['back'][i].legs_type;
                    }else if(const_var.conditionArrForLeanCompare['back'][i].min_height==0 && const_var.conditionArrForLeanCompare['back'][i].min_width <= newParams.leanB_p_w && const_var.conditionArrForLeanCompare['back'][i].max_width >= newParams.leanB_p_w){
                        if(const_var.conditionArrForLeanCompare['back'][i].is_default=="Y") {
                            newParams.leanB_p_e_l=true;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegdisable = true;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegshow = true;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegName = const_var.conditionArrForLeanCompare['back'][i].name;
                        }else{
                            newParams.leanB_p_e_l= newParams.leanB_p_e_l;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegdisable = false;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegshow = true;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegName = const_var.conditionArrForLeanCompare['back'][i].name;
                        }  
                        const_var.compareLeanLegs.backLean.leanBLegstype = (const_var.conditionArrForLeanCompare['back'][i].legs_type=="reinforced")?"double":const_var.conditionArrForLeanCompare['back'][i].legs_type;
                    }else{
                        j = j+1;
                        
                        if(j==const_var.conditionArrForLeanCompare['back'].length) {
                            newParams.leanB_p_e_l = false;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegdisable = false;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegshow = false;
                            const_var.compareLeanLegs.backLean.leanBHasDoublelegName = '';
                            const_var.compareLeanLegs.backLean.leanBLegstype = "single";
                        }

                    }
                }
            }else{
                newParams.leanB_p_e_l = false;
                const_var.compareLeanLegs.backLean.leanBHasDoublelegdisable = false;
                const_var.compareLeanLegs.backLean.leanBHasDoublelegshow = false;
                const_var.compareLeanLegs.backLean.leanBHasDoublelegName = '';
                const_var.compareLeanLegs.backLean.leanBLegstype = "single";
            }

        }
    }
export const CheckLegsByResponseForCompare = (newParams)=>
{
    var j = 0;
    // console.log(const_var.ConditionArrCompare,"const_var.ConditionArrCompare[newParams.p_b_t]",newParams.p_b_t)
    if(const_var.ConditionArrCompare[newParams.p_b_t].length>0 && const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s]!=undefined){
        for(var i=0;i<=const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s].length-1;i++)
        {
            const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_width = (const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_width=='' || const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_width==null)?0:const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_width;
            const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_height = (const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_height=='' || const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_height==null)?0:const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_height;
            if(const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_width==0 && const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_height <= newParams.p_h && const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].max_height >= newParams.p_h)
            {
                if(const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].is_default=="Y")
                {
                    newParams.p_e_l=true;
                }else{
                    newParams.p_e_l = newParams.p_e_l;
                }
                newParams.hasDoublelegName = const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].name;  
                newParams.legstype = (const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].legs_type=="reinforced")?"double":const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].legs_type;
            }else if(const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_height==0 && const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].min_width <= newParams.p_w && const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].max_width >= newParams.p_w){
                if(const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].is_default=="Y")
                {
                    newParams.p_e_l=true;
                }else{
                    newParams.p_e_l= newParams.p_e_l;
                }
                newParams.hasDoublelegName = const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].name;  
                newParams.legstype = (const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].legs_type=="reinforced")?"double":const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s][i].legs_type;
            }else{
                j = j+1;
                
                if(j==const_var.ConditionArrCompare[newParams.p_b_t][newParams.p_r_s].length)
                {
                    newParams.hasDoublelegName = '';  
                    newParams.p_e_l = false;
                    newParams.legstype = "single";
                }

            }
        }
    }else{
        newParams.p_e_l = false;
        newParams.hasDoublelegName = '';
        newParams.legstype = "single";
    }
    newParams.p_e_l = newParams.p_e_l;
    newParams.legstype = newParams.legstype;
    
}  
    export const setComparePricingData = (iiD,chkflag)=>{

        // console.log(const_var.leanGetDataLeftComparision, "const_var.leanGetDataLeftComparision setComparePricingData");
        const_var.ComparisionDataArray[iiD].paramsData.params_cancel = {};
        const manufacturerId = iiD.split("_")[0];
        let newParams = JSON.parse(JSON.stringify(const_var.ComparisionDataArray[iiD].paramsData));
        let pricing_data = JSON.parse(JSON.stringify(const_var.ComparisionDataArray[iiD].pricing_data));
        let building_data = JSON.parse(JSON.stringify(const_var.ComparisionDataArray[iiD].building_data.default_building));
        //console.log(newParams,pricing_data,"pricing_datapricing_data",const_var.ComparisionDataArray[iiD],const_var.ComparisionDataArray[iiD].pricing_data)
        // for (const key of Object.keys(const_var.ComparisionDataArray[iiD])) {
        //     console.log(key, const_var.ComparisionDataArray[iiD][key]);
        // }
        
        CheckLegsByResponseForCompare(newParams);
        let APIPriceData = const_var.ComparisionDataArray[iiD].pricing_data;
        const_var.newTaxCalcuArray = [];
        const_var.sendTaxarray = [];
        var CalculatesurchargeFees = 0;
        const_var.compareMainBuildingPriceRes = APIPriceData
        let data = pricing_data;
        let b_f_o_J = {};
        let t_c_b = 0;
        let t_c = 0;
        let post_data = {};
        post_data['building'] = {};
        let a_p_d_a = data;
        var a,b = {}; 
        var extra_items = [];
        var extra_price_cal = [];
        var activeLean = "";
        let CalCulateRoofBasePrice = 0;
        let CalCulateRoofUtilityEndPrice = 0;
        let CalCulateRoofEndClosePrice = 0;
        let CalCulateRoofEndGablePrice = 0;
        var BuildingPriceArrarNew = {};
        let building_drawing_opt = const_var.ComparisionDataArray[iiD].drawingOBJ

        // let building_drawing_opt = const_var.ComparisionDataArray[iiD].building_data.building[newParams.p_b_t] != undefined && const_var.ComparisionDataArray[iiD].building_data.building[newParams.p_b_t].drawings != undefined ? const_var.ComparisionDataArray[iiD].building_data.building[newParams.p_b_t].drawings : []
       let heightFullData = ""; 
       const_var.b_r_p_a_Compare = {};
        const_var.order_extra_items_Compare =  JSON.parse(JSON.stringify(const_var.order_extra_items));
        // const_var.order_extra_items_Compare['engineer_drawings'] = 0
       let fourthCenterCostWithExtrabows = false;
       if (const_var.loginSession==false) {
            const_var.UpdatedPriceData.down_payment_rate = undefined;
       }
       a = {'state_name':const_var.stateNameAcordingAPI[newParams.p_s_n].name,'state_list':newParams.p_s_n,'state':newParams.p_s_n,'manufacturer_name':const_var.stateManufacturerAcordingAPIDiscount['manuName'][newParams.m_s_n],'manufacturer':newParams.m_s_n,"building_type":newParams.p_b_t,"building_type_name":newParams.building_type_name,"display_building_type_name":newParams.building_type_name,"checkeditName":newParams.checkeditName,"other_building_type_name":newParams.other_building_type_name,"roof_style":newParams.p_r_s,"roof_style_name":const_var.TypeEnumID[newParams.p_r_s],"installation_surface":ConvStr(const_var.installationValue[newParams.p_i_s]),"width":(newParams.p_b_t =="2")?newParams.p_w+24:newParams.p_w,"length":newParams.p_d,"height":newParams.p_h,"frame_length":newParams.frame_length,"gauge":const_var.g_v,"front_wall":(newParams.p_f_w=="Extended Gable")?'extended_gable':ConvStr(newParams.p_f_w),"back_wall":(newParams.p_b_w=="Extended Gable")?'extended_gable':ConvStr(newParams.p_b_w),"left_wall":ConvStr(newParams.p_l_w),"right_wall":ConvStr(newParams.p_r_w),"back_wall_price":0,"front_wall_price":0,"left_wall_price":0,"right_wall_price":0,"front_wall_vertical":newParams.p_v_w,"back_wall_vertical":newParams.p_v_w,"left_wall_vertical":newParams.p_v_w,"right_wall_vertical":newParams.p_v_w,"vertical_walls":newParams.p_v_w,"heavy_snow":(const_var.CheckSnowLoadValue==35)?0:1,"certificate":const_var.c_f_aCer[newParams.p_e_i],"singleSlope":newParams.singleSlope,"isBreezeway":newParams.isBreezeway,"certificate_name":(const_var.c_f_aCer[newParams.p_e_i]!=undefined)?const_var.c_f_aCer[newParams.p_e_i].name:''};
       if ((data.roof_pitch!=undefined) && (data.roof_pitch.length>0)) {
         const_var.b_r_p_a_Compare = [];
         const_var.b_r_p_l_to_a_Compare = [];
         for (var i=0;i<=data.roof_pitch.length-1;i++) {
            let repl = (data.roof_pitch[i].roof_pitch).split("/");
            const_var.b_r_p_a_Compare[(data.roof_pitch[i].roof_pitch).replace("/", "")] = data.roof_pitch[i];
            if (data.roof_pitch[i].is_default=="yes" && data.roof_pitch[i].roof_pitch !=const_var.post_data.building.roof_pitch ) {
                  newParams.b_r_p = (data.roof_pitch[i].roof_pitch).replace("/", "");
                  newParams.p_r_p = (data.roof_pitch[i].roof_pitch).split("/")[0];
             }else if (data.roof_pitch[i].roof_pitch ==const_var.post_data.building.roof_pitch )
             {
                newParams.b_r_p = (data.roof_pitch[i].roof_pitch).replace("/", "");
                break;
             }
         }
            
 
      }
      const_var.insulationJsonCompare = [];
      const_var.insulationPriceJsonCompare = [];
      const_var.compareInsulationForMainBuilding = {};
    if(data.insulation.length>0)
    {
        const_var.insulationJsonCompare[0] = 'Select';
        // for(var i=0;i<data.insulation.length;i++)
        // {

        //     const_var.insulationJsonCompare[data.insulation[i].insulation_id] = data.insulation[i].name;
        //     const_var.insulationPriceJsonCompare[data.insulation[i].insulation_id] = data.insulation[i];
        // }

        let checkInsulation = data.insulation.filter(insulation => insulation.insulation_id == params.p_i_o)[0]
        const_var.compareInsulationForMainBuilding = checkInsulation!= undefined ? checkInsulation : data.insulation[0]

    }
    if (data.side[0].side_close_cost==0) {
        newParams.p_v_w = true;
        a.vertical_walls = newParams.p_v_w;
    }
      //a.certificate = const_var.main_extraItems_arr_Compare.filter(data=>data.certificate_id==newParams.p_e_i &&((data.gauge==0 || newParams.gauge_val == data.gauge)))[0];

         data  = a_p_d_a;   
         let newObjForSide = {};
        if(newParams.p_u_c==true)
        {
            newObjForSide.side = APIPriceData.side;
            newObjForSide.panel = APIPriceData.panel;
            newObjForSide.end = APIPriceData.end;
            newObjForSide.heightFullData = (APIPriceData.full_length_side!=undefined)?APIPriceData.full_length_side:APIPriceData.side;
        }else
        {
            newObjForSide.side = (pricing_data.full_length_side!=undefined)?pricing_data.full_length_side:pricing_data.side;
            newObjForSide.panel = ( pricing_data.full_length_panel!=undefined)?pricing_data.full_length_panel: pricing_data.panel;
            newObjForSide.end = (pricing_data.central_end!=undefined && pricing_data.central_end.length>0)?pricing_data.central_end:pricing_data.end;
            newObjForSide.heightFullData = (pricing_data.full_length_side!=undefined)?pricing_data.full_length_side:pricing_data.side;
            if(newParams.add_front_lean==true && const_var.leanGetDataFrontComparision != ''  && const_var.leanGetDataFrontComparision.central_side!=undefined && const_var.leanGetDataFrontComparision.central_side.length>0)
            {
                let filterResult = '';
                newObjForSide.side = const_var.leanGetDataFrontComparision.central_side;
                newObjForSide.heightFullData = (const_var.leanGetDataFrontComparision.central_side_full_length!=undefined)?const_var.leanGetDataFrontComparision.central_side_full_length:pricing_data.side;
                if(const_var.ComparisionDataArray[iiD].post_data!=undefined && const_var.ComparisionDataArray[iiD].post_data.building!=undefined)
                {
                    if(const_var.ComparisionDataArray[iiD].post_data.building.leanto.length>0)
                    {   
                        filterResult = const_var.ComparisionDataArray[iiD].post_data.building.leanto.filter(data=>data.leanto_type==2)[0];
                        if(filterResult!=undefined)
                        {
                            newObjForSide.side = filterResult.pricing_data.central_side;
                            newObjForSide.heightFullData = (filterResult.pricing_data.central_side_full_length!=undefined)?filterResult.pricing_data.central_side_full_length:pricing_data.side;
                        }
                    }
                }
            }
            if( newParams.add_front_lean==true && const_var.leanGetDataFrontComparision != ''  && const_var.leanGetDataFrontComparision.central_end!=undefined && const_var.leanGetDataFrontComparision.central_end.length>0)
            {
                newObjForSide.end = const_var.leanGetDataFrontComparision.central_end;
            }
            if(newParams.add_left_lean==true && const_var.leanGetDataLeftComparision!='' && const_var.leanGetDataLeftComparision.central_side!=undefined && const_var.leanGetDataLeftComparision.central_side.length>0)
            {
                let filterResult = '';
                newObjForSide.side = const_var.leanGetDataLeftComparision.central_side;
                newObjForSide.heightFullData = (const_var.leanGetDataLeftComparision.central_side_full_length!=undefined)?const_var.leanGetDataLeftComparision.central_side_full_length:pricing_data.side;
                if(const_var.ComparisionDataArray[iiD].post_data!=undefined && const_var.ComparisionDataArray[iiD].post_data.building!=undefined)
                {
                    if(const_var.ComparisionDataArray[iiD].post_data.building.leanto.length>0)
                    {   
                        filterResult = const_var.ComparisionDataArray[iiD].post_data.building.leanto.filter(data=>data.leanto_type==1)[0];
                        if(filterResult!=undefined)
                        {
                            newObjForSide.side = filterResult.pricing_data.central_side;
                            newObjForSide.heightFullData = (filterResult.pricing_data.central_side_full_length!=undefined)?filterResult.pricing_data.central_side_full_length:pricing_data.side;
                        }
                    }
                }
                
            }
            if(newParams.add_left_lean==true && const_var.leanGetDataLeftComparision!='' && const_var.leanGetDataLeftComparision.central_end!=undefined && const_var.leanGetDataLeftComparision.central_end.length>0)
            {
                newObjForSide.end = const_var.leanGetDataLeftComparision.central_end;
            }
            if(newParams.add_right_lean==true && const_var.leanGetDataRightComparision && const_var.leanGetDataRightComparision.central_side!=undefined && const_var.leanGetDataRightComparision.central_side.length>0)
            {
                let filterResult = '';
                newObjForSide.side = const_var.leanGetDataRightComparision.central_side;
                newObjForSide.heightFullData = (const_var.leanGetDataRightComparision.central_side_full_length!=undefined)?const_var.leanGetDataRightComparision.central_side_full_length:pricing_data.side;
                if(const_var.ComparisionDataArray[iiD].post_data!=undefined && const_var.ComparisionDataArray[iiD].post_data.building!=undefined)
                {
                    if(const_var.ComparisionDataArray[iiD].post_data.building.leanto.length>0)
                    {   
                        filterResult = const_var.ComparisionDataArray[iiD].post_data.building.leanto.filter(data=>data.leanto_type==2)[0];
                        if(filterResult!=undefined)
                        {
                            newObjForSide.side = filterResult.pricing_data.central_side;
                            newObjForSide.heightFullData = (filterResult.pricing_data.central_side_full_length!=undefined)?filterResult.pricing_data.central_side_full_length:pricing_data.side;
                        }
                    }
                }

            }
            if(newParams.add_right_lean==true && const_var.leanGetDataRightComparision && const_var.leanGetDataRightComparision.central_end!=undefined && const_var.leanGetDataRightComparision.central_end.length>0)
            {
                newObjForSide.end = const_var.leanGetDataRightComparision.central_end;
            }
            if( newParams.add_back_lean==true && const_var.leanGetDataBackComparision != '' && const_var.leanGetDataBackComparision.central_side!=undefined && const_var.leanGetDataBackComparision.central_side.length>0)
            {
                let filterResult = '';
                newObjForSide.side = const_var.leanGetDataBackComparision.central_side;
                newObjForSide.heightFullData = (const_var.leanGetDataBackComparision.central_side_full_length!=undefined)?const_var.leanGetDataBackComparision.central_side_full_length:pricing_data.side;
                if(const_var.ComparisionDataArray[iiD].post_data!=undefined && const_var.ComparisionDataArray[iiD].post_data.building!=undefined)
                {
                    if(const_var.ComparisionDataArray[iiD].post_data.building.leanto.length>0)
                    {   
                        filterResult = const_var.ComparisionDataArray[iiD].post_data.building.leanto.filter(data=>data.leanto_type==2)[0];
                        if(filterResult!=undefined)
                        {
                            newObjForSide.side = filterResult.pricing_data.central_side;
                            newObjForSide.heightFullData = (filterResult.pricing_data.central_side_full_length!=undefined)?filterResult.pricing_data.central_side_full_length:pricing_data.side;
                        }
                    }
                }
            }
            if( newParams.add_back_lean==true && const_var.leanGetDataBackComparision != '' && const_var.leanGetDataBackComparision.central_end!=undefined && const_var.leanGetDataBackComparision.central_end.length>0)
            {
                newObjForSide.end = const_var.leanGetDataBackComparision.central_end;
            }
            
        }
        let LeftWallSidePrice = pricing_data.side;
        if(newParams.singleSlope==true)
        {
            LeftWallSidePrice = (pricing_data.side_slope_height!=undefined && pricing_data.side_slope_height.length>0)?pricing_data.side_slope_height:pricing_data.side;
        }
        let connection_feesCost = 0;
        let connection_feesEnd = 0;

        if(const_var.compareMainBuildingPriceRes.connection_fees!=undefined && const_var.compareMainBuildingPriceRes.connection_fees.length>0)
        {
            if((newParams.add_right_lean==true && const_var.leanGetDataRightComparision!="" && const_var.leanGetDataRightComparision!=undefined))
            {
                connection_feesCost = (const_var.leanGetDataRightComparision.connection_fees.length>0) ? (const_var.leanGetDataRightComparision.connection_fees[0].cost) + connection_feesCost:0
                a.connection_fee_side =  connection_feesCost
             
            }if((newParams.add_left_lean==true && const_var.leanGetDataLeftComparision!="" && const_var.leanGetDataLeftComparision!=undefined))
            {
                connection_feesCost =(const_var.leanGetDataLeftComparision.connection_fees.length>0) ? (const_var.leanGetDataLeftComparision.connection_fees[0].cost) + connection_feesCost:0
                a.connection_fee_side =  connection_feesCost
            }
            if((newParams.add_front_lean==true && const_var.leanGetDataFrontComparision!="" && const_var.leanGetDataFrontComparision!=undefined))
            {
                connection_feesCost =(const_var.leanGetDataFrontComparision.connection_fees.length>0) ? (const_var.leanGetDataFrontComparision.connection_fees[0].cost) + connection_feesCost:0
                a.connection_fee_side =  connection_feesCost
            }
            if((newParams.add_back_lean==true && const_var.leanGetDataBackComparision!="" && const_var.leanGetDataBackComparision!=undefined))
            {
                connection_feesCost =(const_var.leanGetDataBackComparision.connection_fees.length>0) ? (const_var.leanGetDataBackComparision.connection_fees[0].cost) + connection_feesCost:0
                a.connection_fee_side =  connection_feesCost
            }
            
        }else{
            a.connection_fee_side =  0;
        }
        if(const_var.compareMainBuildingPriceRes.connection_fees!=undefined && const_var.compareMainBuildingPriceRes.connection_fees.length>0)
        {
            if((newParams.add_right_lean==true && const_var.leanGetDataRightComparision!=""))
            {
               connection_feesEnd = (const_var.leanGetDataRightComparision.connection_fees.length>0) ? (const_var.leanGetDataRightComparision.connection_fees[0].end_cost) + connection_feesEnd : 0
               a.connection_fee_end = connection_feesEnd
            }if((newParams.add_left_lean==true && const_var.leanGetDataLeftComparision!=""))
            {
               connection_feesEnd = (const_var.leanGetDataLeftComparision.connection_fees.length>0) ? (const_var.leanGetDataLeftComparision.connection_fees[0].end_cost) + connection_feesEnd : 0
               a.connection_fee_end = connection_feesEnd
            }
            if((newParams.add_front_lean==true && const_var.leanGetDataFrontComparision!="" ))
            {
               connection_feesEnd = (const_var.leanGetDataFrontComparision.connection_fees.length>0) ? (const_var.leanGetDataFrontComparision.connection_fees[0].end_cost) + connection_feesEnd : 0
               a.connection_fee_end = connection_feesEnd
            }if((newParams.add_back_lean==true && const_var.leanGetDataBackComparision!="" ))
            {
               connection_feesEnd = (const_var.leanGetDataBackComparision.connection_fees.length>0) ? (const_var.leanGetDataBackComparision.connection_fees[0].end_cost) + connection_feesEnd : 0
               a.connection_fee_end = connection_feesEnd
            }
            connection_feesEnd = (data.connection_fees[0].end_cost) + connection_feesEnd;
            a.connection_fee_end = connection_feesEnd;
        }else{
            a.connection_fee_end =  0;
        }
       
        post_data['building'] = {...a,...b};
        t_c = 0;
        var vertiP = 0;
        var vertiP2 = 0;
        var mapVal = const_var.map[newParams.p_r_s];
        var utilityLen = (newParams.p_u_c==true)?Number(newParams.p_u_t):newParams.p_d;

        if(data.base.length>0)
        {
            let chkGauge = data.base.filter(data=>data.gauge==const_var.g_v);
            for(var i=0;i< data.base.length;i++)
            {
                if(const_var.g_v==data.base[i].gauge)
                {
                   post_data['building'].roof_style_price = data.base[i][mapVal];
                    t_c = parseFloat(t_c) + parseFloat(post_data['building'].roof_style_price);
                    CalCulateRoofBasePrice = post_data['building'].roof_style_price;
                    post_data['building'].gauge = data.base[i].gauge;
                }else if(chkGauge==0)
                {
                    post_data['building'].roof_style_price = data.base[i][mapVal];
                    t_c = parseFloat(t_c) + parseFloat(post_data['building'].roof_style_price);
                    CalCulateRoofBasePrice = post_data['building'].roof_style_price;
                    post_data['building'].gauge = data.base[i].gauge;
                }
            }
        }else
        {
            post_data['building'].roof_style_price = 0;
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].roof_style_price);
            CalCulateRoofBasePrice = post_data['building'].roof_style_price;
        }

        if (newParams.cupola) {
            const cupolaData = data.cupola && Object.values(data.cupola).flat();
            let cupolaEntries = [], cupolas = [], cupolaPrice =0;

            const_var.cupolaEntries &&  const_var.cupolaEntries.map((currentCupola) => {
                if (cupolaData.length > 0 ){
                    let matchCheck = false;
                    for ( let i = 0; i < cupolaData.length; i++ ) {
                        if (currentCupola.dimension === cupolaData[i].structure && currentCupola.cupolaType === cupolaData[i].slug){
                            cupolaEntries.push({'cupolaName':currentCupola.cupolaName,'cupolaType':currentCupola.cupolaType,'name': currentCupola.name, 'uniqueId': currentCupola.uniqueId, 'cupola_price': cupolaData[i].cost, 'dimension': currentCupola.dimension,'width':currentCupola.width,'length':currentCupola.length,  'position': currentCupola.position,'cupolaId': cupolaData[i].id})
                            cupolas.push({ 'dimension': currentCupola.dimension, 'cupola_price': cupolaData[i].cost, 'uniqueId': currentCupola.uniqueId})
                            cupolaPrice =  parseFloat(cupolaPrice) + parseFloat(cupolaData[i].cost)
                            matchCheck = true
                        } 
                        if(i == cupolaData.length-1 && matchCheck === false){
                            cupolas.push({'dimension': 'NA', 'cupola_price': 0, 'uniqueId': currentCupola.uniqueId,})
                        }
                    }
                } else {
                    cupolas.push({'dimension': 'NA', 'cupola_price': 0, 'uniqueId': currentCupola.uniqueId,})
                }
            })
            t_c = parseFloat(t_c) + parseFloat(cupolaPrice);
            post_data['building']['cupolaEntries'] = cupolaEntries;
            post_data['building']['cupolas'] = cupolas;

        }
        newParams.gauge_val = post_data['building'].gauge;
         post_data['building'].certificateArray = [{ value: 0, label: "Select" }];
          const_var.main_extraItems_arr_Compare = [];
          if ((data.certificate!=undefined) && (data.certificate.length>0)) {
            newParams.p_e_i="Select";
             //newParams.certificateArray['Select'] = 0;
             for (var i=0;i<=data.certificate.length-1;i++) {
                if(params.p_e_l ==true)
                {
                    if(data.certificate[i].has_other_leg==1)
                        {
                            const_var.main_extraItems_arr_Compare[data.certificate[i].certificate_id] = data.certificate[i];
                            if(data.certificate[i].gauge==0 || post_data['building'].gauge == data.certificate[i].gauge)
                             {
                                 post_data['building'].certificateArray.push({value:data.certificate[i].certificate_id,label:data.certificate[i].name});
                             }                
                             if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || post_data['building'].gauge == data.certificate[i].gauge) )
                             {
                                 newParams.p_e_i =(newParams.p_e_i=="Select")?data.certificate[i].certificate_id:newParams.p_e_i;
                                if (data.certificate[i].distance_on_center && data.certificate[i].distance_on_center == 4) {
                                    newParams.fourth_center_cost = true;
                                } else {
                                    if(data.building_structure != undefined && data.building_structure[0].distance_on_center != undefined) {
                                        newParams.fourth_center_cost = (data.building_structure[0].distance_on_center == 4) ? true :  newParams.fourth_center_cost;
                                        const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s] = (data.building_structure[0].distance_on_center == 4)? 4 : data.building_structure[0].distance_on_center;
                                        newParams.isDefaultfourFeet = (data.building_structure[0].distance_on_center == 4) ? true :  newParams.isDefaultfourFeet;
                                    }
                                 }
                             }
                        }

                    
                }else
                {
                    if(data.certificate[i].has_other_leg==0)
                        {
                            const_var.main_extraItems_arr_Compare[data.certificate[i].certificate_id] = data.certificate[i];
                            if(data.certificate[i].gauge==0 || post_data['building'].gauge == data.certificate[i].gauge)
                             {
                                 post_data['building'].certificateArray.push({value:data.certificate[i].certificate_id,label:data.certificate[i].name});
                             }                
                             if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || post_data['building'].gauge == data.certificate[i].gauge) )
                             {
                                 newParams.p_e_i =(newParams.p_e_i=="Select")?data.certificate[i].certificate_id:newParams.p_e_i;
                                 if (data.certificate[i].distance_on_center && data.certificate[i].distance_on_center == 4) {
                                    newParams.fourth_center_cost = true;
                                 }else {
                                    if (data.building_structure != undefined && data.building_structure[0].distance_on_center != undefined) {
                                        newParams.fourth_center_cost = (data.building_structure[0].distance_on_center == 4) ? true :  newParams.fourth_center_cost;
                                        const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s] = (data.building_structure[0].distance_on_center == 4)? 4 : data.building_structure[0].distance_on_center;
                                        newParams.isDefaultfourFeet = (data.building_structure[0].distance_on_center == 4) ? true :  newParams.isDefaultfourFeet;
                                    }
                                 }
                             }
                        }
                }
             }
          }
      if(chkflag!=undefined)
      {
        newParams.p_e_i = chkflag;
        // console.log(newParams.p_e_i,"newParams.p_e_i");
        // const_var.main_extraItems_arr_Compare.filter(data=>{console.log(data,data.certificate_id,"==",newParams.p_e_i)})
        post_data['building'].certificate = const_var.main_extraItems_arr_Compare.filter(data=>data.certificate_id==newParams.p_e_i &&((data.gauge==0 || post_data['building'].gauge == data.gauge)))[0];
        if(post_data['building'].certificate == undefined) {
            post_data['building'].certificate = '';
        }
        if (post_data['building'].certificate && post_data['building'].certificate.distance_on_center && post_data['building'].certificate.distance_on_center ==4 ){
            newParams.fourth_center_cost = true;
        } else {
            if (data.building_structure != undefined && data.building_structure[0].distance_on_center != undefined) {
                newParams.fourth_center_cost = (data.building_structure[0].distance_on_center == 4) ? true :  newParams.fourth_center_cost;
                const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s] = (data.building_structure[0].distance_on_center == 4)? 4 : data.building_structure[0].distance_on_center;
                newParams.isDefaultfourFeet = (data.building_structure[0].distance_on_center == 4) ? true : newParams.isDefaultfourFeet;
            }
         }
        // console.log(post_data['building'].certificate ,"post_data['building'].certificate");
      }else
      {
        post_data['building'].certificate = const_var.main_extraItems_arr_Compare.filter(data=>data.certificate_id==newParams.p_e_i &&((data.gauge==0 || post_data['building'].gauge == data.gauge)))[0];
        // console.log(post_data['building'].certificate,"post_data['building'].certificate")
        if(post_data['building'].certificate==undefined)
        {
            post_data['building'].certificate = '';
        }
        post_data['building'].certificate_name = (post_data['building'].certificate!=undefined && post_data['building'].certificate.name!=undefined)?post_data['building'].certificate.name:'';
      }
      post_data['building'].newCertificate = (newParams.p_e_i=="Select")?0:newParams.p_e_i;
      //post_data['building'].certificate_name = (newParams.p_e_i=="Select")?"Select":post_data['building'].certificate.name;
        if(post_data['building'].connection_fee_side!=undefined)
        {
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_side);
        }if(post_data['building'].connection_fee_end!=undefined)
        {
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_end);
        }
        post_data['building'].connection_fee_left_front = 0;
        post_data['building'].connection_fee_left_back = 0;
        post_data['building'].connection_fee_right_front = 0;
        post_data['building'].connection_fee_right_back =  0; 
                
        if(newParams.add_left_front_lean_porch==true && const_var.leanGetDataLeftComparision != '' && const_var.leanGetDataLeftComparision.connection_fees.length>0 && const_var.compare_leanto_condition_by_mfg.wrap_around == true )
        {
            post_data['building'].connection_fee_left_front = (const_var.leanGetDataLeftComparision.connection_fees[0].wrap_around_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_left_front);
        }
        if(newParams.add_right_front_lean_porch==true && const_var.leanGetDataRightComparision != ''&& const_var.leanGetDataRightComparision.connection_fees.length>0 && const_var.compare_leanto_condition_by_mfg.wrap_around == true)
        {
            post_data['building'].connection_fee_right_front = (const_var.leanGetDataRightComparision.connection_fees[0].wrap_around_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_right_front);
        }
        if(newParams.add_right_back_lean_porch==true && const_var.leanGetDataRightComparision != ''&& const_var.leanGetDataRightComparision.connection_fees.length>0 && const_var.compare_leanto_condition_by_mfg.wrap_around == true)
        {
            post_data['building'].connection_fee_right_back = (const_var.leanGetDataRightComparision.connection_fees[0].wrap_around_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_right_back);
        }if(newParams.add_left_back_lean_porch==true && const_var.leanGetDataLeftComparision != ''&& const_var.leanGetDataLeftComparision.connection_fees.length>0 && const_var.compare_leanto_condition_by_mfg.wrap_around == true)
        {
            post_data['building'].connection_fee_left_back = (const_var.leanGetDataLeftComparision.connection_fees[0].wrap_around_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_left_back);
        }

        if(newParams.p_l_w=="Close")
        {
            if (newParams.cB_addStorage_check_left != true){
                post_data['building'].left_wall_price = (newParams.p_v_w==true)?(newObjForSide.side[0].vertical_side_cost)+(newObjForSide.side[0].side_close_cost):(newObjForSide.side[0].side_close_cost);
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
            } else {
                post_data['building'].left_wall_price = 0;
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price); 
            }
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].left_wall_price);
        }if(newParams.p_l_w=="Half_Close")
        {
            post_data['building'].left_wall_price = (params.m_n_f_1 == 97 || params.m_n_f_2 == 97) ? 0 : (newParams.p_v_w==true)?((newObjForSide.side[0].half_vertical_side_cost)+(newObjForSide.side[0].half_side_close_cost)).toFixed(2):(newObjForSide.side[0].half_side_close_cost).toFixed(2);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].left_wall_price);
        }if(newParams.p_l_w=="One_Fourth_Close")
        {
            post_data['building'].left_wall_price = (params.m_n_f_1 == 97 || params.m_n_f_2 == 97) ? 0 : (newParams.p_v_w==true)?((newObjForSide.side[0].one_fourth_vertical_side_cost)+(newObjForSide.side[0].one_fourth_side_close_cost)).toFixed(2):(newObjForSide.side[0].one_fourth_side_close_cost).toFixed(2);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].left_wall_price);
        }if(newParams.p_l_w=="Three_Fourth_Close")
        {
            post_data['building'].left_wall_price = (params.m_n_f_1 == 97 || params.m_n_f_2 == 97) ? 0 : (newParams.p_v_w==true)?((newObjForSide.side[0].three_fourth_vertical_side_cost)+(newObjForSide.side[0].three_fourth_side_close_cost)).toFixed(2):(newObjForSide.side[0].three_fourth_side_close_cost).toFixed(2);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].left_wall_price);
        }if(newParams.p_l_w!=="Close" && newParams.p_l_w!=="Open" && newParams.p_l_w!=="Half_Close" && newParams.p_l_w!=="One_Fourth_Close" && newParams.p_l_w!=="Three_Fourth_Close")
        {
            //post_data['building'].left_wall_price = (newParams.p_v_w==true )?(APIPriceData.panel[0].vertical_panel_cost * newParams.p_l_w):(APIPriceData.panel[0].cost * newParams.p_l_w);
            post_data['building'].left_wall_price = (newParams.p_v_w==true )? ((newParams.add_left_lean==true && const_var.checkPanelForLean.left==true && APIPriceData.panel[0].vertical_roof_panel_cost!=undefined && APIPriceData.panel[0].vertical_roof_panel_cost!=0)?(APIPriceData.panel[0].vertical_roof_panel_cost * newParams.p_l_w):(APIPriceData.panel[0].vertical_panel_cost * newParams.p_l_w)):((newParams.add_left_lean==true && const_var.checkPanelForLean.left==true && APIPriceData.panel[0].horizontal_roof_panel_cost!=undefined && APIPriceData.panel[0].horizontal_roof_panel_cost!=0)?(APIPriceData.panel[0].horizontal_roof_panel_cost * newParams.p_l_w):APIPriceData.panel[0].cost * newParams.p_l_w);

            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
        }if(newParams.p_r_w=="Close")
        {
            if ( newParams.cB_addStorage_check_right!=true ) {
                post_data['building'].right_wall_price = (newParams.p_v_w==true)?(pricing_data.side[0].vertical_side_cost)+(pricing_data.side[0].side_close_cost):(pricing_data.side[0].side_close_cost);
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
            } else {
              post_data['building'].right_wall_price = 0;
              t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
            }
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].right_wall_price);
        }if(newParams.p_r_w=="Half_Close")
        {
            post_data['building'].right_wall_price = (params.m_n_f_1 == 97 || params.m_n_f_2 == 97) ? 0 : (newParams.p_v_w==true)?(pricing_data.side[0].half_vertical_side_cost)+(pricing_data.side[0].half_side_close_cost):(pricing_data.side[0].half_side_close_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].right_wall_price);  
        }if(newParams.p_r_w=="One_Fourth_Close")
        {
            post_data['building'].right_wall_price = (params.m_n_f_1 == 97 || params.m_n_f_2 == 97) ? 0 : (newParams.p_v_w==true)?(pricing_data.side[0].one_fourth_vertical_side_cost)+(pricing_data.side[0].one_fourth_side_close_cost):(pricing_data.side[0].one_fourth_side_close_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].right_wall_price);            
        }if(newParams.p_r_w=="Three_Fourth_Close")
        {
            post_data['building'].right_wall_price = (params.m_n_f_1 == 97 || params.m_n_f_2 == 97) ? 0 : (newParams.p_v_w==true)?(pricing_data.side[0].three_fourth_vertical_side_cost)+(pricing_data.side[0].three_fourth_side_close_cost):(pricing_data.side[0].three_fourth_side_close_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].right_wall_price);
        }if(newParams.p_r_w!=="Close" && newParams.p_r_w!=="Open" && newParams.p_r_w!=="Half_Close" && newParams.p_r_w!=="One_Fourth_Close" && newParams.p_r_w!=="Three_Fourth_Close")
        {
            //post_data['building'].right_wall_price = (newParams.p_v_w==true )?(pricing_data.panel[0].vertical_panel_cost * newParams.p_r_w):(pricing_data.panel[0].cost * newParams.p_r_w);
            post_data['building'].right_wall_price = (newParams.p_v_w==true )? ((newParams.add_right_lean==true && const_var.checkPanelForLean.right==true && pricing_data.panel[0].vertical_roof_panel_cost!=undefined && pricing_data.panel[0].vertical_roof_panel_cost!=0)?(pricing_data.panel[0].vertical_roof_panel_cost * newParams.p_r_w):(pricing_data.panel[0].vertical_panel_cost * newParams.p_r_w)):((newParams.add_right_lean==true && const_var.checkPanelForLean.right==true && pricing_data.panel[0].horizontal_roof_panel_cost!=undefined && pricing_data.panel[0].horizontal_roof_panel_cost!=0)?(pricing_data.panel[0].horizontal_roof_panel_cost * newParams.p_r_w):pricing_data.panel[0].cost * newParams.p_r_w);

            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
        }if(newParams.p_f_w=="Close")
        {
            post_data['building'].front_wall_price = newParams.cB_addStorage_check_front ? 0 : (newParams.p_v_w==true)?(pricing_data.end[0].vertical_ends_cost)+ (pricing_data.end[0].end_close_cost):(pricing_data.end[0].end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].front_wall_price);
            // CalCulateRoofEndClosePrice = post_data['building'].front_wall_price;
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].front_wall_price);
        }if(newParams.p_f_w=="Half_Close")
        {
            post_data['building'].front_wall_price = (newParams.p_v_w==true)?(const_var.ComparisionDataArray[iiD].pricing_data.end[0].half_vertical_ends_cost)+ (const_var.ComparisionDataArray[iiD].pricing_data.end[0].half_end_close_cost):(const_var.ComparisionDataArray[iiD].pricing_data.end[0].half_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].front_wall_price);
            // CalCulateRoofEndClosePrice = post_data['building'].front_wall_price;
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].front_wall_price);
        }if(newParams.p_f_w=="One_Fourth_Close")
        {
            post_data['building'].front_wall_price = (newParams.p_v_w==true)?(const_var.ComparisionDataArray[iiD].pricing_data.end[0].one_fourth_vertical_ends_cost)+ (const_var.ComparisionDataArray[iiD].pricing_data.end[0].one_fourth_end_close_cost):(const_var.ComparisionDataArray[iiD].pricing_data.end[0].one_fourth_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].front_wall_price);
            // CalCulateRoofEndClosePrice = post_data['building'].front_wall_price;
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].front_wall_price);
        }if(newParams.p_f_w=="Three_Fourth_Close")
        {
            post_data['building'].front_wall_price = (newParams.p_v_w==true)?(const_var.ComparisionDataArray[iiD].pricing_data.end[0].three_fourth_vertical_ends_cost)+ (const_var.ComparisionDataArray[iiD].pricing_data.end[0].three_fourth_end_close_cost):(const_var.ComparisionDataArray[iiD].pricing_data.end[0].three_fourth_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].front_wall_price);
            // CalCulateRoofEndClosePrice = post_data['building'].front_wall_price;
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].front_wall_price);
        }if(newParams.p_f_w!=="Close" && newParams.p_f_w!=="Open" && newParams.p_f_w!=="Half_Close" && newParams.p_f_w!=="One_Fourth_Close" && newParams.p_f_w!=="Three_Fourth_Close")
        {
            if(newParams.p_f_w=="Gable")
            {
                if(newParams.p_v_w==true)
                {
                    if(const_var.main_extraItems_arr_Compare[newParams.p_e_i]!=undefined && const_var.main_extraItems_arr_Compare[newParams.p_e_i].certified==1)
                    {
                        //t_c = (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].certified!=0)?t_c + (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].vertical_certified) + const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].certified :t_c + (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].vertical) + const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].uncertified;
                        vertiP = vertiP + (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].vertical_certified)+const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].certified;
                    }else{
                        //t_c = t_c + (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].vertical) + (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].uncertified);
                        vertiP = vertiP + (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].vertical)+ (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].uncertified);
                    }
                }else{
                    if(const_var.main_extraItems_arr_Compare[newParams.p_e_i]!=undefined &&  const_var.main_extraItems_arr_Compare[newParams.p_e_i].certified==1)
                    {
                        //t_c = (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].certified!=0)?t_c + const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].certified :t_c + const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].uncertified;
                        vertiP = vertiP + const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].certified;
                    }else{
                        //t_c = t_c + const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].uncertified;
                        vertiP = vertiP + const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].uncertified;
                    }
                } 
            }else
            {
                if(newParams.p_v_w==true)
                {
                    //t_c = t_c + (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].vertical_extended) + (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].extended);
                    vertiP = vertiP + (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].vertical_extended) + (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].extended);
                }else{    
                    //t_c = t_c+ (const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].extended);
                    vertiP = vertiP+(const_var.ComparisionDataArray[iiD].pricing_data.gable_end[0].extended);
                } 
            }  
            post_data['building'].front_wall_price = vertiP;  
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].front_wall_price);
            //t_c = (const_var.c_f_a[newParams.p_e_i]==0)?t_c + 0:(const_var.ComparisionDataArray[iiD].pricing_data.gableCost[0].certified_cost) + t_c;
            CalCulateRoofEndGablePrice = post_data['building'].front_wall_price;
        }if(newParams.p_b_w=="Close")
        {
            if(newParams.p_u_c!=true)
            {
                post_data['building'].back_wall_price = (newParams.p_v_w==true)?(pricing_data.end[0].vertical_ends_cost)+(pricing_data.end[0].end_close_cost):(pricing_data.end[0].end_close_cost);
                t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
                CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + post_data['building'].back_wall_price;
            }else
            {
                post_data['building'].back_wall_price = 0;
                t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
                CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + post_data['building'].back_wall_price;
            }
        }if(newParams.p_b_w=="Half_Close")
        {
            post_data['building'].back_wall_price = (newParams.p_v_w==true)?(pricing_data.end[0].half_vertical_ends_cost)+ (pricing_data.end[0].half_end_close_cost):(pricing_data.end[0].half_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
            // CalCulateRoofEndClosePrice = post_data['building'].back_wall_price;
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].back_wall_price);
        }if(newParams.p_b_w=="One_Fourth_Close")
        {
            post_data['building'].back_wall_price = (newParams.p_v_w==true)?(pricing_data.end[0].one_fourth_vertical_ends_cost)+ (pricing_data.end[0].one_fourth_end_close_cost):(pricing_data.end[0].one_fourth_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
            // CalCulateRoofEndClosePrice = post_data['building'].back_wall_price;
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].back_wall_price);
        }if(newParams.p_b_w=="Three_Fourth_Close")
        {
            post_data['building'].back_wall_price = (newParams.p_v_w==true)?(pricing_data.end[0].three_fourth_vertical_ends_cost)+ (pricing_data.end[0].three_fourth_end_close_cost):(pricing_data.end[0].three_fourth_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
            // CalCulateRoofEndClosePrice = post_data['building'].back_wall_price;
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].back_wall_price);
        }if(newParams.p_b_w!=="Close" && newParams.p_b_w!=="Open" && newParams.p_b_w!=="Half_Close" && newParams.p_b_w!=="One_Fourth_Close" && newParams.p_b_w!=="Three_Fourth_Close")
        {
            if(newParams.p_b_w=="Gable")
            {
                if(newParams.p_v_w==true)
                {
                    if(const_var.main_extraItems_arr_Compare[newParams.p_e_i]!=undefined && const_var.main_extraItems_arr_Compare[newParams.p_e_i].certified==1)
                    {
                        //t_c = (pricing_data.gable_end[0].certified!=0)?t_c + (pricing_data.gable_end[0].vertical_certified) + pricing_data.gable_end[0].certified :t_c + (pricing_data.gable_end[0].vertical) + pricing_data.gable_end[0].uncertified;
                        vertiP2 = vertiP2 + (pricing_data.gable_end[0].vertical_certified)+pricing_data.gable_end[0].certified;
                    }else{
                        //t_c = t_c + (pricing_data.gable_end[0].vertical) + (pricing_data.gable_end[0].uncertified);
                        vertiP2 = vertiP2 + (pricing_data.gable_end[0].vertical)+(pricing_data.gable_end[0].uncertified);
                    }
                }else{
                    if(const_var.main_extraItems_arr_Compare[newParams.p_e_i]!=undefined &&  const_var.main_extraItems_arr_Compare[newParams.p_e_i].certified==1)
                    {
                        //t_c = (pricing_data.gable_end[0].certified!=0)?t_c + pricing_data.gable_end[0].certified :t_c + pricing_data.gable_end[0].uncertified;
                        vertiP2 = vertiP2 + pricing_data.gable_end[0].certified;
                    }else{
                        //t_c = t_c + pricing_data.gable_end[0].uncertified;
                        vertiP2 = vertiP2 + pricing_data.gable_end[0].uncertified;
                    }
                } 
            }else
            {
                if(newParams.p_v_w==true)
                {
                    //t_c = t_c + (pricing_data.gable_end[0].vertical_extended) + (pricing_data.gable_end[0].extended);
                    vertiP2 = vertiP2 + (pricing_data.gable_end[0].vertical_extended) + (pricing_data.gable_end[0].extended);
                }else{    
                    //t_c = t_c+ (pricing_data.gable_end[0].extended);
                    vertiP2 = vertiP2+(pricing_data.gable_end[0].extended);
                } 
            } 
            post_data['building'].back_wall_price = vertiP2;
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
            CalCulateRoofEndGablePrice = CalCulateRoofEndGablePrice + post_data['building'].back_wall_price;
        }if(newParams.p_c_p_l==true)
        {
            post_data['building'].left_wall_cut_panel_price = (pricing_data.panel[0].cut_panel_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_cut_panel_price);
            post_data['building'].left_wall_cutpanel = true;

            // t_c = parseFloat(t_c) + parseFloat((pricing_data.panel[0].cut_panel_cost));
            // post_data['building'].left_wall_price = post_data['building'].left_wall_price + (pricing_data.panel[0].cut_panel_cost);
            // post_data['building'].left_wall_cutpanel = true;
        }else
        {
            post_data['building'].left_wall_cut_panel_price = 0;
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_cut_panel_price);
        }
        if(newParams.p_c_p_r==true)
        {
            post_data['building'].right_wall_cut_panel_price = (pricing_data.panel[0].cut_panel_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_cut_panel_price);
            post_data['building'].right_wall_cutpanel = true;

            // t_c = parseFloat(t_c) + parseFloat((data.panel[0].cut_panel_cost));
            // post_data['building'].right_wall_price = post_data['building'].right_wall_price + (data.panel[0].cut_panel_cost);
            // post_data['building'].right_wall_cutpanel = true;
        }else
        {
            post_data['building'].right_wall_cut_panel_price = 0;
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_cut_panel_price);
        }
        
        //t_c = t_c + (data.side[0].leg_height_cost); 
        
        if(newParams.p_u_c==true && APIPriceData.utility_side.length>0)
        {   
            // post_data['building'].utility_price = (newParams.p_v_w==true)?(APIPriceData.utility_side[0].vertical_side_cost *2)+(APIPriceData.end[0].vertical_ends_cost * 2)+(APIPriceData.utility_side[0].side_close_cost * 2)+(APIPriceData.end[0].end_close_cost * 2):(APIPriceData.utility_side[0].side_close_cost * 2)+(APIPriceData.end[0].end_close_cost * 2);
            if( const_var.b_o_J_1[newParams.p_b_t] != undefined && const_var.b_o_J_1[newParams.p_b_t].includes("Free Standing Lean-to") && APIPriceData.utility_slope_height.length>0)
            {
                post_data['building'].utility_price = (newParams.p_v_w==true)?(APIPriceData.utility_side[0].vertical_side_cost)+(APIPriceData.utility_slope_height[0].vertical_side_cost) +(APIPriceData.end[0].vertical_ends_cost * 2)+(APIPriceData.utility_side[0].side_close_cost )+(APIPriceData.utility_slope_height[0].side_close_cost)+(APIPriceData.end[0].end_close_cost * 2):(APIPriceData.utility_side[0].side_close_cost)+(APIPriceData.utility_slope_height[0].side_close_cost )+(APIPriceData.end[0].end_close_cost * 2);
            }else{
                post_data['building'].utility_price = (newParams.p_v_w==true)?(APIPriceData.utility_side[0].vertical_side_cost *2)+(APIPriceData.end[0].vertical_ends_cost * 2)+(APIPriceData.utility_side[0].side_close_cost * 2)+(APIPriceData.end[0].end_close_cost * 2):(APIPriceData.utility_side[0].side_close_cost * 2)+(APIPriceData.end[0].end_close_cost * 2);
            }
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].utility_price);
            post_data['building'].utility_length = newParams.p_u_t;
            post_data['building'].has_utility = true;
            post_data['building'].utility_name = "back"
            post_data['building'].utility_vertical = (newParams.p_v_w)?true:false;
            post_data['building'].utility_on_centers = (const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s]==undefined)?5:const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s];
            if(const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s]==5)
            {
                var b_u_D_p_a = const_var.b_u_D_p_a5;
            }else{
                var b_u_D_p_a = const_var.b_u_D_p_a4;
            }
            post_data['building'].utility_length_list = b_u_D_p_a;
            CalCulateRoofUtilityEndPrice = post_data['building'].utility_price;
        } else if ( (newParams.cB_addStorage_check_left==true || newParams.cB_addStorage_check_right==true) && APIPriceData.side_combo_v3.length>0 ) {   
            let exactPriceAdd = 0;
            if(newParams.p_h >= const_var.CompareBuildingMaxHeight)
            {
                if(Number(newParams.p_r_p)>3)
                {
                    exactPriceAdd = (newParams.p_v_w==true)?(APIPriceData.panel[0].vertical_panel_cost * 2):(APIPriceData.panel[0].cost * 2);
                }else{
                    exactPriceAdd = (newParams.p_v_w==true)?(APIPriceData.panel[0].vertical_panel_cost * 1):(APIPriceData.panel[0].cost * 1);
                }
            }
            let sideCloseCostOnZeroPrice = 0, endCloseCostOnZeroPrice = 0;
            if (data.side_combo_v3[0].side_close_cost == 0) {
                sideCloseCostOnZeroPrice = APIPriceData.side[0].side_close_cost;
            }
            if (APIPriceData.end_combo_v3[0].end_close_cost == 0) {
                endCloseCostOnZeroPrice = (2 * APIPriceData.end[0].end_close_cost);
                if (Number(newParams.p_r_p) > 3) {
                    endCloseCostOnZeroPrice = endCloseCostOnZeroPrice + APIPriceData.gable_end[0].certified;
                }
            }
    
            let sideWall = APIPriceData.side;
            if(newParams.singleSlope) {
                sideWall = (newParams.cB_addStorage_check_left==true && APIPriceData.side_slope_height!=undefined && APIPriceData.side_slope_height.length>0)?APIPriceData.side_slope_height:APIPriceData.side;
            }
            
            post_data['building'].utility_price = (newParams.p_v_w==true) ?
            (APIPriceData.side_combo_v3[0].vertical_side_cost)+(sideWall[0].vertical_side_cost)+
            (APIPriceData.end_combo_v3[0].vertical_ends_cost * 2)+(APIPriceData.side_combo_v3[0].side_close_cost)+
            (sideWall[0].side_close_cost)+(APIPriceData.end_combo_v3[0].end_close_cost * 2)+exactPriceAdd:
            (APIPriceData.side_combo_v3[0].side_close_cost)+(sideWall[0].side_close_cost)+(APIPriceData.end_combo_v3[0].end_close_cost * 2)+exactPriceAdd + sideCloseCostOnZeroPrice + endCloseCostOnZeroPrice ;

            t_c = parseFloat(t_c) + parseFloat(post_data['building'].utility_price);
            post_data['building'].utility_length = (newParams.cB_addStorage_check_left==true)?newParams.cB_addStorage_left:newParams.cB_addStorage_right;
            post_data['building'].utility_width = (newParams.cB_addStorage_check_left==true)?newParams.cB_addStorage_left:newParams.cB_addStorage_right;
            post_data['building'].has_utility = true;
            post_data['building'].utility_name = (newParams.cB_addStorage_check_left==true)?"left":"right";
            post_data['building'].utility_vertical = (newParams.p_v_w)?true:false;
            post_data['building'].utility_on_centers = (const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s]==undefined)?5:const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s];
            if(const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s]==5)
            {
                var b_u_D_p_a = const_var.b_u_D_p_a5;
            }else{
                var b_u_D_p_a = const_var.b_u_D_p_a4;
            }
            post_data['building'].utility_length_list = b_u_D_p_a;
            CalCulateRoofUtilityEndPrice = post_data['building'].utility_price;
        }
        else
        {
            post_data['building'].has_utility = false;
            post_data['building'].utility_price = 0;
        }
        if ( newParams.isBreezeway && newParams.cB_addStorage_check_front && APIPriceData.front_utility_side.length>0 ) {
            post_data['building'].utility_front_price =(newParams.p_v_w==true)?(((APIPriceData.front_utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.front_utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2))):(((data.front_utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)));
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].utility_front_price);
            post_data['building'].utility_front_length = newParams.cB_addStorage_front;
            post_data['building'].has_utility_front = true;
            post_data['building'].utility_front_name = "front";
            post_data['building'].utility_front_vertical = (newParams.p_v_w)?true:false;
            post_data['building'].utility_front_on_centers = (const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s]==undefined)?5:const_var.DistanceArr[params.p_b_t][params.p_r_s];
            CalCulateRoofUtilityEndPrice = parseFloat(CalCulateRoofUtilityEndPrice)+ parseFloat(post_data['building'].utility_front_price);
            // console.log(post_data['building'].utility_front_price ,"post_data['building'].utility_front_price");
        } else {
            post_data['building'].has_utility_front = false;
            post_data['building'].utility_front_price = 0;
        }
        
        if ( newParams.isBreezeway ) {
            post_data['building'].breezeway_length = const_var.breezewayLength;
        }
        // post_data['building'].distance_On_Center = const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s];
        if(newParams.b_r_p!="Select")
        {
            if(const_var.b_r_p_a_Compare.length > 0  && const_var.b_r_p_a_Compare[newParams.b_r_p]!=undefined )
            {            
                if(const_var.b_r_p_a_Compare[newParams.b_r_p].cost_type == "%")
                {
                    var splitVal = (const_var.b_r_p_a_Compare[newParams.b_r_p].percentage_of!=undefined && const_var.b_r_p_a_Compare[newParams.b_r_p].percentage_of!=0)?const_var.b_r_p_a_Compare[newParams.b_r_p].percentage_of.split(","):0;
                    var splval = 0;
                    if(splitVal!=0)
                    {
                        if(splitVal.includes("1")!=false)
                        {
                            splval = splval + CalCulateRoofBasePrice;
                        }if(splitVal.includes("2")!=false)
                        {
                            if(CalCulateRoofUtilityEndPrice!=0)
                            {
                                splval = splval + CalCulateRoofUtilityEndPrice;
                            }
                            splval = splval + CalCulateRoofEndClosePrice;
                        }if(splitVal.includes("3")!=false)
                        {
                            splval = splval + CalCulateRoofEndGablePrice;
                        }

                    }else
                    {
                        splval = splval + CalCulateRoofBasePrice;
                    }
                    if ( const_var.b_r_p_a_Compare[newParams.b_r_p].cost == 0 ){
                        var finalCertPrice = 0;
                    } else {
                        var finalCertPrice = (splval * const_var.b_r_p_a_Compare[newParams.b_r_p].cost / 100).toFixed(2);
                    }
                    if(finalCertPrice==undefined)
                    {
                        finalCertPrice = 0;
                    }
                    var finalCertPrice = (splval * const_var.b_r_p_a_Compare[newParams.b_r_p].cost / 100);
                    t_c = parseFloat(t_c) + parseFloat(finalCertPrice);
                    post_data['building'].roof_pitch = const_var.b_r_p_a_Compare[newParams.b_r_p].roof_pitch;
                    post_data['building'].roof_pitch_name = const_var.b_r_p_a_Compare[newParams.b_r_p].roof_pitch;
                    post_data['building'].roof_pitch_price =  finalCertPrice;
                    
                }
                else
                {
                    post_data['building'].roof_pitch_price = const_var.b_r_p_a_Compare[newParams.b_r_p].cost;
                    if ( post_data['building'].roof_pitch_price == undefined ) {
                        post_data['building'].roof_pitch_price = 0;
                    }
                    t_c =  parseFloat(t_c) + parseFloat(post_data['building'].roof_pitch_price);
                    post_data['building'].roof_pitch = const_var.b_r_p_a_Compare[newParams.b_r_p].roof_pitch;
                    post_data['building'].roof_pitch_name = const_var.b_r_p_a_Compare[newParams.b_r_p].roof_pitch;
                }
            }
  
            
        
    }else{
        post_data['building'].roof_pitch = "312";
        post_data['building'].roof_pitch_name = "312";
        post_data['building'].roof_pitch_price = 0;
    }
    // console.log(t_c ,"t_c 000");
        post_data['building'].has_double_leg = newParams.p_e_l;
        post_data['building'].legstype = newParams.legstype;
        post_data['building'].isSingleBaseRail = (newParams.p_e_l && newParams.legstype == "double" && const_var.singleBaseRailByMnf.includes(Number(manufacturerId))) ? true : false;
        post_data['building'].distance_on_center = (const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s]==undefined)?5:const_var.DistanceArrCompare[newParams.p_b_t][newParams.p_r_s];
        post_data['building'].hasDoublelegName = (newParams.hasDoublelegName!=undefined)?newParams.hasDoublelegName:'';
        //t_c = (const_var.g_v=="12")?(data.gaugeHeight.length>0)?t_c +data.gaugeHeight[0].cost:t_c + 0 :t_c + 0 ;
        if(const_var.g_v==14)
        {
            if(newObjForSide.heightFullData[0].double_leg_baserail_cost!=0 && newParams.p_e_l==true)
            {
                post_data['building'].height_price = ((newObjForSide.heightFullData[0].double_leg_baserail_cost!=0)?(newObjForSide.heightFullData[0].double_leg_baserail_cost):(newObjForSide.heightFullData[0].leg_height_cost));    
                t_c = parseFloat(t_c)+ parseFloat(post_data['building'].height_price);
                post_data['building'].has_double_leg_price = post_data['building'].height_price;
            }else{
                post_data['building'].height_price = (newObjForSide.heightFullData[0].leg_height_cost);
                t_c = parseFloat(t_c )+ parseFloat(post_data['building'].height_price);
                //post_data['building'].height_price = data.side[0].leg_height_cost;
                post_data['building'].has_double_leg_price = post_data['building'].height_price;
            }
        }
        if(const_var.g_v==12)
        {
            if(newParams.p_e_l==true)
            {
                post_data['building'].height_price = ((newObjForSide.heightFullData[0].double_leg_baserail_cost_12!=0)?(newObjForSide.heightFullData[0].double_leg_baserail_cost_12):(newObjForSide.heightFullData[0].double_leg_baserail_cost));    
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].height_price);
                //post_data['building'].height_price =  (data.side[0].double_leg_baserail_cost_12!=0)?(data.side[0].double_leg_baserail_cost_12):(data.side[0].double_leg_baserail_cost);;
                post_data['building'].has_double_leg_price = post_data['building'].height_price;
            }else{
                post_data['building'].height_price = ((newObjForSide.heightFullData[0].leg_height_cost_12!=0)?(newObjForSide.heightFullData[0].leg_height_cost_12):(newObjForSide.heightFullData[0].leg_height_cost));
                t_c = parseFloat(t_c )+ parseFloat(post_data['building'].height_price);
                //post_data['building'].height_price = (data.side[0].leg_height_cost_12!=0)?(data.side[0].leg_height_cost_12):(data.side[0].leg_height_cost);
                post_data['building'].has_double_leg_price = post_data['building'].height_price;
            } 
        }
        t_c = parseFloat(t_c_b) + parseFloat(t_c);
        
        if (newParams.p_i_o !=0) {
            let insulationPrice = 0; 
            if (newParams.p_f_i) {
               if(const_var.compareInsulationForMainBuilding!=undefined && const_var.compareInsulationForMainBuilding.end_cost!=undefined && const_var.compareInsulationForMainBuilding.end_cost!=0 && const_var.compareInsulationForMainBuilding.side_cost!=0)
                {

                    if(Object.keys(const_var.wallsData['center']).length>0) {
              
                        let sidePrice = 0, endPrice = 0, sideWallCount = parseFloat(const_var.wallsData['center'].closedSideWalls);

                        insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.compareInsulationForMainBuilding.roof_insulation_cost);
                        if(newParams.p_u_c==true && const_var.compareInsulationForMainBuilding.utility_side!=undefined && const_var.compareInsulationForMainBuilding.utility_side!=0)
                        {
                            if(newParams.p_l_w!='Open' || newParams.p_c_p_l) {
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.compareInsulationForMainBuilding.side_cost);
                            } else{
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.compareInsulationForMainBuilding.utility_side);
                            }
                            if(newParams.p_r_w!='Open'  || newParams.p_c_p_r) {
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.compareInsulationForMainBuilding.side_cost);
                            }else{
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.compareInsulationForMainBuilding.utility_side);
                            }
                            endPrice =  parseFloat(endPrice) + parseFloat(const_var.compareInsulationForMainBuilding.end_cost) * parseFloat(const_var.wallsData['center'].closedEndWalls);
                            insulationPrice = parseFloat(insulationPrice) + parseFloat(sidePrice) + parseFloat(endPrice);

                        }else if((newParams.cB_addStorage_check_left==true || newParams.cB_addStorage_check_right==true) && const_var.compareInsulationForMainBuilding.utility_end!=undefined && const_var.compareInsulationForMainBuilding.utility_end!=0)
                        {
                            if (const_var.compareInsulationForMainBuilding.pitch_side != undefined && const_var.compareInsulationForMainBuilding.pitch_side != 0){
                                sideWallCount = Number(sideWallCount) - 1; 
                                sidePrice =  parseFloat(sidePrice) + parseFloat(const_var.compareInsulationForMainBuilding.pitch_side) + parseFloat(const_var.compareInsulationForMainBuilding.side_cost * Number(sideWallCount));
                            }else {
                                sidePrice =  parseFloat(sidePrice) + parseFloat(const_var.compareInsulationForMainBuilding.side_cost * Number(sideWallCount));
                            }
                            if(newParams.p_f_w != 'Open') {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.compareInsulationForMainBuilding.end_cost);
                            } else {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.compareInsulationForMainBuilding.utility_end);
                            }
                            if(newParams.p_b_w != 'Open') {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.compareInsulationForMainBuilding.end_cost);
                            } else {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.compareInsulationForMainBuilding.utility_end);
                            }
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(endPrice) + parseFloat(sidePrice);
                        }else{
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.compareInsulationForMainBuilding.end_cost) * parseFloat(const_var.wallsData['center'].closedEndWalls);
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.compareInsulationForMainBuilding.side_cost) * parseFloat(sideWallCount);
                        }
                    }
                }else{
                   if (newParams.p_u_c || newParams.cB_addStorage_check_left || newParams.cB_addStorage_check_right || newParams.p_f_w != "Open" || newParams.p_l_w != "Open" || newParams.p_b_w != "Open" || newParams.p_r_w!= "Open"  || newParams.p_c_p_l || newParams.p_c_p_r ) {
                    insulationPrice = const_var.compareInsulationForMainBuilding.full_building_insulation_cost!= undefined ? const_var.compareInsulationForMainBuilding.full_building_insulation_cost:0;
                   } else {
                    insulationPrice = const_var.compareInsulationForMainBuilding.roof_insulation_cost!= undefined ? const_var.compareInsulationForMainBuilding.roof_insulation_cost : const_var.compareInsulationForMainBuilding.full_building_insulation_cost!= undefined ? const_var.compareInsulationForMainBuilding.full_building_insulation_cost:0;
                   }
                }
                post_data['building'].insulation = "full";
                post_data['building'].insulation_price = insulationPrice;
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].insulation_price);
                post_data['building'].insulation_type = const_var.compareInsulationForMainBuilding
            }
            if(newParams.p_r_o) {
               insulationPrice = (const_var.compareInsulationForMainBuilding!=undefined && const_var.compareInsulationForMainBuilding.roof_insulation_cost != undefined)?parseFloat(const_var.compareInsulationForMainBuilding.roof_insulation_cost):0;
              
               post_data['building'].insulation = "roof_only";
               post_data['building'].insulation_price = insulationPrice;
               t_c = parseFloat(t_c) + parseFloat(post_data['building'].insulation_price);
               post_data['building'].insulation_type = const_var.compareInsulationForMainBuilding;
            }
         } else {
            post_data['building'].insulation_price = 0;
         }
         post_data['building'].isInsulaltionForOldQuotes = false;
        
        if(newParams.p_j_t_end==true  && data.jtrim.length>0 )
        {
            let isJtrimEnd = false;
            let isJtrimEndPriceCenter = false;
            let isJtrimEndPriceLeftLean = false;
            let isJtrimEndPriceRightLean = false;
            let isJtrimEndPriceFrontLean = false;
            let isJtrimEndPriceBackLean = false;
            let centerBuildingNumber = 1;
            let leftBuildingNumber = 1;
            let rightBuildingNumber = 1;
            let frontBuildingNumber = 1;
            let backBuildingNumber = 1;
             if(newParams.p_f_w!=="Close" && newParams.p_f_w!=="Open" )
              {
                    isJtrimEnd = true;
                    isJtrimEndPriceCenter = true;
                    centerBuildingNumber = (newParams.p_b_w!=="Close" && newParams.p_b_w!=="Open" )?2:1;
              }else
              {
                centerBuildingNumber = 1;
              }
              if(newParams.p_b_w!=="Close" && newParams.p_b_w!=="Open" )
              {
                    isJtrimEnd = true;
                    isJtrimEndPriceCenter = true;
                    centerBuildingNumber = (newParams.p_f_w!=="Close" && newParams.p_f_w!=="Open" )?2:1;
              }else
              {
                centerBuildingNumber = 1;
              }
              if(newParams.p_b_c_b_l_f!="Open" && newParams.p_b_c_b_l_f!="Close")
              {
                 isJtrimEnd = true;
                 isJtrimEndPriceLeftLean = true;
                 leftBuildingNumber = (newParams.p_b_c_b_l_b!="Open" && newParams.p_b_c_b_l_b!="Close")?2:1;
              }else
              {
                leftBuildingNumber = 1;
              }
              if(newParams.p_b_c_b_l_b!="Open" && newParams.p_b_c_b_l_b!="Close")
              {
                isJtrimEnd = true;
                isJtrimEndPriceLeftLean = true;
                leftBuildingNumber = (newParams.p_b_c_b_l_f!="Gable" && newParams.p_b_c_b_l_f!="Close")?2:1;
              }
              else
              {
                leftBuildingNumber = 1;
              }
              
              if(newParams.p_b_c_b_f_f!="Open" && newParams.p_b_c_b_f_f!="Close")
              {
                 isJtrimEnd = true;
                 isJtrimEndPriceFrontLean = true;
                 frontBuildingNumber = (newParams.p_b_c_b_f_f!="Open" && newParams.p_b_c_b_f_f!="Close")?2:1;
              }
              else
              {
                frontBuildingNumber = 1;
              }
              if(newParams.p_b_c_b_f_b!="Open" && newParams.p_b_c_b_f_b!="Close")
              {
                isJtrimEnd = true;
                isJtrimEndPriceFrontLean = true;
                frontBuildingNumber = (newParams.p_b_c_b_f_b!="Open" && newParams.p_b_c_b_f_b!="Close")?2:1;
              }
              else
              {
                frontBuildingNumber = 1;
              }
              
              if(newParams.p_b_c_b_b_f!="Open" && newParams.p_b_c_b_b_f=="Close")
              {
                 isJtrimEnd = true;
                 isJtrimEndPriceBackLean = true;
                 backBuildingNumber = (newParams.p_b_c_b_b_f!="Open" && newParams.p_b_c_b_b_f!="Close")?2:1;
              }
              else
              {
                backBuildingNumber = 1;
              }
              
              if(newParams.p_b_c_b_b_b!="Open" && newParams.p_b_c_b_b_b!="Close")
              {
                isJtrimEnd = true;
                isJtrimEndPriceBackLean = true;
                backBuildingNumber = (newParams.p_b_c_b_b_b!="Open" && newParams.p_b_c_b_b_b!="Close")?2:1;
              }
              else
              {
                backBuildingNumber = 1;
              }
              
              if(newParams.p_b_c_b_r_f!="Open"  && newParams.p_b_c_b_r_f!="Close" )
              {
                    isJtrimEnd = true;
                    isJtrimEndPriceRightLean = true;
                    rightBuildingNumber = (newParams.p_b_c_b_r_b!="Open" && newParams.p_b_c_b_r_b!="Close")?2:1;
              }else
              {
                rightBuildingNumber = 1;
              }if(newParams.p_b_c_b_r_b!="Open" && newParams.p_b_c_b_r_b!="Close")
              {
                    isJtrimEnd = true;
                    isJtrimEndPriceRightLean = true;
                    rightBuildingNumber = (newParams.p_b_c_b_r_f!="Open" && newParams.p_b_c_b_r_f!="Close")?2:1;
              }else
              {
                rightBuildingNumber = 1;
              }
              var jtrimPrice = 0;

              let centerJtrim = data.jtrim.find(data=>data.type=="end");
            if(newParams.p_j_t_end==true && centerJtrim)
            {
                if(isJtrimEndPriceCenter==true && centerJtrim != undefined)
                {
                    jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(centerJtrim.cost) * parseFloat(centerBuildingNumber));
                }else
                {
                    jtrimPrice = parseFloat(jtrimPrice) + 0;
                }
                let rightJtrim = (const_var.leanGetDataRightComparision!="" && const_var.leanGetDataRightComparision.jtrim.length>0)?const_var.leanGetDataRightComparision.jtrim.find(data=>data.type=="end"):undefined;
                let leftJtrim = (const_var.leanGetDataLeftComparision!="" && const_var.leanGetDataLeftComparision.jtrim.length>0)?const_var.leanGetDataLeftComparision.jtrim.find(data=>data.type=="end"):undefined;
                let frontJtrim = (const_var.leanGetDataFrontComparision!="" && const_var.leanGetDataFrontComparision.jtrim.length>0)?const_var.leanGetDataFrontComparision.jtrim.find(data=>data.type=="end"):undefined;
                let backJtrim = (const_var.leanGetDataBackComparision!="" && const_var.leanGetDataBackComparision.jtrim.length>0)?const_var.leanGetDataBackComparision.jtrim.find(data=>data.type=="end"):undefined;

               if(
                (rightJtrim!=undefined && newParams.add_right_lean==true && const_var.leanGetDataRightComparision!="" && const_var.leanGetDataRightComparision.jtrim.length>0 && isJtrimEndPriceRightLean==true)
                 && (leftJtrim!=undefined && newParams.add_left_lean==true && const_var.leanGetDataLeftComparision!="" && const_var.leanGetDataLeftComparision.jtrim.length>0 && isJtrimEndPriceLeftLean==true)
                 && (frontJtrim!=undefined && newParams.add_front_lean==true && const_var.leanGetDataFrontComparision!="" && const_var.leanGetDataFrontComparision.jtrim.length>0 && isJtrimEndPriceFrontLean==true)
                 && (backJtrim!=undefined && newParams.add_back_lean==true && const_var.leanGetDataBackComparision!="" && const_var.leanGetDataBackComparision.jtrim.length>0 && isJtrimEndPriceBackLean==true)
                 )
               {
                    if(isJtrimEndPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(leftJtrim.cost)* parseFloat(leftBuildingNumber)) + (parseFloat(rightJtrim.cost)* parseFloat(rightBuildingNumber)) + (parseFloat(frontJtrim.cost)* parseFloat(frontBuildingNumber)) + (parseFloat(backJtrim.cost)* parseFloat(backBuildingNumber));
                    }else
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(leftJtrim.cost)* parseFloat(leftBuildingNumber)) + (parseFloat(rightJtrim.cost)* parseFloat(rightBuildingNumber));
                    }
                    
               }if(rightJtrim!=undefined && newParams.add_right_lean==true && const_var.leanGetDataRightComparision!="" && const_var.leanGetDataRightComparision.jtrim.length>0 && isJtrimEndPriceRightLean==true)
               {
                    if(isJtrimEndPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) +  (parseFloat(rightJtrim.cost)* parseFloat(rightBuildingNumber));
                    }else{
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(rightJtrim.cost) * parseFloat(rightBuildingNumber));
                    }
               }if(leftJtrim!=undefined && newParams.add_left_lean==true && const_var.leanGetDataLeftComparision!="" && const_var.leanGetDataLeftComparision.jtrim.length>0 && isJtrimEndPriceLeftLean==true)
               {
                    if(isJtrimEndPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(leftJtrim.cost) * parseFloat(leftBuildingNumber));
                    }else{
                        jtrimPrice = parseFloat(jtrimPrice) +  (parseFloat(leftJtrim.cost) * parseFloat(leftBuildingNumber));
                    }
               }if((frontJtrim!=undefined && newParams.add_front_lean==true && const_var.leanGetDataFrontComparision!="" && const_var.leanGetDataFrontComparision.jtrim.length>0 && isJtrimEndPriceFrontLean==true)){

                        if (isJtrimEndPriceCenter==true) {
                            jtrimPrice = parseFloat(jtrimPrice) +  (parseFloat(frontJtrim.cost) * parseFloat(frontBuildingNumber));
                        } else {
                            jtrimPrice = parseFloat(jtrimPrice) +  (parseFloat(frontJtrim.cost) * parseFloat(frontBuildingNumber));
                        }
               }if ((backJtrim!=undefined && newParams.add_back_lean==true && const_var.leanGetDataBackComparision!="" && const_var.leanGetDataBackComparision.jtrim.length>0 && isJtrimEndPriceBackLean==true)){

                    if (isJtrimEndPriceCenter==true) {
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(backJtrim.cost) * parseFloat(backBuildingNumber));
                    } else {
                        jtrimPrice = parseFloat(jtrimPrice) +  (parseFloat(backJtrim.cost) * parseFloat(backBuildingNumber));
                    }
                }
               
               extra_items.push({'item_name':'End Jtrim','item_quantity':(newParams.p_j_t_end==true)?1:0,'item_price':jtrimPrice});
               t_c = parseFloat(t_c) + parseFloat(jtrimPrice);
           }else {
                newParams.p_j_t_end = false;
            }
        }
        // console.log(t_c ,"t_c 2333");

        if(newParams.p_j_t==true  && data.jtrim.length>0 )
        {
            let isJtrim = false;
            let isJtrimPriceCenter = false;
            let isJtrimPriceFrontLean = false;
            let isJtrimPriceLeftLean = false;
            let isJtrimPriceRightLean = false;
            let isJtrimPriceBackLean = false;
            let centerBuildingNumber = 1;
              if(newParams.p_l_w!=="Close" && newParams.p_l_w!=="Open" )
              {
                    isJtrim = true;
                    isJtrimPriceCenter = true;
                  centerBuildingNumber = (newParams.p_r_w!=="Close" )?2:1;
              
              }else
              {
                centerBuildingNumber = 1;
              }
              if(newParams.p_r_w!=="Close" && newParams.p_r_w!=="Open" )
              {
                    isJtrim = true;
                    isJtrimPriceCenter = true;
                  centerBuildingNumber = (newParams.p_l_w!=="Close" && newParams.p_l_w!=="Open" )?2:1;
              
              }else
              {
                centerBuildingNumber = 1;
              }
              if(newParams.p_c_p_l==true && newParams.p_l_w=="Open")
              {
                    isJtrim = true;
                    isJtrimPriceCenter = true;
                    centerBuildingNumber =(newParams.p_c_p_r==true || (newParams.p_r_w!=="Close" && newParams.p_r_w!=="Open" ))? 2:centerBuildingNumber;
              }
              if(newParams.p_c_p_r==true && newParams.p_r_w=="Open")
              {
                    isJtrim = true;
                    isJtrimPriceCenter = true;
                    centerBuildingNumber =(newParams.p_c_p_l==true || (newParams.p_l_w!=="Close" && newParams.p_l_w!=="Open" ))? 2:centerBuildingNumber;
              }
              if(newParams.p_b_c_b_f_l!=="Close" && newParams.p_b_c_b_f_l!=="Open" && newParams.b_h_t2 )
              {
                 isJtrim = true;
                 isJtrimPriceFrontLean = true;
              }
              if(newParams.p_b_c_b_l!=="Close" && newParams.p_b_c_b_l!=="Open" && newParams.b_h_t2 )
              {
                 isJtrim = true;
                 isJtrimPriceLeftLean = true;
              }
              if(newParams.p_b_c_b_r!=="Close" && newParams.p_b_c_b_r!=="Open" )
              {
                 isJtrim = true;
                 isJtrimPriceRightLean = true;
              }
              if(newParams.p_b_c_b_b_l!=="Close" && newParams.p_b_c_b_b_l!=="Open" && newParams.b_h_t2 )
              {
                 isJtrim = true;
                 isJtrimPriceBackLean = true;
              }
              if(isJtrim!=true)
              {
                newParams.p_j_t = false;
              }
            var jtrimPrice = 0;
            
            let JtrimVal = 0;
            if(newParams.p_j_t==true)
            {
                JtrimVal = 1;
            }
            if(newParams.p_j_t==true)
            {
                let sideJtrimP = data.jtrim.find(data=>data.type=="side");
                if(isJtrimPriceCenter==true && sideJtrimP !== undefined)
                {   
                    let newCutPanelJtrim_Price = 0;
                    if(newParams.p_c_p_l==true || newParams.p_c_p_r ==true)
                    {
                        newCutPanelJtrim_Price = (sideJtrimP.cut_panel_jtrim!=undefined)?sideJtrimP.cut_panel_jtrim:0;
                    }
                    jtrimPrice = parseFloat(jtrimPrice) + ((parseFloat(sideJtrimP.cost)+ parseFloat(newCutPanelJtrim_Price))* parseFloat(centerBuildingNumber));
                }else
                {
                    jtrimPrice = parseFloat(jtrimPrice) + 0;
                }
               if(
                (newParams.add_right_lean==true && const_var.leanGetDataRightComparision!="" && const_var.leanGetDataRightComparision.jtrim.length>0 && isJtrimPriceRightLean==true) 
                && (newParams.add_left_lean==true && const_var.leanGetDataLeftComparision!="" && const_var.leanGetDataLeftComparision.jtrim.length>0 && isJtrimPriceLeftLean==true)
                && (newParams.add_front_lean==true && const_var.leanGetDataFrontComparision!="" && const_var.leanGetDataFrontComparision.jtrim.length>0 && isJtrimPriceFrontLean==true)
                && (newParams.add_back_lean==true && const_var.leanGetDataBackComparision!="" && const_var.leanGetDataBackComparision.jtrim.length>0 && isJtrimPriceBackLean==true)
                )
               {
                    if(isJtrimPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + parseFloat(const_var.leanGetDataLeftComparision.jtrim[0].cost) + parseFloat(const_var.leanGetDataRightComparision.jtrim[0].cost)
                         + parseFloat(const_var.leanGetDataFrontComparision.jtrim[0].cost)+ parseFloat(const_var.leanGetDataBackComparision.jtrim[0].cost);
                    }else{
                        jtrimPrice = parseFloat(jtrimPrice) + parseFloat(const_var.leanGetDataLeftComparision.jtrim[0].cost)
                         + parseFloat(const_var.leanGetDataRightComparision.jtrim[0].cost)
                         + parseFloat(const_var.leanGetDataFrontComparision.jtrim[0].cost) 
                         + parseFloat(const_var.leanGetDataBackComparision.jtrim[0].cost);
                    }
               }if(newParams.add_right_lean==true && const_var.leanGetDataRightComparision!="" && const_var.leanGetDataRightComparision.jtrim.length>0 && isJtrimPriceRightLean==true)
               {
                    if(isJtrimPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) +  parseFloat(const_var.leanGetDataRightComparision.jtrim[0].cost);
                    }else
                    {
                        jtrimPrice = parseFloat(jtrimPrice) +  parseFloat(const_var.leanGetDataRightComparision.jtrim[0].cost);
                    }
               }if(newParams.add_left_lean==true && const_var.leanGetDataLeftComparision!="" && const_var.leanGetDataLeftComparision.jtrim.length>0 && isJtrimPriceLeftLean==true)
               {
                    if(isJtrimPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) +  parseFloat(const_var.leanGetDataLeftComparision.jtrim[0].cost);
                    }else
                    {
                        jtrimPrice = parseFloat(jtrimPrice)  + parseFloat(const_var.leanGetDataLeftComparision.jtrim[0].cost);
                    }
               } if (newParams.add_front_lean==true && const_var.leanGetDataFrontComparision!="" && const_var.leanGetDataFrontComparision.jtrim.length>0 && isJtrimPriceFrontLean==true){
                    if (  isJtrimPriceCenter==true ){
                        jtrimPrice = parseFloat(jtrimPrice) + parseFloat(const_var.leanGetDataFrontComparision.jtrim[0].cost);
                    } else {
                        jtrimPrice = parseFloat(jtrimPrice)  + parseFloat(const_var.leanGetDataFrontComparision.jtrim[0].cost);
                    }
               } if (newParams.add_back_lean==true && const_var.leanGetDataBackComparision!="" && const_var.leanGetDataBackComparision.jtrim.length>0 && isJtrimPriceBackLean==true) {
                    if ( isJtrimPriceCenter==true )
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + parseFloat(const_var.leanGetDataBackComparision.jtrim[0].cost);
                    }else {
                        jtrimPrice = parseFloat(jtrimPrice)  + parseFloat(const_var.leanGetDataBackComparision.jtrim[0].cost);
                    }
               }
               extra_items.push({'item_name':'Jtrim','item_quantity':(newParams.p_j_t==true)?1:0,'item_price':jtrimPrice});
               t_c = parseFloat(t_c) + parseFloat(jtrimPrice);
           }
        } else {
            newParams.p_j_t = false;
        }
        // console.log(t_c ,"t_c 44");

        if(newParams.p_e_b!=0)
        {
          var bowsPrice = (data.bows[0].cost * newParams.p_e_b);  
          extra_items.push({'item_name':'Extra Bows','item_quantity':parseInt(newParams.p_e_b),'item_price':bowsPrice});
          t_c = parseFloat(t_c) + parseFloat(bowsPrice);
        }
        // if(newParams.fourth_center_cost==true)
        // {
        //     var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_length_changed!=true))?const_var.UpdatedPriceData['elements']['Four Feet Center'].item_price:data.addons[0].fourth_center_cost; 
        //     extra_items.push({'item_name':'Four Feet Center','item_quantity':(newParams.fourth_center_cost==true)?1:0,'item_price':extPrice});
        //     t_c = t_c + extPrice;
        // }
        if(newParams.risk_cost==true)
        {
            var extPrice = data.addons[0].risk_cost; 
            extra_items.push({'item_name':'Risk Cost','item_quantity':(newParams.risk_cost==true)?1:0,'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(newParams.p_s_c_b==true && ( data.side_cross_bracing.length > 0 && data.side_cross_bracing!=undefined && data.side_cross_bracing[0].is_default == 'yes'))
        {
            var extPrice = data.side_cross_bracing[0].cost;  
            extra_items.push({'item_name':'Side Cross Bracing','item_quantity':(newParams.p_s_c_b==true)?1:0,'item_price':extPrice});
            t_c = parseFloat(t_c) + parseFloat(extPrice);
        }
        if(newParams.p_e_c_b==true)
        {
            if((data.addons_width) && data.addons_width.length>0 && data.addons_width[0].end_cross_bracing!=undefined && data.addons_width[0].end_cross_bracing!=0)
            {
                var extPrice = data.addons_width[0].end_cross_bracing;  
                extra_items.push({'item_name':'End Cross Bracing','item_quantity':(newParams.p_e_c_b==true)?1:0,'item_price':extPrice});
                t_c = parseFloat(t_c) + parseFloat(extPrice);
            }if((data.end_cross_bracing!=undefined) && data.end_cross_bracing.length>0  && data.end_cross_bracing[0].is_default == 'yes')
            {
                var extPrice = data.end_cross_bracing[0].cost;  
                extra_items.push({'item_name':'End Cross Bracing','item_quantity':(newParams.p_e_c_b==true)?1:0,'item_price':extPrice});
                t_c = parseFloat(t_c) + parseFloat(extPrice);
            }
            
        }
        if(newParams.p_g_c==true)
        {
            var extPrice = data.addons[0].ground_certificate; 
            extra_items.push({'item_name':'Ground Certification','item_quantity':(newParams.p_g_c==true)?1:0,'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(newParams.p_o_p==true)
        {
            var extPrice = data.addons[0].overhang; 
            extra_items.push({'item_name':'Overhang','item_quantity':(newParams.p_o_p==true)?1:0,'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(newParams.p_p_b!=0)
        {
            var extPrice = (data.addons_width[0].peak_braces*parseInt(newParams.p_p_b));  
            extra_items.push({'item_name':'Peak Braces','item_quantity':parseInt(newParams.p_p_b),'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(newParams.cert_pac_cost==true)
        {
            var extPrice = data.addons[0].cert_pac_cost; 
            extra_items.push({'item_name':'Certificate Cost','item_quantity':(newParams.cert_pac_cost==true)?1:0,'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(newParams.p_e_t!=0)
        {
            var extPrice = (data.trusses[0].cost * newParams.p_e_t); 
            extra_items.push({'item_name':'Extra Truss','item_quantity':newParams.p_e_t,'item_price':extPrice});
            t_c = t_c + extPrice;
        }if(newParams.p_t_u!=0)
        {
            var extPrice = newParams.p_t_u; 
            extra_items.push({'item_name':'Truss Upgrade','item_quantity':1,'item_price':(newParams.p_t_u!=0)?(newParams.p_t_u):0});
            t_c = t_c + extPrice;
        }if(newParams.p_b_p==true)
        {
            var extPrice = (data.braces[0].cost); 
            extra_items.push({'item_name':'Bracing Price','item_quantity':(newParams.p_b_p==true)?1:0,'item_price':extPrice});
            t_c = t_c + extPrice;
        }if(newParams.p_b_p_feet!="Select")
        {
            var extPrice = (newParams.p_b_p_feet * newParams.p_b_p_feetVal); 
            extra_items.push({'item_name':'Addition Bracing Price','item_quantity':newParams.p_b_p_feetVal,'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        // console.log(t_c ,"t_c 555");

        if(data.delux_two_tone.length>0 && Math.abs(data.delux_two_tone[0].cost)==0 && newParams.p_w_c_n==true)
        {
            
                var waniscotPrice = 0;
                var conditionPrice = 0;
                var leanwaniscotPriceL = 0;
                var leanwaniscotPriceR = 0;
                var leanwaniscotPriceB = 0, leanwaniscotPriceF = 0;
                let sideWall = 2, endWall = 2;
                let utilityleanwaniscotPriceL,utilityleanwaniscotPriceR,utilityleanwaniscotPriceF,utilityleanwaniscotPriceB = 0;

                if(newParams.add_right_lean==true && const_var.leanGetDataRightComparision!="")
                {
                    leanwaniscotPriceR = const_var.leanGetDataRightComparision.delux_two_tone[0];

                    if (newParams.add_storage_check_right) {
                        utilityleanwaniscotPriceR = (const_var.leanGetDataRightComparision.utility_delux_two_tone!=undefined)?const_var.leanGetDataRightComparision.utility_delux_two_tone[0]:const_var.leanGetDataRightComparision.delux_two_tone[0];
                    }
                }if(newParams.add_left_lean==true && const_var.leanGetDataLeftComparision!="")
                {
                    // console.log(const_var.leanGetDataLeftComparision ,"leanwaniscotPriceL" ,const_var.leanGetDataLeftComparision.delux_two_tone);
                    leanwaniscotPriceL = const_var.leanGetDataLeftComparision.delux_two_tone[0];
                    if (newParams.add_storage_check) {
                        utilityleanwaniscotPriceL = (const_var.leanGetDataLeftComparision.utility_delux_two_tone!=undefined)?const_var.leanGetDataLeftComparision.utility_delux_two_tone[0]:const_var.leanGetDataLeftComparision.delux_two_tone[0];
                    // console.log({utilityleanwaniscotPriceL});
                    }
                }if ( newParams.add_front_lean==true && const_var.leanGetDataFrontComparision!="" ) {
                    leanwaniscotPriceF = const_var.leanGetDataFrontComparision.delux_two_tone[0];
                    if (newParams.add_storage_check_front) {
                        utilityleanwaniscotPriceF = (const_var.leanGetDataFrontComparision.utility_delux_two_tone)?const_var.leanGetDataFrontComparision.utility_delux_two_tone[0]:const_var.leanGetDataFrontComparision.delux_two_tone[0];
                    }
                }
                if ( newParams.add_back_lean==true && const_var.leanGetDataBackComparision!="" ) {
                    leanwaniscotPriceB = const_var.leanGetDataBackComparision.delux_two_tone[0];
                    if (newParams.add_storage_check_back) {
                        utilityleanwaniscotPriceB = (const_var.leanGetDataBackComparision.utility_delux_two_tone!=undefined)?const_var.leanGetDataBackComparision.utility_delux_two_tone[0]:const_var.leanGetDataBackComparision.delux_two_tone[0];
                    }
                }
                if(data.delux_two_tone.length > 0)
                {
                    conditionPrice = data.delux_two_tone[0];
                }
                let utilityConditionPrice = 0,frontUtlityData = [];
                if ( newParams.p_u_c==true || newParams.cB_addStorage_check_left==true || newParams.cB_addStorage_check_right==true ){
                    utilityConditionPrice = (data.utility_delux_two_tone!=undefined && data.utility_delux_two_tone.length>0)?data.utility_delux_two_tone[0]:data.delux_two_tone[0];
                }
                if (newParams.cB_addStorage_check_front){
                    frontUtlityData = (data.front_utility_delux_two_tone!=undefined && data.front_utility_delux_two_tone.length>0)?data.front_utility_delux_two_tone[0]:data.delux_two_tone[0];
                }
                if ( newParams.add_front_lean==true && leanwaniscotPriceF!=0) {
                    if(newParams.p_b_c_b_f_f =="Close" && newParams.p_w_c_n == true)
                    {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice +Math.abs(leanwaniscotPriceF.on_end_vertical):waniscotPrice +Math.abs(leanwaniscotPriceF.on_end_horizontal);
                    }
                    if(newParams.p_b_c_b_f_b =="Close" && newParams.p_w_c_n == true && newParams.add_storage_check_front==false)
                    {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceF.on_end_vertical):waniscotPrice + Math.abs(leanwaniscotPriceF.on_end_horizontal);
                    }
                    if(newParams.p_b_c_b_f_l =="Close" && newParams.p_w_c_n == true)
                    {
                      waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceF.on_side_vertical):waniscotPrice + Math.abs(leanwaniscotPriceF.on_side_horizontal);
                    }
                    if(utilityleanwaniscotPriceF!=undefined && newParams.add_storage_check_front ==true && newParams.p_w_c_n == true && newParams.p_b_c_b_f_l!="Close")
                    {
                     waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceF.on_side_vertical))+Math.abs((utilityleanwaniscotPriceF.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceF.on_side_horizontal))+Math.abs((utilityleanwaniscotPriceF.on_end_horizontal *2)));
                    }if(utilityleanwaniscotPriceF!=undefined && newParams.add_storage_check_front ==true && newParams.p_w_c_n == true && newParams.p_b_c_b_f_l =="Close")
                    {
                      waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceF.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceF.on_end_horizontal *2)));
                    }
                }
                if(newParams.add_left_lean==true && leanwaniscotPriceL!=0)
                {
                    if(newParams.p_b_c_b_l_f =="Close" && newParams.p_w_c_n == true)
                    {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice +Math.abs(leanwaniscotPriceL.on_end_vertical):waniscotPrice +Math.abs(leanwaniscotPriceL.on_end_horizontal);
                    }
                    if(newParams.p_b_c_b_l_b =="Close" && newParams.p_w_c_n == true  && newParams.add_storage_check==false)
                    {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceL.on_end_vertical):waniscotPrice + Math.abs(leanwaniscotPriceL.on_end_horizontal);
                    }
                    if(newParams.p_b_c_b_l =="Close" && newParams.p_w_c_n == true)
                    {
                        // console.log({leanwaniscotPriceL});
                      waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceL.on_side_vertical):waniscotPrice + Math.abs(leanwaniscotPriceL.on_side_horizontal);
                    }
                    if ( utilityleanwaniscotPriceL!=undefined && newParams.add_storage_check ==true && newParams.p_w_c_n == true && newParams.p_b_c_b_l !="Close" ) {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceL.on_side_vertical))+Math.abs((utilityleanwaniscotPriceL.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceL.on_side_horizontal))+Math.abs((utilityleanwaniscotPriceL.on_end_horizontal *2)));
                    } 
                    if ( utilityleanwaniscotPriceL!=undefined && newParams.add_storage_check ==true && newParams.p_w_c_n == true && newParams.p_b_c_b_l =="Close" ) {
                       waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceL.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceL.on_end_horizontal *2)));
                    }
                    
                }if(newParams.add_right_lean==true && leanwaniscotPriceR!=0)
                {
                    if(newParams.p_b_c_b_r_f =="Close" && newParams.p_w_c_n == true)
                    {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice +Math.abs(leanwaniscotPriceR.on_end_vertical):waniscotPrice +Math.abs(leanwaniscotPriceR.on_end_horizontal);
                    }
                    if(newParams.p_b_c_b_r_b =="Close" && newParams.p_w_c_n == true  && newParams.add_storage_check_right ==false)
                    {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceR.on_end_vertical):waniscotPrice + Math.abs(leanwaniscotPriceR.on_end_horizontal);
                    }
                    if(newParams.p_b_c_b_r =="Close" && newParams.p_w_c_n == true)
                    {
                      waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceR.on_side_vertical):waniscotPrice + Math.abs(leanwaniscotPriceR.on_side_horizontal);
                    }
                    if ( utilityleanwaniscotPriceR!=undefined && newParams.add_storage_check_right ==true && newParams.p_w_c_n == true && newParams.p_b_c_b_r !="Close" ) {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceR.on_side_vertical))+Math.abs((utilityleanwaniscotPriceR.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceR.on_side_horizontal))+Math.abs((utilityleanwaniscotPriceR.on_end_horizontal *2)));
                    } 
                    if ( utilityleanwaniscotPriceR!=undefined && newParams.add_storage_check_right ==true && newParams.p_w_c_n == true && newParams.p_b_c_b_r =="Close" ) {
                       waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceR.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceR.on_end_horizontal *2)));
                    }
                }if ( newParams.add_back_lean==true && leanwaniscotPriceB!=0 ) {
                    if(newParams.p_b_c_b_b_f =="Close" && newParams.p_w_c_n == true)
                    {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice +Math.abs(leanwaniscotPriceB.on_end_vertical):waniscotPrice +Math.abs(leanwaniscotPriceB.on_end_horizontal);
                    }
                    if(newParams.p_b_c_b_b_b =="Close" && newParams.p_w_c_n == true && newParams.add_storage_check_back==false)
                    {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceB.on_end_vertical):waniscotPrice + Math.abs(leanwaniscotPriceB.on_end_horizontal);
                    }
                    if(newParams.p_b_c_b_b_l =="Close" && newParams.p_w_c_n == true)
                    {
                      waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceB.on_side_vertical):waniscotPrice + Math.abs(leanwaniscotPriceB.on_side_horizontal);
                    }
                    if(utilityleanwaniscotPriceB!=undefined && newParams.add_storage_check_back ==true && newParams.p_w_c_n == true && newParams.p_b_c_b_b_l !="Close") 
                    {
                     waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceB.on_side_vertical))+Math.abs((utilityleanwaniscotPriceB.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceB.on_side_horizontal))+Math.abs((utilityleanwaniscotPriceB.on_end_horizontal *2)));
                    }if(utilityleanwaniscotPriceB!=undefined && newParams.add_storage_check_back ==true && newParams.p_w_c_n == true && newParams.p_b_c_b_b_l =="Close")
                    {
                      waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceB.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceB.on_end_horizontal *2)));
                    }
                    
                }
                    if(data.delux_two_tone.length > 0)
                    {
                        conditionPrice = data.delux_two_tone[0];
                    }else{
                        conditionPrice = data.delux_two_tone[0];
                    }
                    if(newParams.p_b_w =="Close" && newParams.p_w_c_n == true && newParams.p_u_c == false) {
                      endWall = 1;
                      waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(conditionPrice.on_end_vertical):waniscotPrice + Math.abs(conditionPrice.on_end_horizontal);
                    }
                    if(newParams.p_f_w =="Close" && newParams.p_w_c_n == true && !newParams.cB_addStorage_check_front)
                    {
                      endWall = 1;  
                      waniscotPrice =  ((newParams.p_v_w==true))?waniscotPrice + Math.abs(conditionPrice.on_end_vertical):waniscotPrice + Math.abs(conditionPrice.on_end_horizontal);
                    }
                    if ( newParams.p_f_w=="Close" && newParams.p_u_c==true && !newParams.cB_addStorage_check_front ) {
                        endWall = 2;
                    }
                    if (newParams.p_f_w=="Close" && newParams.p_b_w=="Close" && newParams.p_u_c!=true) {
                        endWall = 0;
                    }
                    if(newParams.p_r_w =="Close" && newParams.p_w_c_n == true && params.cB_addStorage_check_right==false)
                    {
                      sideWall = 1;
                      waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(conditionPrice.on_side_vertical):waniscotPrice + Math.abs(conditionPrice.on_side_horizontal);
                    }
                    if(newParams.p_l_w =="Close" && newParams.p_w_c_n == true  && params.cB_addStorage_check_left==false)
                    {
                      sideWall = 1; 
                      waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(conditionPrice.on_side_vertical):waniscotPrice + Math.abs(conditionPrice.on_side_horizontal);
                    }
                    if ( newParams.p_l_w=="Close" && newParams.p_r_w=="Close" && (newParams.cB_addStorage_check_right!=true || newParams.cB_addStorage_check_left!=true)) {
                        sideWall = 0;
                    }
                    if ( newParams.p_r_w=="Close" && newParams.cB_addStorage_check_left==true) {
                        sideWall = 2;
                    }
                    if ( newParams.p_l_w=="Close" && newParams.cB_addStorage_check_right==true) {
                        sideWall = 2;
                    }
                    
                
                if ((newParams.p_u_c==true || newParams.cB_addStorage_check_left==true || newParams.cB_addStorage_check_right==true)){
                    if ( sideWall!=0 ) {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(utilityConditionPrice.on_side_vertical * sideWall):waniscotPrice + Math.abs(utilityConditionPrice.on_side_horizontal * sideWall);
                    }
                    if ( endWall!=0 ) {
                        waniscotPrice = ((newParams.p_v_w==true))?waniscotPrice + Math.abs(utilityConditionPrice.on_end_vertical * endWall):waniscotPrice + Math.abs(utilityConditionPrice.on_end_horizontal * endWall);
                    }
                }
                if (newParams.cB_addStorage_check_front){
                    waniscotPrice = (newParams.p_v_w==true) ? waniscotPrice + parseFloat(frontUtlityData.on_end_vertical * 2 ) + parseFloat(frontUtlityData.on_side_vertical * 2) : waniscotPrice  + parseFloat(frontUtlityData.on_end_horizontal * 2 ) + parseFloat(frontUtlityData.on_side_horizontal * 2);
                }
                
                post_data['building'].wainscot_price = (waniscotPrice % 1 == 0) ? waniscotPrice : waniscotPrice.toFixed(2);
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].wainscot_price);
        }else{
            t_c = (newParams.p_w_c_n==true && (newParams.p_v_w==true ) && ((newParams.p_b_w=="Close" && newParams.p_l_w=="Close" && newParams.p_r_w=="Close" && newParams.p_f_w=="Close") || (newParams.p_u_c==true)))?(data.delux_two_tone.length>0 && data.delux_two_tone!=undefined)?parseFloat(t_c) + parseFloat(data.delux_two_tone[0].cost):parseFloat(t_c) +0:parseFloat(t_c) + 0;
            post_data['building'].wainscot_price = (newParams.p_w_c_n==true && (newParams.p_v_w==true ) && ((newParams.p_b_w=="Close" && newParams.p_l_w=="Close" && newParams.p_r_w=="Close" && newParams.p_f_w=="Close") || (newParams.p_u_c==true)))?(data.delux_two_tone.length>0 && data.delux_two_tone!=undefined)?data.delux_two_tone[0].cost:0: 0;
        }
        if(newParams.p_w_c_n)
        {    
            
            post_data['building'].wainscot_type ="full-building";
            post_data['building'].wainscot_side = "both";
            post_data['building'].wainscot_end = "both";
            post_data['building'].wainscot = const_var.c_m_a_Colors[newParams.p_w_c_c_id];
            
        }

        // console.log(t_c ,"t_c 666");
        let defualtBuildingData = const_var.ComparisionDataArray[iiD].building_data.default_building.filter( building => params.building_type_name.includes(building.name) )[0]; 
        
        let defualtBuildingWallColorId = defualtBuildingData != undefined ? defualtBuildingData.wall_color : const_var.ComparisionDataArray[iiD].building_data.color[0] ;
        let defualtBuildingRoofColorId = defualtBuildingData != undefined ? defualtBuildingData.roof_color : const_var.ComparisionDataArray[iiD].building_data.color[0] ;
        let defualtBuildingTrimColorId = defualtBuildingData != undefined ? defualtBuildingData.trim_color : const_var.ComparisionDataArray[iiD].building_data.color[0] ;
        

        let WallColorObj = (const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.name==params.p_w_c_name)[0]!=undefined) 
        ? const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.name == params.p_w_c_name)[0]
        : (defualtBuildingWallColorId !== undefined && const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.id==defualtBuildingWallColorId)[0]!= undefined) ? const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.id==defualtBuildingWallColorId)[0]:const_var.ComparisionDataArray[iiD].building_data.color[0];

        let RoofColorObj = (const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.name==params.p_r_c_name)[0]!=undefined)
        ? const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.name==params.p_r_c_name)[0]
        : (defualtBuildingRoofColorId !== undefined && const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.id==defualtBuildingRoofColorId)[0]!= undefined) ? const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.id==defualtBuildingRoofColorId)[0]:const_var.ComparisionDataArray[iiD].building_data.color[0];

        let TrimColorObj = (const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.name==params.p_t_c_name)[0]!=undefined)
        ? const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.name==params.p_t_c_name)[0]
        : (defualtBuildingTrimColorId !== undefined && const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.id==defualtBuildingTrimColorId)[0]!= undefined) ? const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.id==defualtBuildingTrimColorId)[0]:const_var.ComparisionDataArray[iiD].building_data.color[0];
       
        let WainscotColorObj = (const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.name==params.p_w_c_c_name)[0]!=undefined)
        ? const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.name==params.p_w_c_c_name)[0]
        : (defualtBuildingTrimColorId !== undefined && const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.id==defualtBuildingTrimColorId)[0]!= undefined) ? const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.id==defualtBuildingTrimColorId)[0]:const_var.ComparisionDataArray[iiD].building_data.color[0];

        // let WainscotColorObj = (const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.name==params.p_w_c_c_name)[0]!=undefined)?const_var.ComparisionDataArray[iiD].building_data.color.filter(data=>data.name==params.p_w_c_c_name)[0]:const_var.ComparisionDataArray[iiD].building_data.color[0];
        newParams.p_r_c_id = RoofColorObj.id;
        newParams.p_w_c_id = WallColorObj.id;
        newParams.p_t_c_id = TrimColorObj.id;
        newParams.p_w_c_c_id = WainscotColorObj.id;

        post_data['building'].wall_color = WallColorObj;
        post_data['building'].roof_color = RoofColorObj;
        post_data['building'].trim_color = TrimColorObj;
        post_data['building'].wainscot = WainscotColorObj;
        post_data['building'].garageDoorColor = const_var.garageDoorColor[newParams.g_d_c_id];

        post_data['building'].roof_color_price = 0;
        post_data['building'].wall_color_price = 0;
        post_data['building'].trim_color_price = 0;
        post_data['building'].wainscot_color_price = 0;
        //post_data['building'].garageDoor_color_price = 0;
        let newEntryPoint = JSON.parse(JSON.stringify(const_var.post_data['building'].entry_points));
        if(const_var.post_data['building'].entry_points.length>0)
        {
            // console.log( newEntryPoint,"newEntryPoint",const_var.CustomDoorArrForOtherBtype[iiD],"const_var.CustomDoorArrForOtherBtype[iiD]",const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'],"['selectedIndex']")
            let dataPriceC = 0;
            const_var.post_data['building'].entry_points.map((value,key)=>{
                
                if(value.entry_type=="garage_door"){
                    // console.log(const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].cost ,"selectedIndex",const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key] );
                    if(const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]!=undefined)
                    {
                    newEntryPoint[key].name = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].name;
                    newEntryPoint[key].entry_size = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key];
                    newEntryPoint[key].entry_price = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].cost;
                    newEntryPoint[key].entry_price = ( value.entry_location.includes("side") || value.entry_location == "rfend" || value.entry_location == "lfend" ) ? const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].side_cost + const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].cost : const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].cost;
                    
                    newEntryPoint[key].entry_position = { 'x': value.entry_position.x, 'y': ((newEntryPoint[key].name.split("x")[1]-0.08) / 2), 'z': value.entry_position.z };
                    newEntryPoint[key].entry_dimension_width = newEntryPoint[key].name.split("x")[0];
                    newEntryPoint[key].entry_dimension_height = newEntryPoint[key].name.split("x")[1];
                    newEntryPoint[key].parent_array_key = 'Garage';
                    newEntryPoint[key].child_array_key = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_type;
                    newEntryPoint[key].nested_array_key = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_category;
                    newEntryPoint[key].component_name = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_type;
                    newEntryPoint[key].garage_door_color = "0xffffff";
                    if(const_var.ComparisionDataArray[iiD].colorObj!=undefined)
                    {
                        let colorObject =  const_var.ComparisionDataArray[iiD].colorObj.filter(data=> (data.hex_value == "#ffffff" || data.hex_value == "#FFFFFF"))[0];
                        if(colorObject==undefined)
                        {
                            colorObject = const_var.ComparisionDataArray[iiD].colorObj[0];
                        }
                        newParams.g_d_c_name = colorObject != undefined && colorObject.name;
                        newParams.g_d_c_id = colorObject != undefined && colorObject.id;
                        newParams.g_d_c = colorObject != undefined && colorObject.hex_value.replace('#', '0x');

                        newEntryPoint[key].entry_garageDoor_color_Obj = colorObject;
                        newEntryPoint[key].entry_garageDoor_color_price = colorObject.cost;
                        newEntryPoint[key].garage_door_color = colorObject.hex_value.replace('#', '0x');
                    }
                    if(const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]!=undefined && const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].is_chain_hoist!=0)
                    {
                        newEntryPoint[key].entry_chain_hoist_price = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].chain_hoist;
                        newEntryPoint[key].entry_is_chain_hoist = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].is_chain_hoist==2?true:false;
                        newEntryPoint[key].entry_chain_hoist = newEntryPoint[key].entry_is_chain_hoist;

                    }
                    if(value.entry_certified==true && const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]!=undefined)
                    {
                       newEntryPoint[key].entry_price = newEntryPoint[key].entry_price + const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].certified_cost;
                       newEntryPoint[key].entry_certified_price = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].certified_cost;
                       newEntryPoint[key].isCertified = "";
                       if (const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].is_certified == 0){
                           newEntryPoint[key].isCertified = "NA";
                           newEntryPoint[key].entry_is_certified = false;
                           newEntryPoint[key].entry_certified = false;
                       }

                       
                    }

                    if(value.entry_insulated==true && const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]!=undefined)
                    {
                        if (!const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_add_ons 
                        || const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_add_ons.filter((e) => e.door == "insulated").length == 0) {
                            newEntryPoint[key].entry_is_insulated = false;
                            newEntryPoint[key].entry_insulated = false;
                        } else {
                            const insulated = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_add_ons.filter((e) => e.door == "insulated");
                            if (insulated.length > 0) {
                                newEntryPoint[key].entry_price = Number(newEntryPoint[key].entry_price) + Number(insulated[0].category[0].cost);
                                newEntryPoint[key].entry_insulated_price = insulated[0].category[0].cost;
                            }
                        }
                
                    }

                    if(const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]!=undefined &&  const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_add_ons) {
                        const addOnOptions = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_add_ons.filter((i) => i.door == "add_on_options");                        
                        Object.keys(value).map((e) => {
                            if (e.includes("add_on_options") && !e.includes("_is") && !e.includes("_price"))  {
                                if (addOnOptions.length > 0 && addOnOptions[0].category) { 
                                    let is = false;
                                    addOnOptions[0].category.forEach((opt) => {
                                        if (opt.category && `entry_${opt.category.split(' ').join('_').toLowerCase()}_add_on_options` == e) {
                                            is = true;
                                            newEntryPoint[key][e + '_price'] = opt.cost;
                                        } 
                                    } )   
                                
                                    if (is == false) {
                                        newEntryPoint[key][e] = false;
                                        const arr = e.split("_");
                                        arr.splice(1, 0, "is");
                                        if (newEntryPoint[key][arr.join("_")]) newEntryPoint[key][arr.join("_")] = false;
                                    }
                                } else {
                                    newEntryPoint[key][e] = false;
                                    const arr = e.split("_");
                                    arr.splice(1, 0, "is");
                                    if (newEntryPoint[key][arr.join("_")]) newEntryPoint[key][arr.join("_")] = false;
                                }                      
                            }
                        })        
                       
                    }
                    // console.log(t_c ,"newEntryPoint[key].entry_pric",newEntryPoint[key].entry_price );
                    t_c = parseFloat(t_c) +parseFloat(newEntryPoint[key].entry_price);
                    }
                }
                if(value.entry_type=="garage_door_frameout" && !value.is_breezeway_frameout){
                    if(const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]!=undefined)
                    {
                        newEntryPoint[key].name = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key][0];
                        if(value.entry_doorNewType!=undefined)
                        {
                            newEntryPoint[key].entry_doorNewType = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key][1];
                        }
                        newEntryPoint[key].entry_dimension_height = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key][0].split("x")[1];
                        newEntryPoint[key].entry_dimension_width = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key][0].split("x")[0];
         
                        newEntryPoint[key].entry_size = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key][1];
                        newEntryPoint[key].entry_size.name = "Custom";

                        newEntryPoint[key].entry_position = { 'x': value.entry_position.x, 'y': ((newEntryPoint[key].name.split("x")[1]-0.08) / 2), 'z': value.entry_position.z };
                        newEntryPoint[key].entry_dimension_width = newEntryPoint[key].name.split("x")[0];
                        newEntryPoint[key].entry_dimension_height = newEntryPoint[key].name.split("x")[1];

                        if (value.entry_location.includes("side") && iiD.split("_")[0] == "122" && newEntryPoint[key].entry_dimension_width > 12) {
                            newEntryPoint[key].entry_dimension_width = '12';
                            newEntryPoint[key].name = '12x' + newEntryPoint[key].entry_dimension_height;
                        }
                        
                        newEntryPoint[key].parent_array_key = 'Garage_Frameout';
                        newEntryPoint[key].child_array_key = 'standard_door';
                        newEntryPoint[key].nested_array_key = 'Roll-Up';

                        newEntryPoint[key].entry_price = ( value.entry_location.includes("side") || value.entry_location == "rfend" || value.entry_location == "lfend")?const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key][1].side_wall_price:const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key][1].end_wall_price;
                        t_c = parseFloat(t_c) +parseFloat(newEntryPoint[key].entry_price);
                    }
                    // console.log(t_c , "entryPrice");
                    
                }
                // console.log(t_c ,"newEntryPoint[key].entry_price 11" );

                if(value.entry_type=="walkin" || value.entry_type == "walk_in_door" ){
                    if(const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]!=undefined)
                    {
                        newEntryPoint[key].name = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].name;
                        newEntryPoint[key].entry_size = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key];
                        newEntryPoint[key].entry_price = ( value.entry_location.includes("side") || value.entry_location == "rfend" || value.entry_location == "lfend")?const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].cost + const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].on_side_cost :const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].cost;

                        newEntryPoint[key].parent_array_key = 'Walk';
                        newEntryPoint[key].child_array_key = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_type;
                        newEntryPoint[key].nested_array_key = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_category;
                        newEntryPoint[key].component_name = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_type;

                        t_c = parseFloat(t_c) +parseFloat(newEntryPoint[key].entry_price);
                    }
                }
                if(value.entry_type=="walkin_frameout"){
                    if(const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]!=undefined)
                    {
                        newEntryPoint[key].name = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].name;
                        newEntryPoint[key].entry_size = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key];
                        newEntryPoint[key].entry_price = ( value.entry_location.includes("side") || value.entry_location == "rfend" || value.entry_location == "lfend")?const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].side_wall_price:const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].end_wall_price;
                        
                        newEntryPoint[key].parent_array_key = 'Walk_Frameout';
                        newEntryPoint[key].child_array_key = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_type;
                        newEntryPoint[key].nested_array_key = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_category;

                        t_c = parseFloat(t_c) +parseFloat(newEntryPoint[key].entry_price);
                    }
                }if(value.entry_type=="window"){
                    if(const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]!=undefined)
                    {
                        newEntryPoint[key].name = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].name;
                        newEntryPoint[key].entry_size = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key];
                        newEntryPoint[key].entry_price = ( value.entry_location.includes("side") || value.entry_location == "rfend" || value.entry_location == "lfend")? const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].cost + const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].on_side_cost:const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].cost;

                        newEntryPoint[key].parent_array_key = 'Windows';
                        newEntryPoint[key].child_array_key = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_type;
                        newEntryPoint[key].nested_array_key = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_category;
                        newEntryPoint[key].component_name = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_type;

                        t_c = parseFloat(t_c) +parseFloat(newEntryPoint[key].entry_price);
                    }
                }
                if(value.entry_type=="window_frameout"){
                    if(const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]!=undefined)
                    {
                        newEntryPoint[key].name = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].name;
                        newEntryPoint[key].entry_size = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key];

                        newEntryPoint[key].parent_array_key = 'Windows_Frameout';
                        newEntryPoint[key].child_array_key = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_type;
                        newEntryPoint[key].nested_array_key = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].door_category;

                        //newEntryPoint[key].entry_price = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].cost;
                        newEntryPoint[key].entry_price = ( value.entry_location.includes("side") || value.entry_location == "rfend" || value.entry_location == "lfend")?const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].side_wall_price:const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].end_wall_price;
                        t_c = parseFloat(t_c) +parseFloat(newEntryPoint[key].entry_price);
                    }
                }
                
                // console.log(t_c ,"newEntryPoint[key].entry_pric 22" );
                dataPriceC =  0;
              if (!value.is_breezeway_frameout){
                if(value.entry_chain_hoist!=undefined && value.entry_chain_hoist==true) {
                     newEntryPoint[key].entry_chain_hoist_price = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].chain_hoist;
                    // t_c = parseFloat(t_c) + parseFloat(value.entry_chain_hoist_price);
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(newEntryPoint[key].entry_chain_hoist_price);
                    newEntryPoint[key].isChainHoist = "";
                    if (const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].is_chain_hoist == 0){
                        newEntryPoint[key].isChainHoist = "NA";
                        newEntryPoint[key].entry_is_chain_hoist = false;
                        newEntryPoint[key].entry_chain_hoist = false;
                    }

                } else {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }
                if(value.entry_is_header_seal!=undefined && value.entry_is_header_seal==true)
                {
                     newEntryPoint[key].entry_header_seal_price = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].header_seal;
                    // t_c = parseFloat(t_c) + parseFloat(value.entry_header_seal_price);
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(newEntryPoint[key].entry_header_seal_price);
                    newEntryPoint[key].isHeaderSeal = "";
                    if (const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].is_header_seal == 0){
                        newEntryPoint[key].isHeaderSeal = "NA";
                        newEntryPoint[key].entry_is_header_seal = false;
                        newEntryPoint[key].entry_header_seal = false;
                    }
                } else {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }
                if (value.entry_automatic_openers!=undefined && value.entry_automatic_openers==true) {
                     newEntryPoint[key].entry_automatic_openers_price = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].automatic_openers;
                    // t_c = parseFloat(t_c) + parseFloat(value.entry_automatic_openers_price);
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(newEntryPoint[key].entry_automatic_openers_price);
                    newEntryPoint[key].isAutomaticOpeners = "";
                    if (const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].is_automatic_openers == 0){
                        newEntryPoint[key].isAutomaticOpeners = "NA";
                        newEntryPoint[key].entry_is_automatic_openers = false;
                        newEntryPoint[key].entry_automatic_openers = false;
                    }
                } else {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }
                if(value.entry_trim_kit!=undefined && value.entry_trim_kit==true)
                {
                    if(value.entry_type=="garage_door")
                    {
                        newEntryPoint[key].entry_trim_kit_price =const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]["45_degree_angle"];
                        newEntryPoint[key].component_name = "standard_trim_door";
                    }
                    if(value.entry_type=="garage_door_frameout")
                    {
                        newEntryPoint[key].entry_trim_kit_price = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key][1].dutch_cost
                        newEntryPoint[key].component_name = "standard_trim_door";

                    }
                    newEntryPoint[key].is45DegreeAngle = "";
                    if (const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key]["is_45_degree_angle"] == 0){
                        newEntryPoint[key].is45DegreeAngle = "NA";
                        newEntryPoint[key].entry_is_automatic_openers = false;
                        newEntryPoint[key].entry_automatic_openers = false;
                    }
                    // t_c = parseFloat(t_c) + parseFloat(newEntryPoint[key].entry_trim_kit_price);
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(newEntryPoint[key].entry_trim_kit_price);
                } else {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }
                if(value.installation_is_end_wall!=undefined  && value.installation_is_end_wall !=="" && ( value.installation_is_end_wall=="yes" ||  value.installation_is_end_wall=="included")&& value.entry_location.includes("end") && value.entry_location != "rfend" && value.entry_location != "lfend" ){
                    if (const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].installation_is_end_wall == undefined){
                        newEntryPoint[key].isEndWallInstallationFee = "NA";
                        newEntryPoint[key].installation_is_end_wall = "no";
                    } else{
                        newEntryPoint[key].isEndWallInstallationFee = "";
                        newEntryPoint[key].installation_end_wall_fee = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].installation_end_wall_fee;
                        newEntryPoint[key].installation_is_end_wall = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].installation_is_end_wall;
                        dataPriceC =  parseFloat(dataPriceC) + parseFloat(newEntryPoint[key].installation_end_wall_fee);
                    }
                } else {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }
                if(value.installation_is_side_wall!=undefined  && value.installation_is_side_wall !==""  &&( value.installation_is_side_wall=="yes" ||  value.installation_is_side_wall=="included")&& value.entry_location.includes("side") || value.entry_location == "rfend" || value.entry_location == "lfend"){
                    if (const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].installation_is_side_wall == undefined){
                        newEntryPoint[key].isSideWallInstallationFee = "NA";
                        newEntryPoint[key].installation_is_side_wall = "no";
                    } else {
                        newEntryPoint[key].isSideWallInstallationFee = "";
                        newEntryPoint[key].installation_side_wall_fee = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].installation_side_wall_fee;
                        newEntryPoint[key].installation_is_side_wall = const_var.CustomDoorArrForOtherBtype[iiD]['selectedIndex'][key].installation_is_side_wall;
                        dataPriceC =  parseFloat(dataPriceC) + parseFloat(newEntryPoint[key].installation_side_wall_fee);

                    }
                } else {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }
                t_c = parseFloat(t_c) + parseFloat(dataPriceC);
                dataPriceC =  parseFloat(dataPriceC) + parseFloat((value.entry_garageDoor_color_price==undefined)?0:Number(value.entry_garageDoor_color_price));
             } 

            })
            // console.log(t_c,"dataPriceC",dataPriceC );
            t_c = parseFloat(t_c) + parseFloat(dataPriceC);
        } else {
           t_c = parseFloat(t_c) + parseFloat(0);
        }
        // console.log(t_c ,"t_c 777", newEntryPoint);

        post_data['building'].newEntryPoint =  newEntryPoint;
        t_c = (newParams.p_t_u!=0)?parseFloat(t_c) + Number(newParams.p_t_u):parseFloat(t_c) + parseFloat(0);
        
        // console.log(t_c ,"t_c 88");

        let calCulatePriceByDis = "";
        
        post_data['building'].leanto = JSON.parse(JSON.stringify(const_var.leantoCompare));
        var leantoPriceCalculation = {};
        let leanCertPrice = 0;
        let leanToTotalInsultaionPrice = 0;
        let WrapLength_for_liniear_feet_left = 0;
        let WrapLength_for_liniear_feet_right = 0;
        let WrapLength_for_liniear_feet_front = 0;
        let WrapLength_for_liniear_feet_back = 0;
        if(post_data['building'].leanto.length>0)
        {

            for(var i=0;i<=post_data['building'].leanto.length-1;i++)
            {
                let porchLength = 0;
                post_data['building'].leanto[i].porch = undefined;
                if(post_data['building'].leanto[i].leanto_type==1 )
                {
                  post_data['building'].leanto[i].total_length = newParams.lean_p_d;  
                  if(newParams.add_left_back_lean_porch==true && const_var.compare_leanto_condition_by_mfg.wrap_around == true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'left','length':newParams.lean_p_d+newParams.leanB_p_w,'cost':parseInt(post_data['building'].connection_fee_left_back),'wrap_with':['back']}
                      post_data['building'].leanto[i].total_length = newParams.lean_p_d+newParams.leanB_p_w;
                  }if(newParams.add_left_front_lean_porch==true && const_var.compare_leanto_condition_by_mfg.wrap_around == true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'left','length':newParams.lean_p_d+newParams.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_left_front),'wrap_with':['front']}
                      post_data['building'].leanto[i].total_length = newParams.lean_p_d+newParams.leanF_p_w;
                  }if(newParams.add_left_back_lean_porch==true && newParams.add_left_front_lean_porch==true && const_var.compare_leanto_condition_by_mfg.wrap_around == true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'left','length':newParams.lean_p_d+newParams.leanB_p_w+newParams.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_left_front)+parseInt(post_data['building'].connection_fee_left_back),'wrap_with':['front','back']}
                      post_data['building'].leanto[i].total_length = newParams.lean_p_d+newParams.leanF_p_w+newParams.leanB_p_w;  
                  }
                  if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0)
                  {
                        leanCertPrice = parseFloat(leanCertPrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                  }
                }if(post_data['building'].leanto[i].leanto_type==2)
                {
                  post_data['building'].leanto[i].total_length = newParams.leanR_p_d;  
                  if(newParams.add_right_back_lean_porch==true && const_var.compare_leanto_condition_by_mfg.wrap_around == true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'right','length':newParams.leanR_p_d+newParams.leanB_p_w,'cost':parseInt(post_data['building'].connection_fee_right_back),'wrap_with':['back']}
                      post_data['building'].leanto[i].total_length = newParams.leanR_p_d+newParams.leanB_p_w;        
                  }if(newParams.add_right_front_lean_porch==true && const_var.compare_leanto_condition_by_mfg.wrap_around == true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'right','length':newParams.leanR_p_d+newParams.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_right_front),'wrap_with':['front']}
                      post_data['building'].leanto[i].total_length = newParams.leanR_p_d+newParams.leanF_p_w;   
                  }if(newParams.add_right_back_lean_porch==true && newParams.add_right_front_lean_porch==true && const_var.compare_leanto_condition_by_mfg.wrap_around == true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'right','length':newParams.leanR_p_d+newParams.leanB_p_w+newParams.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_right_front)+parseInt(post_data['building'].connection_fee_right_back),'wrap_with':['front','back']}
                      post_data['building'].leanto[i].total_length = newParams.leanR_p_d+newParams.leanF_p_w+newParams.leanB_p_w;  
                  }
                  if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0)
                  {
                        leanCertPrice = parseFloat(leanCertPrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                  }
                }
                if(post_data['building'].leanto[i].leanto_type==3)
                {
                  post_data['building'].leanto[i].total_length = post_data['building'].leanto[i].length;   
                  if(post_data['building'].leanto[i].porch!=undefined)
                  {
                    if(newParams.add_left_front_lean_porch==true)
                    {
                       post_data['building'].leanto[i].porch.wrap_with = ['left'];
                    }
                    if(newParams.add_right_front_lean_porch==true)
                    {
                        post_data['building'].leanto[i].porch.wrap_with = ['right'];
                    }
                    if(newParams.add_left_front_lean_porch==true && newParams.add_right_front_lean_porch==true)
                    {
                       post_data['building'].leanto[i].porch.wrap_with = ['left','right'];
                    }
                  }
                  if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0)
                  {
                        leanCertPrice = parseFloat(leanCertPrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                  }
                }if(post_data['building'].leanto[i].leanto_type==4)
                {
                  post_data['building'].leanto[i].total_length = post_data['building'].leanto[i].length;    
                  if(post_data['building'].leanto[i].porch!=undefined)
                  {
                    if(newParams.add_left_back_lean_porch==true)
                    {
                       post_data['building'].leanto[i].porch.wrap_with = ['left'];
                    }
                    if(newParams.add_right_back_lean_porch==true)
                    {
                        post_data['building'].leanto[i].porch.wrap_with = ['right'];
                    }
                    if(newParams.add_left_back_lean_porch==true && newParams.add_right_back_lean_porch==true)
                    {
                       post_data['building'].leanto[i].porch.wrap_with = ['left','right'];
                    }
                  }
                  if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0)
                  {
                        leanCertPrice = parseFloat(leanCertPrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                  }
                }
                if(post_data['building'].leanto[i].leanto_type!=2 && post_data['building'].leanto[i].leanto_type!=1)
                {
                  if(post_data['building'].leanto[i].porch!=undefined)
                  {
                    post_data['building'].leanto[i].porch.cost = 0;
                  }
                }

                /*Code For Fetch Lenght and Width For Wrap Buildings*/

                if(post_data['building'].leanto[i].leanto_type == 1)
                {
                    WrapLength_for_liniear_feet_left = (post_data['building'].leanto[i].porch!=undefined)?parseFloat(WrapLength_for_liniear_feet_left) + parseFloat(post_data['building'].leanto[i].porch.length):parseFloat(WrapLength_for_liniear_feet_left);
                }
                if(post_data['building'].leanto[i].leanto_type == 2)
                {
                    WrapLength_for_liniear_feet_right = (post_data['building'].leanto[i].porch!=undefined)?parseFloat(WrapLength_for_liniear_feet_right) + parseFloat(post_data['building'].leanto[i].porch.length):parseFloat(WrapLength_for_liniear_feet_right);
                }
                if(post_data['building'].leanto[i].leanto_type == 3)
                {
                    WrapLength_for_liniear_feet_front = (post_data['building'].leanto[i].wrappedLength!=undefined)?parseFloat(WrapLength_for_liniear_feet_front) + parseFloat(post_data['building'].leanto[i].wrappedLength):parseFloat(WrapLength_for_liniear_feet_front);
                }
                if(post_data['building'].leanto[i].leanto_type == 4)
                {
                    WrapLength_for_liniear_feet_back = (post_data['building'].leanto[i].wrappedLength!=undefined)?parseFloat(WrapLength_for_liniear_feet_back) + parseFloat(post_data['building'].leanto[i].wrappedLength):parseFloat(WrapLength_for_liniear_feet_back);
                }
                /*End Code*/

                leantoPriceCalculation.totalLeanPrice =(leantoPriceCalculation.totalLeanPrice == undefined)? parseFloat(post_data['building'].leanto[i].t_c_b) :parseFloat(leantoPriceCalculation.totalLeanPrice)+parseFloat(post_data['building'].leanto[i].t_c_b);
                leantoPriceCalculation.totalBasePrice = (leantoPriceCalculation.totalBasePrice == undefined)? parseFloat(post_data['building'].leanto[i].basic_price) :parseFloat(leantoPriceCalculation.totalBasePrice)+parseFloat(post_data['building'].leanto[i].basic_price);
                leantoPriceCalculation.totalWallPrice = (leantoPriceCalculation.totalWallPrice == undefined)? parseFloat(post_data['building'].leanto[i].front_wall_price)+parseFloat(post_data['building'].leanto[i].back_wall_price)+parseFloat(post_data['building'].leanto[i].side_wall_price) :parseFloat(leantoPriceCalculation.totalWallPrice)+parseFloat(post_data['building'].leanto[i].front_wall_price)+parseFloat(post_data['building'].leanto[i].back_wall_price)+parseFloat(post_data['building'].leanto[i].side_wall_price);


                // calculate total side wall price and total end wall price individually 
                leantoPriceCalculation.totalSideWallPrice = leantoPriceCalculation.totalSideWallPrice == undefined ? parseFloat(post_data['building'].leanto[i].side_wall_price) : parseFloat(leantoPriceCalculation.totalSideWallPrice) + parseFloat(post_data['building'].leanto[i].side_wall_price)
                leantoPriceCalculation.totalEndWallPrice = leantoPriceCalculation.totalEndWallPrice ==undefined ? parseFloat(post_data['building'].leanto[i].front_wall_price) + parseFloat(post_data['building'].leanto[i].back_wall_price) : parseFloat(leantoPriceCalculation.totalEndWallPrice) + parseFloat(post_data['building'].leanto[i].front_wall_price) + parseFloat(post_data['building'].leanto[i].back_wall_price)
                
                if(post_data['building'].leanto[i].utility_price!=undefined && post_data['building'].leanto[i].utility_price!=0)
                {
                    leantoPriceCalculation.totalWallPrice =  parseFloat(leantoPriceCalculation.totalWallPrice) + parseFloat(post_data['building'].leanto[i].utility_price);
                }
              leantoPriceCalculation.totalHeightPrice = leantoPriceCalculation.totalHeightPrice == undefined ? parseFloat(post_data['building'].leanto[i].height_price) : parseFloat(leantoPriceCalculation.totalHeightPrice) + parseFloat(post_data['building'].leanto[i].height_price);
              leantoPriceCalculation.totalDimension = (leantoPriceCalculation.totalDimension!=undefined)?parseFloat(leantoPriceCalculation.totalDimension) + parseFloat(post_data['building'].leanto[i].width * post_data['building'].leanto[i].total_length): parseFloat(post_data['building'].leanto[i].width * post_data['building'].leanto[i].total_length);

                // calcuate total insulation price for lean to
                if(post_data['building'].leanto[i].insulation_price != undefined){
                    leanToTotalInsultaionPrice = parseFloat(leanToTotalInsultaionPrice) + post_data['building'].leanto[i].insulation_price
                }

                if(post_data['building'].leanto[i].leanto_type==1)
                {
                    post_data['building'].leanto[i].alignment = const_var.TypeAlingnment[newParams.leantoAlignmentLeft];
                }
                if(post_data['building'].leanto[i].leanto_type==2)
                {
                    post_data['building'].leanto[i].alignment = const_var.TypeAlingnment[newParams.leantoAlignmentRight];
                }
                if(post_data['building'].leanto[i].leanto_type==3)
                {
                    post_data['building'].leanto[i].alignment = const_var.endLeanAlingnmentType[newParams.leantoAlignmentFront];
                }
                if(post_data['building'].leanto[i].leanto_type==4)
                {
                    post_data['building'].leanto[i].alignment = const_var.endLeanAlingnmentType[newParams.leantoAlignmentBack];
                }
            }
            if(isNaN(parseFloat(leantoPriceCalculation.totalBasePrice))==true)
            {
                leantoPriceCalculation.totalBasePrice = 0;
            }
        }else
        {
            leantoPriceCalculation.totalLeanPrice = 0;
            leantoPriceCalculation.totalBasePrice = 0;
            leantoPriceCalculation.totalWallPrice = 0;
            leantoPriceCalculation.totalHeightPrice = 0;
            leantoPriceCalculation.totalDimension = 0;
            leantoPriceCalculation.totalSideWallPrice = 0;
            leantoPriceCalculation.totalEndWallPrice = 0;
        }
        if(newParams.p_e_i!="other" && const_var.main_extraItems_arr_Compare[newParams.p_e_i]!=undefined)
            {
                if(newParams.p_i_s=="1")
                {
                    if(const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of!=undefined && const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of_cost)?(t_c * const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of_cost / 100):0;
                            t_c =  parseFloat(t_c) + parseFloat(finalCertPrice) + parseFloat(leanCertPrice);
                            post_data['building'].certificate_price = parseFloat(finalCertPrice) + parseFloat(leanCertPrice);
                        }else
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of_cost)?(post_data['building'].roof_style_price * const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of_cost / 100):0;
                            t_c =  parseFloat(t_c) + parseFloat(finalCertPrice)+ parseFloat(leanCertPrice);
                            post_data['building'].certificate_price = parseFloat(finalCertPrice) + parseFloat(leanCertPrice);
                        }
                        
                    }else{
                        var finalCertPrice = (const_var.main_extraItems_arr_Compare[newParams.p_e_i].certification_concrete_cost!=0)?const_var.main_extraItems_arr_Compare[newParams.p_e_i].certification_concrete_cost:0;
                        t_c = parseFloat(t_c) + parseFloat(finalCertPrice)+ parseFloat(leanCertPrice);
                        post_data['building'].certificate_price = parseFloat(finalCertPrice) + parseFloat(leanCertPrice);
                    }
                }else{
                    if(const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of!=undefined && const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of_cost)?(t_c * const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of_cost / 100):0;
                            t_c =  parseFloat(t_c) + parseFloat(finalCertPrice)+ parseFloat(leanCertPrice);
                            post_data['building'].certificate_price = parseFloat(finalCertPrice) + parseFloat(leanCertPrice);
                        }else{
                            var finalCertPrice = (const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of_cost)?(post_data['building'].roof_style_price * const_var.main_extraItems_arr_Compare[newParams.p_e_i].percentage_of_cost / 100):0;
                            t_c =  parseFloat(t_c) + parseFloat(finalCertPrice)+ parseFloat(leanCertPrice);
                            post_data['building'].certificate_price = parseFloat(finalCertPrice) + parseFloat(leanCertPrice);
                        }
                        
                        
                    }else
                    {
                        var finalCertPrice = (const_var.main_extraItems_arr_Compare[newParams.p_e_i].cost)?const_var.main_extraItems_arr_Compare[newParams.p_e_i].cost:0;
                        t_c =  parseFloat(t_c) + parseFloat(finalCertPrice)+ parseFloat(leanCertPrice);
                        post_data['building'].certificate_price =parseFloat(finalCertPrice) + parseFloat(leanCertPrice);
                    }
                }
            }
            // console.log(t_c , "tctc");
            if(newParams.p_e_i=="other")
            {
                post_data['building'].certificate = {'gauge': 0,'certified': 1,'has_double_leg': 0,'has_ladder_leg': 0,'has_other_leg': 0,'height': 0,'id': -1,'cost':0,'is_default': "no",'length': 0,'map_id': 0,'name': "Other"};
                post_data['building'].certificate_other_name = (newParams.p_e_i_other!='')?newParams.p_e_i_other:'Other';
                post_data['building'].certificate_price  = 0;
                t_c =  parseFloat(t_c) + parseFloat(post_data['building'].certificate_price);
            }
            
            if(const_var.inputs!=undefined && const_var.inputs.length>0)
            {
                const_var.inputs.map((val, index) => {
                    if(val!=null)
                    {
                        if(val.additional_quantity!=0 && val.additional_quantity!=null)
                        {
                            if(val.additional_name!=null && val.additional_quantity!=null)
                            {
                                extra_items.push({'item_name':val.additional_name,'item_quantity':parseInt(val.additional_quantity),'item_price':0});
                                t_c = parseFloat(t_c) + 0;
                            }
                        }
                    }
                
                });
                post_data['building'].inputs = const_var.inputs;
            }
            if(const_var.Componentinputs!=undefined && const_var.Componentinputs.length>0)
            {
                const_var.Componentinputs.map((val, index) => {
                    if(val!=null)
                    {
                        if(val.additional_name!=null && val.additional_quantity!=null)
                        {
                            if(val.additional_quantity!=0)
                            {
                                extra_items.push({'item_name':val.additional_name,'item_quantity':parseInt(val.additional_quantity),'item_price':0});
                                t_c = parseFloat(t_c) + 0;
                                
                            }
                        }
                    }
                
                });
                post_data['building'].Componentinputs = const_var.Componentinputs;
            }
            let totalPriceWithoutAdditionalItem = parseFloat(t_c);

            let chk_is_cumulative = 0;
            const certificate = post_data['building'].certificate;
            const fourfeetOnCenterCertificateCheck =  certificate && certificate != '' &&  certificate.distance_on_center && certificate.distance_on_center == 4;
            if(const_var.ExtraItemsFeaturesArray!=undefined && const_var.ExtraItemsFeaturesArray.length>0)
            {
                let newCost = 0;
                let checkCenterCost = false;
                let costType = '$'
                let costTypeEnd = '$'
                const_var.ExtraItemsFeaturesArray.map((val, index) => {
                    if(val==null)
                    {
                        return;
                    }
                    let newName = ''
                    newCost = val.cost;
                    let extraItemsCheckboxMatch = false;
                    let newAItem = {}
                    let newAEndItem = {}
                    
                    if(val.name =="overhang" && data.overhang != undefined && ((data.overhang.end != undefined && data.overhang.end.length != 0) || (data.overhang.side != undefined && data.overhang.side.length != 0) || (data.overhang.both != undefined && data.overhang.both != null && data.overhang.both != ''))){
                        if(val.label.toLowerCase().includes('side')){

                            if(data.overhang.side != undefined && data.overhang.side.length != 0){
                                // let selSize = val.label.split(`'`)[0]
                                let selSize = calcOverhangSize(val.label)
                                var filterSelSizeObj = data.overhang.side.filter(obj => obj.sheet_name.toLowerCase().includes(selSize))

                                newAItem = filterSelSizeObj.length > 0 ? filterSelSizeObj[0] : data.overhang.side[0]
                                costType = filterSelSizeObj.length > 0 ? filterSelSizeObj[0].cost_type : data.overhang.side[0].cost_type
                                newCost = filterSelSizeObj.length > 0 ? filterSelSizeObj[0].cost : data.overhang.side[0].cost
                                newName = filterSelSizeObj.length > 0 ? filterSelSizeObj[0].sheet_name : data.overhang.side[0].sheet_name

                                // if(val.label.toLowerCase().includes("2'")){
                                //     newCost = data.overhang.side[1].cost
                                // }
                                // else{
                                //     newCost = data.overhang.side[0].cost
                                // }
                            }
                            else{
                               
                                if(data.overhang.both != undefined && data.overhang.both!=null && data.overhang.both != ''){
                                    // if(val.label.toLowerCase().includes('end')){
                                    //     newCost = data.overhang.both.end_cost
                                    // }
                                    // else{
                                        newAItem = data.overhang.both
                                        newAItem['cost'] = data.overhang.both.side_cost
                                        costType = data.overhang.both.cost_type
                                        newCost = data.overhang.both.side_cost
                                        newName = "1' Overhang on Sides"
                                        // newCost = data.overhang.both.cost
                                        // newName = "1' Overhang (both)"
                                    // }
                                    // newCost= data.overhang.both.cost / 2
                                }
                                else{
                                    newCost = 0;
                                    extraItemsCheckboxMatch = true;
                                }
                            }
                        }
                        if(val.label.toLowerCase().includes('end')){
                            if((data.overhang.end != undefined && data.overhang.end.length != 0)){

                                // let selSize = val.label.split(`'`)[0]
                                let selSize = calcOverhangSize(val.label)
                                var filterSelSizeObj = data.overhang.end.filter(obj => obj.sheet_name.toLowerCase().includes(selSize))
                                newAItem = filterSelSizeObj.length > 0 ? filterSelSizeObj[0] : data.overhang.end[0]
                                costType = filterSelSizeObj.length > 0 ? filterSelSizeObj[0].cost_type : data.overhang.end[0].cost_type
                                newCost = filterSelSizeObj.length > 0 ? filterSelSizeObj[0].cost: data.overhang.end[0].cost
                                newName = filterSelSizeObj.length > 0 ? filterSelSizeObj[0].sheet_name: data.overhang.end[0].sheet_name

                                // if(val.label.toLowerCase().includes("2'")){
                                //     newCost = data.overhang.end[1].cost
                                // }    
                                // else{
                                //     newCost = data.overhang.end[0].cost
                                // }
                            }
                            else{
                                if(data.overhang.both != undefined && data.overhang.both!=null && data.overhang.both != ''){
                                    // if(val.label.toLowerCase().includes('end')){
                                        costType=data.overhang.both.cost_type
                                        newCost = data.overhang.both.end_cost
                                        newName = "1' Overhang on Ends"
                                        newAItem = data.overhang.both
                                        newAItem['cost'] = data.overhang.both.side_cost
                                        // newCost = data.overhang.both.cost
                                        // newName = "1' Overhang (both)"
                                    // }
                                    // else{
                                    //     newCost = data.overhang.both.side_cost
                                    // }
                                    // newCost= data.overhang.both.cost / 2
                                }
                                else{
                                    newCost = 0;
                                    extraItemsCheckboxMatch = true;
                                }
                            }

                        }
                        if(val.sheet_type == "both"){
                            if((data.overhang.both != undefined && data.overhang.both != null && data.overhang.both != '')){
                                newAItem = data.overhang.both
                                costType = data.overhang.both.cost_type
                                newCost = data.overhang.both.cost
                                newName = "1' Overhang (both)"
                            }
                            else{
                                if((data.overhang.end != undefined && data.overhang.end.length != 0) || (data.overhang.side != undefined && data.overhang.side.length != 0)){
                                    let totalCost = 0

                                    if(data.overhang.end != undefined && data.overhang.end.length != 0 && data.overhang.side != undefined && data.overhang.side.length != 0){
                                        // if(data.overhang.end.includes("1' Overhang on Ends"))
                                        // if(data.overhang.end.includes("1' Overhang on Sides"))

                                        let is1FtEnd = data.overhang.end.filter(obj => obj.sheet_name.split(`'`)[0] == 1)
                                        let is1FtSide = data.overhang.side.filter(obj => obj.sheet_name.split(`'`)[0] == 1)
                                        if(is1FtEnd.length > 0 && is1FtSide.length > 0){
                                            newAItem = is1FtSide[0]
                                            newCost = parseFloat(is1FtEnd[0].cost) + parseFloat(is1FtSide[0].cost)
                                            costType = is1FtSide[0].cost_type
                                            newName = "1' Overhang (end + side)"
                                        }
                                        else{
                                            let commonData = ''
                                            let sideData = ''
                                            let endData = ''
                                            data.overhang.end.map((eItem, eIdx)=>{
                                                if(commonData == ''){
                                                    sideData = data.overhang.side.filter(obj => obj.sheet_name.split(`'`)[0] == eItem.sheet_name.split(`'`)[0])
                                                    endData = sideData.length > 0 ? eItem : ''
                                                    commonData = sideData.length > 0 ? sideData[0].sheet_name.split(`'`)[0] : ''
                                                }
                                            })

                                            if(commonData != ''){
                                                newAItem = sideData[0]
                                                newAEndItem = endData
                                                costTypeEnd = endData.cost_type
                                                // newCost = parseFloat(endData.cost) + parseFloat(sideData[0].cost)
                                                newCost = parseFloat(sideData[0].cost)
                                                costType = sideData[0].cost_type
                                                newName = commonData + "' Overhang (end + side)"
                                            }
                                            else{
                                                newAEndItem=data.overhang.end[0]
                                                costTypeEnd = data.overhang.end[0].cost_type
                                                newAItem = data.overhang.side[0]
                                                // newCost = parseFloat(data.overhang.end[0].cost) + parseFloat(data.overhang.side[0].cost)
                                                newCost = parseFloat(data.overhang.side[0].cost)
                                                costType = data.overhang.side[0].cost_type
                                                newName =  "Overhang (end + side)"
                                            }
                                        }
                                    }
                                    else{
                                        if(data.overhang.end != undefined && data.overhang.end.length != 0){
                                            let endItem = data.overhang.end.filter(obj => obj.sheet_name.split(`'`)[0] == 1)
                                            endItem = endItem.length > 0 ? endItem[0] : data.overhang.end[0]
                                            newAItem = endItem
                                            totalCost = endItem.cost
                                            newName = endItem.sheet_name.split(`'`)[0] + "' Overhang (end)"
                                        }
                                        if(data.overhang.side != undefined && data.overhang.side.length != 0){
                                            let sideItem = data.overhang.side.filter(obj => obj.sheet_name.split(`'`)[0] == 1)
                                            sideItem = sideItem.length > 0 ? sideItem[0] : data.overhang.end[0]
                                            newAItem = sideItem
                                            totalCost = sideItem.cost
                                            newName = sideItem.sheet_name.split(`'`)[0] + "' Overhang (side)"
                                        }
                                    }

                                    // if(data.overhang.end != undefined && data.overhang.end.length != 0){
                                    //     newAItem = data.overhang.end[0]
                                    //     totalCost = data.overhang.end[0].cost
                                    //     newName = "1' Overhang (end)"
                                    // }
                                    // if(data.overhang.side != undefined && data.overhang.side.length != 0){
                                    //     newAItem = data.overhang.side[0]
                                    //     totalCost = parseFloat(totalCost) + parseFloat(data.overhang.side[0].cost)
                                    //     if(newName == ''){
                                    //         newName = "1' Overhang (side)"
                                    //     }
                                    //     else{
                                    //         newName = "1' Overhang (end + side)"
                                    //     }
                                    // }
                                    // console.log('both totalCost',totalCost)
                                    // newCost = totalCost;
                                }
                                else{
                                    newCost = 0;
                                    extraItemsCheckboxMatch = true;
                                }
                            }

                        }
                        // overhangOpt.filter(obj => obj.label.toLowerCase().includes('end'))
                    }
                    else{
                        if(data.extra_items.length>0)
                        {
                            if(data.extra_items[0].checkbox.length>0)
                            {
                                // let checkextraItem =data.extra_items[0].checkbox.map((value,key) =>{
                                //     console.log(val.name,"==",value.name);
                                //     if(val.name==value.name)
                                //     {
                                //         newCost = value.cost;
                                //     }else{
                                //         extraItemsCheckboxMatch = true;
                                //     }
                                // })

                                if(val.name=='overhang'){
                                    // let selFt = val.label.split(`'`)[0]
                                    let selFt = calcOverhangSize(val.label)
                                    let extraItem = data.extra_items[0].checkbox.find(ei => val.label==ei.label);
                                    // if(selFt == 2 && (extraItem == '' || extraItem == undefined)){
                                    
                                    if(selFt != 1 && (extraItem == '' || extraItem == undefined)){
                                        let selLabel = val.label.toLowerCase().includes('ends') ? 'ends' : val.label.toLowerCase().includes('sides') ? 'sides' : '';
                                        
                                        extraItem =  data.extra_items[0].checkbox.find(ei => ei.label.toLowerCase().includes(selLabel))
                                        newName = extraItem != undefined ? extraItem.label : ''
                                        // extraItem = extraItem
                                    }
                                    if(val.sheet_type == "both" && (extraItem == '' || extraItem == undefined)){
                                        extraItem =  data.extra_items[0].checkbox.filter(ei => ei.label.toLowerCase().includes('overhang'))
                                        newName = extraItem.length == 2  ? "1' Overhang (both)" : (extraItem.length == 1 ? (extraItem[0].label.includes('sides') ? "1' Overhang (sides)" : "1' Overhang (ends)") : '')
                                        if(extraItem.length > 1){
                                            let totalCost = 0
                                            for(let i=0;i<extraItem.length;i++){
                                                totalCost = parseFloat(totalCost) + parseFloat(extraItem[i].cost)
                                            }
                                            extraItem[0]['cost'] = totalCost;
                                            extraItem = extraItem[0];
                                        }
                                        else if(extraItem.length == 1){
                                            extraItem = extraItem[0];
                                        }
                                        else{
                                            extraItem = undefined;
                                        }
                                    }
                                    if (extraItem!= undefined) {
                                        costType = extraItem.cost_type
                                        newCost = extraItem.cost;
                                    }else{
                                        extraItemsCheckboxMatch = true;  
                                    } 
                                }
                                else{
                                    let extraItem = data.extra_items[0].checkbox.find(ei => val.label==ei.label );
                                    if (extraItem!= undefined && val.name=='overhang') {
                                        if ( val.name == extraItem.name && val.label== extraItem.label ) {
                                            costType = extraItem.cost_type
                                            newCost = extraItem.cost;
                                        }else{
                                            extraItemsCheckboxMatch = true;  
                                        }
                                        
                                    } else if(extraItem!= undefined && val.name == extraItem.name){
                                        costType = extraItem.cost_type
                                        newCost = extraItem.cost;
                                    } else{
                                        extraItemsCheckboxMatch = true; 
                                    }
                                }



                                
        
                                    // if( (val.name =="overhang") && (extraItem == undefined)){
                                    //     if ( val.label =="1' Overhang on Sides" ) {
                                    //         params.o_v_h_n_g = false;
                                    //         const_var.ExtraItemsFeaturesArray.splice(index,1);
                                    //     }
                                    //     if ( val.label =="1' Overhang on Ends" ) {
                                    //         params.o_v_h_n_g_e = false;
                                    //         const_var.ExtraItemsFeaturesArray.splice(index,1);
                                    //     }
                                    // }
                                    // if( (val.name =="overhang")&&(extraItem != undefined &&  extraItem.name == "overhang")){
                                    //    if ( val.label != "1' Overhang on Sides" && extraItem.label != "1' Overhang on Sides"  ) {
                                    //        params.o_v_h_n_g_e = false;
                                    //        const_var.ExtraItemsFeaturesArray.splice(index,1);
                                    //     }
                                    //     if ( val.label != "1' Overhang on Ends" &&  extraItem.label != "1' Overhang on Ends" ) {
                                    //         params.o_v_h_n_g = false;
                                    //         const_var.ExtraItemsFeaturesArray.splice(index,1);
                                    //     }
                                    // }
                            }else
                            {
                                // if (val.name =="overhang"){
                                //     if(val.label =="1' Overhang on Sides"){
                                //         params.o_v_h_n_g = false;
                                //         const_var.ExtraItemsFeaturesArray.splice(index,1);
                                //     } 
                                //     if(val.label =="1' Overhang on Ends") {
                                //         params.o_v_h_n_g_e = false;
                                //         const_var.ExtraItemsFeaturesArray.splice(index,1);
                                //     }
                                // }
                                newCost = 0;
                                extraItemsCheckboxMatch = true;
        
                            }
                        }else{
                            extraItemsCheckboxMatch = true;
        
                        }
                    }
                    if(val!=null && val.is_checked==true && extraItemsCheckboxMatch !== true)
                    {
    
                        let leantoExtraItemCheckBoxCost = 0, extraBowsPrice = 0;
                        if(newParams.add_left_lean && const_var.leanGetDataLeftComparision){
                            const_var.leanGetDataLeftComparision.extra_items[0].checkbox.map((item)=>{
                                if (val.name=='overhang') {
                                    if ( item.name == val.name && item.label == val.label ) {
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                    }
                                } else {
                                    if(item.name == val.name){
                                        let extraBowsPrice = 0;
                                        if (item.name == "fourth_center_cost" && item.cost == 0 ){
                                            extraBowsPrice =  utlis.fourFeetOnCenterPriceWithExtraBowsPriceForCompare(const_var.leanGetDataLeftComparision, newParams.lean_p_e_l, const_var.compareLeanLegs.leftLean.leanLegstype, post_data['building'].distance_on_center,'leftLean' );
                                        }
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost + extraBowsPrice;
                                    }
                                }
                           
                            })
                        }
                        if(newParams.add_right_lean && const_var.leanGetDataRightComparision){
                            const_var.leanGetDataRightComparision.extra_items[0].checkbox.map((item)=>{
                                if (val.name=='overhang') {
                                    if ( item.name == val.name && item.label == val.label ) {
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                    }
                                } else {
                                    if(item.name == val.name){
                                        let extraBowsPrice = 0
                                        if (item.name == "fourth_center_cost" && item.cost == 0 ){
                                            extraBowsPrice = utlis.fourFeetOnCenterPriceWithExtraBowsPriceForCompare(const_var.leanGetDataRightComparision, newParams.leanR_p_e_l,  const_var.compareLeanLegs.rightLean.leanRLegstype, post_data['building'].distance_on_center, 'rightLean' );
                                        }
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost + extraBowsPrice;
                                    }
                                }
                            })
                        }                                        
                        if(newParams.add_front_lean && const_var.leanGetDataFrontComparision){
                            const_var.leanGetDataFrontComparision.extra_items[0].checkbox.map((item)=>{
                                if (val.name=='overhang') {
                                    if ( item.name == val.name && item.label == val.label ) {
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                    }
                                } else {
                                    if(item.name == val.name){
                                        let extraBowsPrice = 0;
                                        if (item.name == "fourth_center_cost" && item.cost == 0 ){
                                            extraBowsPrice = utlis.fourFeetOnCenterPriceWithExtraBowsPriceForCompare(const_var.leanGetDataFrontComparision, newParams.leanF_p_e_l, const_var.compareLeanLegs.frontLean.leanFLegstype, post_data['building'].distance_on_center,'frontLean' );
                                        }
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost + extraBowsPrice;
                                    }
                                }
                            })
                        }                                        
                        if(newParams.add_back_lean && const_var.leanGetDataBackComparision){
                            const_var.leanGetDataBackComparision.extra_items[0].checkbox.map((item)=>{
                                if (val.name=='overhang') {
                                    if ( item.name == val.name && item.label == val.label ) {
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                    }
                                } else {
                                    if(item.name == val.name){
                                        let extraBowsPrice = 0;
                                        if (item.name == "fourth_center_cost" && item.cost == 0 ){
                                            extraBowsPrice = utlis.fourFeetOnCenterPriceWithExtraBowsPriceForCompare(const_var.leanGetDataBackComparision, newParams.leanB_p_e_l, const_var.compareLeanLegs.backLean.leanBLegstype, post_data['building'].distance_on_center,'backLean' );
                                        }
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost + extraBowsPrice;
                                    }
                                }
                            })
                        } 
                        
                        if ( val.name == 'fourth_center_cost' && newCost == 0 ) {
                            fourthCenterCostWithExtrabows = true;
                            extraBowsPrice = utlis.fourFeetOnCenterPriceWithExtraBowsPriceForCompare(data, newParams.p_e_l, newParams.legstype, post_data['building'].distance_on_center, 'center' );
                            newCost = newCost + extraBowsPrice; 
                        }

                        if ( val.name == 'fourth_center_cost' && (manufacturerId == 93 || manufacturerId == 13 || (newParams.p_s_n == 8 && manufacturerId == 34) || (newParams.p_s_n==8 && manufacturerId==27))&& checkCenterCost==false ) {
                            let newTc = 0;
                            if(val.is_checked==true && newParams.fourth_center_cost==true && fourfeetOnCenterCertificateCheck)
                            {
                                newTc = 0;
                            }else
                            {
                                newTc = ((parseFloat(t_c) + parseFloat(leantoPriceCalculation.totalLeanPrice)) * parseFloat(newCost))/100;
                            }
                            t_c = ((parseFloat(t_c)) + (newTc));
                            extra_items.push({'is_edit':false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':newTc, 'newName': newName});
                            checkCenterCost = true;
                        } else {
                            let newTc = 0;

                            if(val.name =="overhang"){
                                if (costType == "%") {
                                    let splitVal =0;

                                    if (newAItem.percentage_of != undefined && newAItem.percentage_of != "") {
                                        splitVal = newAItem.percentage_of.split(",");
                                    } else {
                                        splitVal = newAItem.price_of.includes(",") ? newAItem.price_of.split(",") : newAItem.price_of;
                                    }
                                    let splval = 0;
                                    if(splitVal!=0)
                                    {
                                        if(splitVal.includes("full_building_price")!=false)
                                        {
                                            // if(chk_is_cumulative==0)
                                            // {
                                            //     splval = parseFloat(splval) + parseFloat(totalPriceWithoutAdditionalItem) + parseFloat(leanToPriceCalc.totalLeanPrice);
                                            // }else{
                                                splval = parseFloat(splval) + parseFloat(t_c) + parseFloat(leantoPriceCalculation.totalLeanPrice);
                                            // }
                                            //splval = parseFloat(splval) + parseFloat(t_c) + parseFloat(leanToPriceCalc.totalLeanPrice);
                                        }
                                        if(splitVal.includes("base_price")!=false)
                                        {
                                            splval = parseFloat(splval) + parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice);
                                        }
                                        if(splitVal.includes("wall_price")!=false)
                                        {
                                            if(val.label.toLowerCase().includes('end')){
                                                if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalEndWallPrice);
                                                    // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                }else
                                                {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalEndWallPrice);
                                                    //  + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                }
                                                if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                                }
                                            }
                                            else if(val.label.toLowerCase().includes('side')){
                                                if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leantoPriceCalculation.totalSideWallPrice) ;
                                                    // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                }else
                                                {
                                                    splval = parseFloat(splval) +parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leantoPriceCalculation.totalSideWallPrice) ;
                                                    //  + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                }
                                                if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                                }
                                            }
                                            else{
                                                if(newAItem.sheet_type != undefined && newAItem.sheet_type == 'side'){
                                                    if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                    {
                                                        splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leantoPriceCalculation.totalSideWallPrice) ;
                                                        // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                    }else
                                                    {
                                                        splval = parseFloat(splval) +parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leantoPriceCalculation.totalSideWallPrice) ;
                                                        //  + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                    }
                                                    if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                        splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                                    }
                                                }
                                                else if(newAItem.sheet_type != undefined && newAItem.sheet_type == 'end'){
                                                    if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                    {
                                                        splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalEndWallPrice);
                                                        // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                    }else
                                                    {
                                                        splval = parseFloat(splval) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalEndWallPrice);
                                                        //  + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                    }
                                                    if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                        splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                                    }
                                                }
                                                else{
                                                    if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                    {
                                                        splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price)+ parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                    }else
                                                    {
                                                        splval = parseFloat(splval) + parseFloat(post_data['building'].front_wall_price) +parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                    }
                                                    if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                        splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                                    }                                               

                                                }
                                            }
                                        }
                                        if(splitVal.includes("height_price")!=false)
                                        {
                                          splval = parseFloat(splval) + parseFloat(post_data['building'].height_price) + parseFloat(leantoPriceCalculation.totalHeightPrice);
                                          
                                        }
                                        
                                    }
                                    // else
                                    // {
                                    //     splval = parseFloat(splval) + parseFloat(totalPriceWithoutAdditionalItem);
                                    // }

let finalCost2 = 0
                                    if(costTypeEnd != undefined && costTypeEnd != '' && costTypeEnd != 0 && costTypeEnd == '%' && newAEndItem != undefined && newAEndItem != {}){
                                        let splitVal2 = 0;
                                        let splVal2 = 0;
                                        if (newAEndItem.percentage_of != undefined && newAEndItem.percentage_of != "") {
                                            splitVal2 = newAEndItem.percentage_of.split(",");
                                        } else {
                                            splitVal2 = newAEndItem.price_of.includes(",") ? newAEndItem.price_of.split(",") : newAEndItem.price_of;
                                        }
                                        if(splitVal2!=0)
                                        {
                                            if(splitVal2.includes("full_building_price")!=false)
                                            {
                                                // if(chk_is_cumulative==0)
                                                // {
                                                //     splVal2 = parseFloat(splVal2) + parseFloat(totalPriceWithoutAdditionalItem) + parseFloat(leanToPriceCalc.totalLeanPrice);
                                                // }else{
                                                    splVal2 = parseFloat(splVal2) + parseFloat(t_c) + parseFloat(leantoPriceCalculation.totalLeanPrice);
                                                // }
                                                //splVal2 = parseFloat(splVal2) + parseFloat(t_c) + parseFloat(leanToPriceCalc.totalLeanPrice);
                                            }
                                            if(splitVal2.includes("base_price")!=false)
                                            {
                                                splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice);
                                            }
                                            if(splitVal2.includes("wall_price")!=false)
                                            {
                                                if(val.label.toLowerCase().includes('end')){
                                                    if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                    {
                                                        splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalEndWallPrice);
                                                        // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                    }else
                                                    {
                                                        splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalEndWallPrice);
                                                        //  + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                    }
                                                    if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                        splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].utility_front_price);
                                                    }
                                                }
                                                else if(val.label.toLowerCase().includes('side')){
                                                    if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                    {
                                                        splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leantoPriceCalculation.totalSideWallPrice) ;
                                                        // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                    }else
                                                    {
                                                        splVal2 = parseFloat(splVal2) +parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leantoPriceCalculation.totalSideWallPrice) ;
                                                        //  + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                    }
                                                    if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                        splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].utility_front_price);
                                                    }
                                                }
                                                else{
                                                    if(newAEndItem.sheet_type != undefined && newAEndItem.sheet_type == 'side'){
                                                        if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                        {
                                                            splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leantoPriceCalculation.totalSideWallPrice) ;
                                                            // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                        }else
                                                        {
                                                            splVal2 = parseFloat(splVal2) +parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leantoPriceCalculation.totalSideWallPrice) ;
                                                            //  + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                        }
                                                        if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                            splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].utility_front_price);
                                                        }
                                                    }
                                                    else if(newAEndItem.sheet_type != undefined && newAEndItem.sheet_type == 'end'){
                                                        if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                        {
                                                            splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalEndWallPrice);
                                                            // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                        }else
                                                        {
                                                            splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalEndWallPrice);
                                                            //  + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                        }
                                                        if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                            splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].utility_front_price);
                                                        }
                                                    }
                                                    else{
                                                        if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                        {
                                                            splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price)+ parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                        }else
                                                        {
                                                            splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].front_wall_price) +parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalWallPrice);
                                                        }
                                                        if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                            splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].utility_front_price);
                                                        }                                               

                                                    }
                                                }
                                            }
                                            if(splitVal2.includes("height_price")!=false)
                                            {
                                              splVal2 = parseFloat(splVal2) + parseFloat(post_data['building'].height_price) + parseFloat(leantoPriceCalculation.totalHeightPrice);
                                              
                                            }
                                            
                                        }
                                        // console.log('inner splVal2',splVal2,newAEndItem.cost)
                                        // splval = parseFloat(splval) + parseFloat(splVal2)
                                        // newCost = parseFloat(newCost) + parseFloat(newAEndItem.cost)
                                        // console.log('inner splval',splval,newCost)



                                        finalCost2 = (splVal2 * newAEndItem.cost) / 100;
                                        
                                    }
                                    
                                    let finalCost = (splval * newCost) / 100;
                                    finalCost = parseFloat(finalCost) + parseFloat(finalCost2)
                                    
                                    let additionalFeatureCost = (finalCost % 1 == 0) ? finalCost : finalCost.toFixed(2)
                                
                                    // t_c = parseFloat(t_c) + parseFloat(additionalFeatureCost);
                                    // extra_items.push({ 'item_name': val.additional_feature, 'item_quantity': (val.is_checked == true) ? 1 : 0, 'item_price': parseFloat(additionalFeatureCost) });
                                
                                
                                    newTc = parseFloat(additionalFeatureCost) + parseFloat(leantoExtraItemCheckBoxCost);
                                    t_c = parseFloat(t_c) + parseFloat(newTc);
                                    extra_items.push({'is_edit':false,'item_name': val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':parseFloat(newTc), 'newName': newName});
                                
                                } else if (costType == "sqft") {
                                
                                    let sideWallsCount = const_var.cbClosedSideWalls + const_var.flClosedSideWalls + const_var.llClosedSideWalls + const_var.rlClosedSideWalls + const_var.blClosedSideWalls;
                                    let endWallsCount = const_var.cbClosedEndWalls + const_var.flClosedEndWalls + const_var.llClosedEndWalls + const_var.rlClosedEndWalls + const_var.blClosedEndWalls;
                                
                                    let roofPrice = 0;
                                    let sidePrice = 0;
                                    let endPrice = 0;
                                    let endCount = 0;
                                    let sideCount = 0;
                                    // console.log(const_var.wallsData,"const_var.wallsData")
                                    if (Object.keys(const_var.wallsData['center']).length > 0) {
                                        sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['center'].closedSideWalls);
                                        endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['center'].closedEndWalls);
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((newParams.p_w + 1) * (newParams.p_d) * (newCost)));
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((newParams.p_d) * (newParams.p_h) * (newCost) * sideCount));
                                        endPrice = parseFloat(endPrice) + parseFloat(((newParams.p_h + 1) * (newParams.p_w) * (newCost) * endCount));
                                    } if (Object.keys(const_var.wallsData['frontLean']).length > 0 && newParams.add_front_lean == true) {
                                        if (const_var.wallsData['frontLean'].closedSideWalls != 0) {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['frontLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((newParams.leanF_p_d) * (newParams.leanF_p_h) * (newCost) * sideCount));
                                        }
                                        if (const_var.wallsData['frontLean'].closedEndWalls != 0) {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['frontLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((newParams.leanF_p_h + 1) * (newParams.leanF_p_w) * (newCost) * endCount));
                                        }
                                
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((newParams.leanF_p_w + 1) * (newParams.leanF_p_d) * (newCost)));
                                
                                    } if (Object.keys(const_var.wallsData['backLean']).length > 0 && newParams.add_back_lean == true) {
                                        if (const_var.wallsData['backLean'].closedSideWalls != 0) {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['backLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((newParams.leanB_p_d) * (newParams.leanB_p_h) * (newCost) * sideCount));
                                        }
                                        if (const_var.wallsData['backLean'].closedEndWalls != 0) {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['backLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((newParams.leanB_p_h + 1) * (newParams.leanB_p_w) * (newCost) * endCount));
                                        }
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((newParams.leanB_p_w + 1) * (newParams.leanB_p_d) * (newCost)));
                                    } if (Object.keys(const_var.wallsData['leftLean']).length > 0 && newParams.add_left_lean == true) {
                                        if (const_var.wallsData['leftLean'].closedSideWalls != 0) {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['leftLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((newParams.lean_p_d) * (newParams.lean_p_h) * (newCost) * sideCount));
                                        }
                                        if (const_var.wallsData['leftLean'].closedEndWalls != 0) {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['leftLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((newParams.lean_p_h + 1) * (newParams.lean_p_w) * (newCost) * endCount));
                                        }
                                
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((newParams.lean_p_w + 1) * (newParams.lean_p_d) * (newCost)));
                                
                                    } if (Object.keys(const_var.wallsData['rightLean']).length > 0 && newParams.add_right_lean == true) {
                                        if (const_var.wallsData['rightLean'].closedSideWalls != 0) {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['rightLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((newParams.leanR_p_d) * (newParams.leanR_p_h) * (newCost) * sideCount));
                                        }
                                        if (const_var.wallsData['rightLean'].closedEndWalls != 0) {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['rightLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((newParams.leanR_p_h + 1) * (newParams.leanR_p_w) * (newCost) * endCount));
                                        }
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((newParams.leanR_p_w + 1) * (newParams.leanR_p_d) * (newCost)));
                                    }
                                
                                    let FullCalculatedPrice = parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
                                    var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leantoPriceCalculation.totalDimension);
                                    // t_c = parseFloat(t_c) + parseFloat(((FullCalculatedPrice)));
                                
                                    // var splval = parseFloat(newParams.p_w * newParams.p_d) + parseFloat(leantoPriceCalculation.totalDimension);
                                    // t_c = parseFloat(t_c) + parseFloat(((splval * newCost)));
                                    // extra_items.push({ 'item_name': val.additional_feature, 'item_quantity': (val.is_checked == true) ? 1 : 0, 'item_price': parseFloat(FullCalculatedPrice) });
                                
                                
                                
                                
                                
                                    newTc = parseFloat(FullCalculatedPrice) + parseFloat(leantoExtraItemCheckBoxCost);
                                    t_c = parseFloat(t_c) + parseFloat(newTc);
                                    extra_items.push({'is_edit':false,'item_name': val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':parseFloat(newTc), 'newName': newName});
                                }
                                else {
                                    // t_c = parseFloat(t_c) + parseFloat(newCost);
                                    // extra_items.push({ 'item_name': val.additional_feature, 'item_quantity': (val.is_checked == true) ? 1 : 0, 'item_price': (parseInt(newCost)) });
                                
                                    newTc = parseFloat(newCost) + parseFloat(leantoExtraItemCheckBoxCost);
                                    t_c = parseFloat(t_c) + parseFloat(newTc);
                                    extra_items.push({'is_edit':false,'item_name': val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':parseFloat(newTc), 'newName': newName});
                                }
                            }
                            else{
                                if(val.name == 'fourth_center_cost' &&  newParams.fourth_center_cost ==true && fourfeetOnCenterCertificateCheck )
                                {
                                    newTc = 0;
                                }else
                                {
                                    newTc = parseFloat(newCost) + parseFloat(leantoExtraItemCheckBoxCost);
                                }
                                t_c = parseFloat(t_c) + parseFloat(newTc);
                                extra_items.push({'is_edit':false,'item_name': val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':parseFloat(newTc), 'newName': newName});


                                // extra_items.push({'is_edit':false,'item_name': newName != '' ? newName : val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':parseFloat(newTc)});
                            }
                        }
                    }
                });
                post_data['building'].ExtraItemsFeaturesArray = const_var.ExtraItemsFeaturesArray;
            }    
        if(const_var.additionalFeaturesArray!=undefined && const_var.additionalFeaturesArray.length>0)
        {
            if(isNaN(parseFloat(leantoPriceCalculation.totalWallPrice))==true)
            {
                leantoPriceCalculation.totalWallPrice = 0;
            }if(isNaN(parseFloat(leantoPriceCalculation.totalBasePrice))==true)
            {
                leantoPriceCalculation.totalBasePrice = 0;
            }if(isNaN(parseFloat(leantoPriceCalculation.totalLeanPrice))==true)
            {
                leantoPriceCalculation.totalLeanPrice = 0;
            }if(isNaN(parseFloat(leantoPriceCalculation.totalHeightPrice))==true)
            {
                leantoPriceCalculation.totalHeightPrice = 0;
            }
            if ( isNaN(parseFloat(leantoPriceCalculation.totalDimension) )==true) {
                leantoPriceCalculation.totalDimension = 0;
            }
            let newCost = 0;
            let AdditionalObj = "";
            const_var.additionalFeaturesArray.map((val, index) => {
                if(val == null)
                {
                    return;
                }
                newCost = val.cost;
                AdditionalObj = val;
                if(data.additional_features.length>0)
                {
                    data.additional_features.map((value,key) =>{
                    
                        if (value.additional_feature === val.additional_feature) {
                            newCost = value.cost;
                            AdditionalObj = value;
                            if(val.is_checked==true)
                            {
                                if(val.is_cumulative!=undefined)
                                {
                                    chk_is_cumulative = (val.is_cumulative!=undefined && val.is_cumulative==1)?1:0;
                                }
                                if(AdditionalObj.cost_type=="%")
                                {
                                    var splitVal = 0;
                                    if(AdditionalObj.percentage_of!=undefined && AdditionalObj.percentage_of!="")
                                    {
                                        splitVal =AdditionalObj.percentage_of.split(",");
                                    }else
                                    {
                                        splitVal =AdditionalObj.percentage_of.split(",");
                                    }
                                    var splval = 0;
                                    if(splitVal!=0)
                                    {
                                        if(splitVal.includes("1")!=false)
                                        {
                                            if(chk_is_cumulative==0)
                                            {
                                                splval = parseFloat(splval) + parseFloat(totalPriceWithoutAdditionalItem) + parseFloat(leantoPriceCalculation.totalLeanPrice);
                                            }else{
                                                splval = parseFloat(splval) + parseFloat(t_c) + parseFloat(leantoPriceCalculation.totalLeanPrice);
                                            }
                                            //splval = parseFloat(splval) + parseFloat(t_c) + parseFloat(leantoPriceCalculation.totalLeanPrice);
                                        }if(splitVal.includes("2")!=false)
                                        {
                                            splval = parseFloat(splval) + parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice);
                                        }if(splitVal.includes("3")!=false)
                                        {
                                            if(newParams.p_u_c==true || newParams.cB_addStorage_check_left || newParams.cB_addStorage_check_right)
                                            {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price)+ parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalWallPrice);
                                            }else
                                            {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].front_wall_price) +parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalWallPrice);
                                            }
                                                                                        
                                            if ( post_data['building'].utility_front_price != undefined && newParams.isBreezeway && newParams.cB_addStorage_check_front ) {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                            }
                                        }if(splitVal.includes("4")!=false)
                                        {
                                          splval = parseFloat(splval) + parseFloat(post_data['building'].height_price) + parseFloat(leantoPriceCalculation.totalHeightPrice);
                                          
                                        }
                                        
                                    }else
                                    {
                                        if(chk_is_cumulative==0)
                                        {
                                            splval = parseFloat(splval) + parseFloat(totalPriceWithoutAdditionalItem);
                                        }else{
                                            splval = parseFloat(splval) + parseFloat(t_c);
                                        }
                                        //splval = parseFloat(splval) + parseFloat(t_c);
                                    }

                                    let finalCost  = (splval * newCost) / 100;
                                    let additionalFeatureCost =  (finalCost % 1 == 0) ? finalCost : finalCost.toFixed(2)
                                    t_c = parseFloat(t_c) + parseFloat(additionalFeatureCost);
                                    extra_items.push({'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':parseFloat(additionalFeatureCost)});
                                }else if(AdditionalObj.cost_type=="ft")
                                {
                                    const CHKCalculation = utlis.checkAdditionalFeaturesValue(AdditionalObj);
                                    var total_FT = 0;
                                    if(CHKCalculation.width==true){
                                        total_FT = parseFloat(total_FT) + parseFloat(newParams.p_w*2);
                                    }if(CHKCalculation.length==true){
                                        total_FT = parseFloat(total_FT) + parseFloat(newParams.p_d*2);
                                    }if(CHKCalculation.height==true){
                                        if(newParams.singleSlope)
                                        {
                                            total_FT = parseFloat(total_FT) + parseFloat(newParams.p_h*2)+ parseFloat(Math.round(newParams.p_h-((newParams.p_w * newParams.p_r_p) / 12))*2)
                                        }else{
                                            total_FT = parseFloat(total_FT) + parseFloat(newParams.p_h*4);
                                        }
                                        //total_FT = parseFloat(total_FT) + parseFloat(newParams.p_h*4);
                                    }
                                    
                                    if(newParams.add_front_lean==true)
                                    {
                                        if(CHKCalculation.width==true){
                                            total_FT = (WrapLength_for_liniear_feet_front!=0)?parseFloat(total_FT) + parseFloat(newParams.leanF_p_w * 2):parseFloat(total_FT) + parseFloat(newParams.leanF_p_w * 2);
                                        }if(CHKCalculation.length==true){
                                            total_FT = (WrapLength_for_liniear_feet_front!=0)?parseFloat(total_FT) + parseFloat(WrapLength_for_liniear_feet_front):parseFloat(total_FT) + parseFloat(newParams.leanF_p_d);
                                        }
                                        if(CHKCalculation.height==true){
                                            total_FT = parseFloat(total_FT) + parseFloat(newParams.leanF_p_h *2);
                                        }
                                    }
                                    if(newParams.add_back_lean==true)
                                    {
                                        if(CHKCalculation.width==true){
                                            total_FT = (WrapLength_for_liniear_feet_back!=0)?parseFloat(total_FT) + parseFloat(newParams.leanB_p_w * 2):parseFloat(total_FT) + parseFloat(newParams.leanB_p_w * 2);
                                        }if(CHKCalculation.length==true){
                                            total_FT = (WrapLength_for_liniear_feet_back!=0)?parseFloat(total_FT) + parseFloat(WrapLength_for_liniear_feet_back):parseFloat(total_FT) + parseFloat(newParams.leanB_p_d);
                                        }
                                        if(CHKCalculation.height==true){
                                            total_FT = parseFloat(total_FT) + parseFloat(newParams.leanB_p_h *2);
                                        }
                                    }
                                    if(newParams.add_left_lean==true)
                                    {
                                        if(CHKCalculation.width==true){
                                            total_FT = (WrapLength_for_liniear_feet_left!=0)?parseFloat(total_FT) + parseFloat(newParams.lean_p_w * 2):parseFloat(total_FT) + parseFloat(newParams.lean_p_w * 2);
                                        }if(CHKCalculation.length==true){
                                            total_FT = (WrapLength_for_liniear_feet_left!=0)?parseFloat(total_FT) + parseFloat(WrapLength_for_liniear_feet_left):parseFloat(total_FT) + parseFloat(newParams.lean_p_d);
                                        }
                                        if(CHKCalculation.height==true){
                                            total_FT = parseFloat(total_FT) + parseFloat(newParams.lean_p_h *2);
                                        }
                                    }
                                    if(newParams.add_right_lean==true)
                                    {
                                        if(CHKCalculation.width==true){
                                            total_FT = (WrapLength_for_liniear_feet_right!=0)?parseFloat(total_FT) + parseFloat(newParams.leanR_p_w * 2):parseFloat(total_FT) + parseFloat(newParams.leanR_p_w * 2);
                                        }if(CHKCalculation.length==true){
                                            total_FT = (WrapLength_for_liniear_feet_right!=0)?parseFloat(total_FT) + parseFloat(WrapLength_for_liniear_feet_right):parseFloat(total_FT) + parseFloat(newParams.leanR_p_d);
                                        }
                                        if(CHKCalculation.height==true){
                                            total_FT = parseFloat(total_FT) + parseFloat(newParams.leanR_p_h *2);
                                        }
                                    }

                                    let finalCost  = (total_FT * newCost);
                                    let additionalFeatureCost =  (finalCost % 1 == 0) ? finalCost : finalCost.toFixed(2)
                                    t_c = parseFloat(t_c) + parseFloat(additionalFeatureCost);
                                    extra_items.push({'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':parseFloat(additionalFeatureCost)});
                                } else if (AdditionalObj.cost_type=="sqft") {

                                    var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leantoPriceCalculation.totalDimension);

                                    let finalCost  = (splval * newCost) / 100;
                                    let additionalFeatureCost =  (finalCost % 1 == 0) ? finalCost : finalCost.toFixed(2)

                                    let sideWallsCount = const_var.cbClosedSideWalls + const_var.flClosedSideWalls + const_var.llClosedSideWalls + const_var.rlClosedSideWalls + const_var.blClosedSideWalls;
                                    let endWallsCount = const_var.cbClosedEndWalls + const_var.flClosedEndWalls + const_var.llClosedEndWalls + const_var.rlClosedEndWalls + const_var.blClosedEndWalls;
                                    
                                    let roofPrice =  0;
                                    let sidePrice = 0;
                                    let endPrice = 0;
                                    let endCount = 0;
                                    let sideCount = 0;


                                    // console.log(const_var.wallsData,"const_var.wallsData")
                                    if(Object.keys(const_var.wallsData['center']).length>0)
                                    {
                                        sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['center'].closedSideWalls);
                                        endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['center'].closedEndWalls);
                                        roofPrice =  parseFloat(roofPrice) + parseFloat(((newParams.p_w+1) * (newParams.p_d) * (newCost)));
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((newParams.p_d) * (newParams.p_h) * (newCost )* sideCount)); 
                                        endPrice = parseFloat(endPrice) + parseFloat(((newParams.p_h+1) * (newParams.p_w) *(newCost)* endCount));
                                    }if(Object.keys(const_var.wallsData['frontLean']).length>0 && newParams.add_front_lean==true)
                                    {
                                        if(const_var.wallsData['frontLean'].closedSideWalls!=0)
                                        {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['frontLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((newParams.leanF_p_d) * (newParams.leanF_p_h) * (newCost )* sideCount)); 
                                        }
                                        if(const_var.wallsData['frontLean'].closedEndWalls!=0)
                                        {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['frontLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((newParams.leanF_p_h+1) * (newParams.leanF_p_w) *(newCost)* endCount));
                                        }
                                        
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((newParams.leanF_p_w+1) * (newParams.leanF_p_d) * (newCost)));
                                        
                                    }if(Object.keys(const_var.wallsData['backLean']).length>0 && newParams.add_back_lean==true)
                                    {
                                        if(const_var.wallsData['backLean'].closedSideWalls!=0)
                                        {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['backLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((newParams.leanB_p_d) * (newParams.leanB_p_h) * (newCost )* sideCount)); 
                                        }
                                        if(const_var.wallsData['backLean'].closedEndWalls!=0)
                                        {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['backLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((newParams.leanB_p_h+1) * (newParams.leanB_p_w) *(newCost)* endCount));
                                        }
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((newParams.leanB_p_w+1) * (newParams.leanB_p_d) * (newCost)));
                                    }if(Object.keys(const_var.wallsData['leftLean']).length>0 && newParams.add_left_lean==true)
                                    {
                                        if(const_var.wallsData['leftLean'].closedSideWalls!=0)
                                        {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['leftLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((newParams.lean_p_d) * (newParams.lean_p_h) * (newCost )* sideCount)); 
                                        }
                                        if(const_var.wallsData['leftLean'].closedEndWalls!=0)
                                        {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['leftLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((newParams.lean_p_h+1) * (newParams.lean_p_w) *(newCost)* endCount));
                                        }
                                        
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((newParams.lean_p_w+1) * (newParams.lean_p_d) * (newCost)));
                                        
                                    }if(Object.keys(const_var.wallsData['rightLean']).length>0 && newParams.add_right_lean==true)
                                    {
                                        if(const_var.wallsData['rightLean'].closedSideWalls!=0)
                                        {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['rightLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((newParams.leanR_p_d) * (newParams.leanR_p_h) * (newCost )* sideCount)); 
                                        }
                                        if(const_var.wallsData['rightLean'].closedEndWalls!=0)
                                        {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['rightLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((newParams.leanR_p_h+1) * (newParams.leanR_p_w) *(newCost)* endCount));
                                        }
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((newParams.leanR_p_w+1) * (newParams.leanR_p_d) * (newCost)));
                                    }

                                    let FullCalculatedPrice = parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
                                    var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leantoPriceCalculation.totalDimension);
                                    t_c = parseFloat(t_c) + parseFloat(((FullCalculatedPrice)));
                                    extra_items.push({'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':parseFloat(FullCalculatedPrice)});
                                


                                    // var splval = parseFloat(newParams.p_w * newParams.p_d) + parseFloat(leantoPriceCalculation.totalDimension);
                                    // t_c = parseFloat(t_c) + parseFloat(((splval * newCost)));

                                }
                                else
                                {
                                    t_c = parseFloat(t_c) + parseFloat(newCost);
                                    extra_items.push({'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':(parseInt(newCost))});
                                }
                                
                            }
                        } 
                        else {
                            newCost = 0;
                            AdditionalObj = val;
                        }
                    })
                } else {
                    newCost = 0;
                    AdditionalObj = val;
                }
                            
                        
                
            
            });
            post_data['building'].additionalFeaturesArray = const_var.additionalFeaturesArray;
            
        }
       

        if(const_var.ExtraItemsFeaturesQuantityArray!=undefined && const_var.ExtraItemsFeaturesQuantityArray.length>0)
        {
            let newCost = [];
            let newCost1 = 0, legsPrice = 0;
            const_var.ExtraItemsFeaturesQuantityArray.map((val, index) => {
             if (val != null){
                 newCost[index] = val.cost;
                let extraItemsCheckboxQuantityMatch = false;
                if(data.extra_items.length>0)
                {
                    if(data.extra_items[0].checkbox_quantity.length>0)
                    {
                        let filterData = data.extra_items[0].checkbox_quantity.filter(data=>data.label ==val.label);
                        if(filterData.length>0)
                        {
                            newCost1 = filterData[0].cost;

                            if (newParams.p_e_l &&  newParams.legstype.includes("double") && filterData[0].double_leg != undefined  && filterData[0].name == "bows" && filterData[0].double_leg !=0) {
                                legsPrice = legsPrice + filterData[0].double_leg;
                            } else if (newParams.p_e_l &&  newParams.legstype.includes("ladder") && filterData[0].ladder_leg != undefined  && filterData[0].name == "bows" && filterData[0].ladder_leg != 0) {
                                legsPrice = legsPrice + filterData[0].ladder_leg;
                            } else {
                                legsPrice = legsPrice + filterData[0].cost;
                            }

                        }else
                        {
                            newCost1 = 0;
                            extraItemsCheckboxQuantityMatch = true;
                        }
                        
                    }else
                    {
                        newCost[index] = 0;
                        newCost1 = 0;
                        extraItemsCheckboxQuantityMatch = true;
                    }
                if(val!=null && val.is_checked==true && extraItemsCheckboxQuantityMatch !== true)
                {
                    let leantoExtraItemCheckBoxQuantityCost = 0;
                    if(newParams.add_left_lean && const_var.leanGetDataLeftComparision){
                        const_var.leanGetDataLeftComparision.extra_items[0].checkbox_quantity.map((item)=>{
                            if(item.name == val.name){
                                leantoExtraItemCheckBoxQuantityCost = leantoExtraItemCheckBoxQuantityCost + item.cost;

                                if (newParams.lean_p_e_l &&  const_var.compareLeanLegs.leftLean.leanLegstype.includes("double") && item.double_leg != undefined  && item.name == "bows" && item.double_leg !=0) {
                                    legsPrice = legsPrice + item.double_leg;
                                } else if (newParams.lean_p_e_l &&  const_var.compareLeanLegs.leftLean.leanLegstype.includes("ladder") && item.ladder_leg != undefined  && item.name == "bows" && item.ladder_leg != 0) {
                                    legsPrice = legsPrice + item.ladder_leg;
                                } else {
                                    legsPrice = legsPrice + item.cost;
                                }
                            }
                        })
                    }
                    if(newParams.add_right_lean && const_var.leanGetDataRightComparision){
                        const_var.leanGetDataRightComparision.extra_items[0].checkbox_quantity.map((item)=>{
                            if(item.name == val.name){
                                leantoExtraItemCheckBoxQuantityCost = leantoExtraItemCheckBoxQuantityCost + item.cost;

                                if (newParams.leanR_p_e_l &&  const_var.compareLeanLegs.rightLean.leanRLegstype.includes("double") && item.double_leg != undefined  && item.name == "bows" && item.double_leg !=0) {
                                    legsPrice = legsPrice + item.double_leg;
                                } else if (newParams.leanR_p_e_l &&  const_var.compareLeanLegs.rightLean.leanRLegstype.includes("ladder") && item.ladder_leg != undefined  && item.name == "bows" && item.ladder_leg != 0) {
                                    legsPrice = legsPrice + item.ladder_leg;
                                } else {
                                    legsPrice = legsPrice + item.cost;
                                }
                            }
                        })
                    }
                    if(newParams.add_front_lean && const_var.leanGetDataFrontComparision){
                        const_var.leanGetDataFrontComparision.extra_items[0].checkbox_quantity.map((item)=>{
                            if(item.name == val.name){
                                leantoExtraItemCheckBoxQuantityCost = leantoExtraItemCheckBoxQuantityCost + item.cost;

                                if (newParams.leanF_p_e_l &&  const_var.compareLeanLegs.frontLean.leanFLegstype.includes("double") && item.double_leg != undefined  && item.name == "bows" && item.double_leg !=0) {
                                    legsPrice = legsPrice + item.double_leg;
                                } else if (newParams.leanF_p_e_l &&  const_var.compareLeanLegs.frontLean.leanFLegstype.includes("ladder") && item.ladder_leg != undefined  && item.name == "bows" && item.ladder_leg != 0) {
                                    legsPrice = legsPrice + item.ladder_leg;
                                } else {
                                    legsPrice = legsPrice + item.cost;
                                }
                            }
                        })
                    }                                        
                    if(newParams.add_back_lean && const_var.leanGetDataBackComparision){
                        const_var.leanGetDataBackComparision.extra_items[0].checkbox_quantity.map((item)=>{
                            if(item.name == val.name){
                                leantoExtraItemCheckBoxQuantityCost = leantoExtraItemCheckBoxQuantityCost + item.cost;

                                if (newParams.leanB_p_e_l &&  const_var.compareLeanLegs.backLean.leanBLegstype.includes("double") && item.double_leg != undefined  && item.name == "bows" && item.double_leg !=0) {
                                    legsPrice = legsPrice + item.double_leg;
                                } else if (newParams.leanB_p_e_l &&  const_var.compareLeanLegs.backLean.leanBLegstype.includes("ladder") && item.ladder_leg != undefined  && item.name == "bows" && item.ladder_leg != 0) {
                                    legsPrice = legsPrice + item.ladder_leg;
                                } else {
                                    legsPrice = legsPrice + item.cost;
                                }
                            }
                        })
                    }
                    if (val.name=="bows" && fourthCenterCostWithExtrabows && !fourfeetOnCenterCertificateCheck) {
                        legsPrice = 0;
                    }

                    t_c = (val.name == "bows") ? (parseFloat(t_c) + parseFloat(val.quantity  * legsPrice)) : parseFloat(t_c) + (parseFloat(val.quantity * newCost1)) + parseFloat(val.quantity  * leantoExtraItemCheckBoxQuantityCost);
                    if (val.name=="bows" && fourthCenterCostWithExtrabows && !fourfeetOnCenterCertificateCheck ) {
                        extra_items.push({'is_disabled':true,'is_edit':false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price': (val.name == "bows") ? parseFloat(val.quantity  * legsPrice) : (parseFloat((val.quantity * newCost1)) + parseFloat((val.quantity * leantoExtraItemCheckBoxQuantityCost)))});
                    }else{
                        extra_items.push({'is_edit':false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price': (val.name == "bows") ? parseFloat(val.quantity  * legsPrice) : (parseFloat((val.quantity * newCost1)) + parseFloat((val.quantity * leantoExtraItemCheckBoxQuantityCost)))});
                    }
                }
                 
                }else{
                    extraItemsCheckboxQuantityMatch = true;
                }
             }  
            });
            post_data['building'].fourthCenterCostWithExtrabows = fourthCenterCostWithExtrabows;
            post_data['building'].ExtraItemsFeaturesQuantityArray = const_var.ExtraItemsFeaturesQuantityArray;
        }
        post_data['building'].manufacturerId= manufacturerId;
        post_data['building'].price = parseFloat(t_c);
        post_data['building'].order_total = parseFloat(t_c);
        post_data['building'].grand_total = parseFloat(t_c);
        
        let leantoRoofColorPrice = 0;
        let leantoWallColorPrice = 0;
        let leantoTrimColorPrice = 0;
        let leantoSquareFeetPrice = 0;

            if(post_data['building'].leanto!=undefined && post_data['building'].leanto.length>0)
            {
                for(var i=0;i<=post_data['building'].leanto.length-1;i++)
                {
                    var leanPrice = (post_data['building'].leanto[i].t_c_b==undefined)?const_var.leanto[i].t_c_b:post_data['building'].leanto[i].t_c_b;
                    leantoSquareFeetPrice = parseFloat(leantoSquareFeetPrice) + parseFloat(post_data['building'].leanto[i].width * (post_data['building'].leanto[i].total_length!=undefined)?post_data['building'].leanto[i].total_length:post_data['building'].leanto[i].length);
                    if(isNaN(parseFloat(leanPrice))==true)
                    {
                        leanPrice = 0;
                    }
                    if(const_var.c_m_a_Colors[params.p_r_c_id].cost!=0)
                    {
                        leantoRoofColorPrice = parseFloat(leantoRoofColorPrice) + (parseFloat(post_data['building'].leanto[i].basic_price) * parseFloat(const_var.c_m_a_Colors[params.p_r_c_id].cost))/100;
                    }
                    if(const_var.c_m_a_Colors[params.p_w_c_id].cost!=0)
                    {
                        if(post_data['building'].leanto[i].utility_price!=undefined)
                        {
                            leantoWallColorPrice = parseFloat(leantoWallColorPrice) + parseFloat(post_data['building'].leanto[i].front_wall_price) + parseFloat(post_data['building'].leanto[i].utility_price) + parseFloat(post_data['building'].leanto[i].side_wall_price);
                        }else
                        {
                            leantoWallColorPrice = parseFloat(post_data['building'].leanto[i].front_wall_price) + parseFloat(post_data['building'].leanto[i].back_wall_price) +  parseFloat(post_data['building'].leanto[i].side_wall_price);
                        }
                    }
                    if(const_var.c_m_a_Colors[params.p_t_c_id].cost!=0)
                    {
                        leantoTrimColorPrice = parseFloat(leantoTrimColorPrice) + parseFloat(post_data['building'].leanto[i].height_price);
                    }
    
                    post_data['building'].order_total = parseFloat(post_data['building'].order_total + parseFloat(leanPrice));
                    //post_data['building'].order_total = (post_data['building'].order_total + (rightleanPrice));
                }
            }else
            {
                post_data['building'].order_total = post_data['building'].order_total;
            }
            
        // }
        if(RoofColorObj.cost!=0)
        {
            if (RoofColorObj.cost_type==1) { 
                 post_data['building'].roof_color_price = (((parseFloat(leantoRoofColorPrice)+parseFloat(post_data['building'].roof_style_price))* parseFloat(RoofColorObj.cost))/100).toFixed(2);
            } else if (RoofColorObj.cost_type==2) {
                 post_data['building'].roof_color_price = (((parseFloat(leantoSquareFeetPrice)+parseFloat(post_data['building'].width * post_data['building'].length))* parseFloat(RoofColorObj.cost))).toFixed(2);
            } else {
                 post_data['building'].roof_color_price = (((parseFloat(leantoRoofColorPrice)+parseFloat(post_data['building'].roof_style_price))+ parseFloat(RoofColorObj.cost))).toFixed(2);
            }
           post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].roof_color_price); 
           post_data['building'].roof_color.roof_color_price = post_data['building'].roof_color_price;
        }
        if(WallColorObj.cost!=0)
        {
            
            let wallPriceCal = 0;
            if(post_data['building'].utility_price!=undefined && params.p_u_c==true)
            {
                wallPriceCal = parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price)+parseFloat(post_data['building'].utility_price);
            }else{
                wallPriceCal = parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price);
            }
            if ( post_data['building'].utility_front_price !=undefined && newParams.isBreezeway && newParams.cB_addStorage_check_front){
                wallPriceCal = wallPriceCal + parseFloat(post_data['building'].utility_front_price);
            }
            if(WallColorObj.cost_type==1)
            { 
                post_data['building'].wall_color_price = (((parseFloat(leantoWallColorPrice) + parseFloat(wallPriceCal))* parseFloat(WallColorObj.cost))/100).toFixed(2);
            }else if(WallColorObj.cost_type==2)
            {
                post_data['building'].wall_color_price = (((parseFloat(leantoSquareFeetPrice) + parseFloat(post_data['building'].width * post_data['building'].length))* parseFloat(WallColorObj.cost))).toFixed(2);
            }else{
                post_data['building'].wall_color_price = (((parseFloat(leantoWallColorPrice) + parseFloat(wallPriceCal))+ parseFloat(WallColorObj.cost))).toFixed(2);
            }
            post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].wall_color_price);
            post_data['building'].wall_color.wall_color_price = post_data['building'].wall_color_price;
        }if(TrimColorObj.cost!=0)
        {
            if(TrimColorObj.cost_type==1)
            {    
                 let leantrimPrice = ((parseFloat(leantoTrimColorPrice) + parseFloat(leantoRoofColorPrice)) * TrimColorObj.cost)/100;
                 post_data['building'].trim_color_price = 
                 (((parseFloat(post_data['building'].roof_style_price) + parseFloat(post_data['building'].height_price
                  + parseFloat(leantrimPrice))) * TrimColorObj.cost)/100).toFixed(2);
            }else if(TrimColorObj.cost_type==2)
            {
                post_data['building'].trim_color_price = ((parseFloat(leantoSquareFeetPrice) + parseFloat(post_data['building'].width * post_data['building'].length)) * TrimColorObj.cost).toFixed(2);
             
            }else{
                let leantrimPrice = ((parseFloat(leantoTrimColorPrice) + parseFloat(leantoRoofColorPrice)) + TrimColorObj.cost);
                post_data['building'].trim_color_price = (((parseFloat(post_data['building'].roof_style_price) + parseFloat(post_data['building'].height_price + parseFloat(leantrimPrice))) + TrimColorObj.cost)).toFixed(2);
             
            }
             post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].trim_color_price);
             post_data['building'].trim_color.trim_color_price = post_data['building'].trim_color_price;
        }
        // if(const_var.garageDoorColor[newParams.g_d_c_id].cost!=0)
        // {
        //     let garageDoorColorPrice = parseFloat(post_data['building'].garageDoor_color_price);
        //     post_data['building'].garageDoor_color_price = parseFloat(const_var.UpdatedPriceData.garageDoor_color_price):((parseFloat(garageDoorColorPrice)* parseFloat(const_var.garageDoorColor[newParams.g_d_c_id].cost))/100);
        //     post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].garageDoor_color_price);
        //     post_data['building'].garageDoorColor.garageDoor_color_price = parseFloat(post_data['building'].garageDoor_color_price);
        // }
        if(newParams.p_w_c_n==true && WainscotColorObj.cost!=0)
        {
             if(WainscotColorObj.cost_type==1)
             {    
                  if(post_data['building'].wainscot_price==0)
                  {
                     post_data['building'].wainscot_color_price = (data.panel[0].cost  * WainscotColorObj.cost)/100;
                  }else
                  {
                     post_data['building'].wainscot_color_price = (parseFloat(post_data['building'].wainscot_price)  * WainscotColorObj.cost)/100;
                  }
             }else if(WainscotColorObj.cost_type==2)
             {
                 //console.log(params.p_w_c_c_id,const_var.c_m_a_Colors,const_var.UpdatedPriceData.color_price_changed,'const_var.UpdatedPriceData.color_price_changed')
                 if(post_data['building'].wainscot_price==0)
                  {
                     post_data['building'].wainscot_color_price = ((parseFloat(leantoSquareFeetPrice) + parseFloat(post_data['building'].width * post_data['building'].length)) * WainscotColorObj.cost).toFixed(2);
                  }else
                  {
                     post_data['building'].wainscot_color_price = ((parseFloat(leantoSquareFeetPrice) + parseFloat(post_data['building'].width * post_data['building'].length)) * WainscotColorObj.cost).toFixed(2);
                  }
                  //console.log(const_var.UpdatedPriceData.color_price_changed,'const_var.UpdatedPriceData.color_price_changed',((parseFloat(leantoSquareFeetPrice) + (parseFloat(post_data['building'].width * post_data['building'].length))) * const_var.c_m_a_Colors[params.p_t_c_id].cost).toFixed(2),const_var.c_m_a_Colors[params.p_t_c_id].cost,post_data['building'].wainscot_color_price)
             }else{
                 if(post_data['building'].wainscot_price==0)
                  {
                     post_data['building'].wainscot_color_price = (data.panel[0].cost  + WainscotColorObj.cost);
                  }else
                  {
                     post_data['building'].wainscot_color_price = (parseFloat(post_data['building'].wainscot_price)  + WainscotColorObj.cost);
                  }
             }
            // post_data['building'].wainscot_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wainscot_color_price:(parseFloat(post_data['building'].wainscot_price)  * const_var.c_m_a_Colors[newParams.p_w_c_c_id].cost)/100;
             post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].wainscot_color_price);
             post_data['building'].wainscot.wainscot_color_price = post_data['building'].wainscot_color_price;
        }
        
        
        post_data['building'].order_total = post_data['building'].order_total;
        post_data['building'].sub_order_total = post_data['building'].order_total;
        BuildingPriceArrarNew['order_total'] = post_data['building'].order_total;
        BuildingPriceArrarNew['sub_order_total'] = post_data['building'].order_total;
        let surcharge_by_mfg = [];
        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]!=undefined && Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]).length>0)
        {
            surcharge_by_mfg = const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n].filter(data =>data.surcharge_on_discounted_subtotal==1);
            if(surcharge_by_mfg.length>0)
            {
                post_data['building'].surcharge_on_discounted_subtotal = 1;
            }else{
                post_data['building'].surcharge_on_discounted_subtotal = 0;
            }
        }
        if (surcharge_by_mfg.length == 0 ){
            if(CalculatesurchargeFees==undefined)
            {
                CalculatesurchargeFees = 0;
            }else
            {
                CalculatesurchargeFees = parseFloat(const_var.order_extra_items_Compare['surchargeFees']);
            }
            // if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]==undefined)
            // {
            //     const_var.order_extra_items['surchargeFees'] = 0;
            // }
            //console.log(const_var.stateManufacturerAcordingAPIDiscount['surcharge'],const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'],"const_var.stateManufacturerAcordingAPIDiscount['surcharge']");
            // console.log(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n],"const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]")
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]==undefined )
            {
                //console.log()
                if(const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n]!=undefined)
                {
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n] = (const_var.stateManufacturerAcordingAPIDiscount['surchargeArray']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n].length>0)?const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n]:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n];
                }else
                {
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'] = [];
                }
            }
            let filterData = "";
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]!=undefined && Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]).length>0)
            {
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].is_edit==undefined && const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n].length>0)
                {
                    let filterData1 = const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n].filter(data =>(parseFloat(post_data['building'].roof_style_price)+parseFloat(leantoPriceCalculation.totalBasePrice)) >=data.price_from && (parseFloat(post_data['building'].roof_style_price)+parseFloat(leantoPriceCalculation.totalBasePrice))<=data.price_to && data.percentage_of=="basic_price");
                    filterData = const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n].filter(data =>post_data['building'].order_total >=data.price_from && post_data['building'].order_total<=data.price_to);
                    filterData = (filterData1.length==0)?filterData:filterData1;
                    let len = filterData.length-1;
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n] = (filterData[len]!=undefined)?filterData[len]:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n];
                    if(filterData.length==0)
                    {
                        const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n] = (filterData.length==0)?undefined:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n];
                        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]==undefined){
                            const_var.order_extra_items_Compare['surchargeFees'] =  (isNaN(parseFloat(const_var.order_extra_items_Compare['surchargeFees']))==true)?0:const_var.order_extra_items_Compare['surchargeFees'];
                        }
                    }
                }else{
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n] = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n];
                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]!=undefined)
                    {
                        // ASK
                        // const_var.UpdatedPriceData.surcharge_taxable = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable;
                    }
                }
                
            }
            
            //console.log(filterData,"filterData",const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n],const_var.stateManufacturerAcordingAPIDiscount['surcharge'])
            post_data['building'].surcharge_amount = const_var.order_extra_items_Compare['surchargeFees'];
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]!=undefined  && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]!=0&& Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]).length>0)
            {
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].taxable==1)
                {   
                    if (const_var.surcharge_amount_is_edit!=undefined && const_var.surcharge_amount_is_edit==true) {
                        const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].is_edit = true;
                    }
                        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].is_edit==undefined)
                        {
                            const_var.order_extra_items_Compare['surchargeFees'] = 0;
                            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount_type=='per')
                            {
                                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].percentage_of=="building_amount")
                                {
                                    CalculatesurchargeFees = parseFloat((parseFloat(BuildingPriceArrarNew['order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount))/100).toFixed(2);
                                }else
                                {
                                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].percentage_of=="basic_price")
                                    {
                                        CalculatesurchargeFees = parseFloat((parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice))*(parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount))/100).toFixed(2);
                                    }else
                                    {
                                        CalculatesurchargeFees = parseFloat((parseFloat(BuildingPriceArrarNew['sub_order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount))/100).toFixed(2);
                                    }
                                    //console.log(CalculatesurchargeFees,"CalculatesurchargeFees",const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount,BuildingPriceArrarNew['sub_order_total']);
                                }
                            }else
                            {
                                CalculatesurchargeFees = parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount);
                            }
                            CalculatesurchargeFees = CalculatesurchargeFees;    
                        }else
                        {
                            CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                        }
                    
                    CalculatesurchargeFees = CalculatesurchargeFees;    
                    post_data['building'].surcharge_taxable = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].taxable;
                    post_data['building'].surcharge_amount = CalculatesurchargeFees;
                    BuildingPriceArrarNew['surcharge_amount'] =  parseFloat(post_data['building'].surcharge_amount);
                    post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].surcharge_amount);
                    BuildingPriceArrarNew['order_total'] = parseFloat(BuildingPriceArrarNew['order_total']) + parseFloat(post_data['building'].surcharge_amount);
                    if(const_var.order_extra_items_Compare['surchargeFees']==0)
                    {
                        const_var.order_extra_items_Compare['surchargeFees'] = parseFloat(CalculatesurchargeFees);
                    }
                }else
                {
                    // if(const_var.crmSetting.is_Edit==true )
                    // {
                        // if(const_var.UpdatedPriceData.surcharge_taxable==1)
                        // {
                            CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                         // post_data['building'].surcharge_taxable = const_var.UpdatedPriceData.surcharge_taxable;
                            post_data['building'].surcharge_taxable = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].taxable;
                            post_data['building'].surcharge_amount = CalculatesurchargeFees;
                            BuildingPriceArrarNew['surcharge_amount'] =  parseFloat(post_data['building'].surcharge_amount);
                            post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].surcharge_amount);
                            BuildingPriceArrarNew['order_total'] = parseFloat(BuildingPriceArrarNew['order_total']) + parseFloat(post_data['building'].surcharge_amount);
                        // }
                    // }
                }
                
            }   
            post_data['building'].sub_order_total =  parseFloat(post_data['building'].order_total);
            BuildingPriceArrarNew['sub_order_total'] = parseFloat(post_data['building'].order_total);
        }

        // if(const_var.order_extra_items['surchargeFees']==undefined)
        // {
        //     const_var.order_extra_items['surchargeFees'] = 0;
        // }
        // post_data['building'].surcharge_amount = const_var.order_extra_items['surchargeFees']; 

        
       if(const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n].length>0 )
            {
                let checkMFGDiscount = false;
                for(var i=0;i<const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n].length;i++)
                {
                   if(post_data['building'].order_total >= parseInt(const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n][i].price_from)  && post_data['building'].order_total <=parseInt(const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n][i].price_to))
                   {
                        checkMFGDiscount = true;
                        let percentage = const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n][i].amount;
                        post_data['building'].discount_rate = percentage;
                        post_data['building'].discount_type = (const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n][i].amount_type=="%")?"per":'amt';
                        // const_var.UpdatedPriceData.discount_type = post_data['building'].discount_type;
                        post_data['building'].discount_amount = (post_data['building'].discount_type=="per")?((post_data['building'].order_total * percentage) /100).toFixed(2):(percentage);
                        //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].discount_amount;
                        BuildingPriceArrarNew['sub_order_total'] = BuildingPriceArrarNew['order_total'] - post_data['building'].discount_amount;
                        BuildingPriceArrarNew['discount_order_total'] = parseFloat(post_data['building'].discount_amount);
                        post_data['building'].sub_order_total = post_data['building'].sub_order_total - post_data['building'].discount_amount;
                   }else
                   {
                        if(checkMFGDiscount==false && post_data['building'].order_total > parseInt(const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n][i].price_from)  && post_data['building'].order_total > parseInt(const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n][i].price_to))
                       {
                            let percentage = 0;
                            post_data['building'].discount_rate = percentage;
                            // post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                            post_data['building'].discount_type = (const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n][i].amount_type=="%")?"per":'amt';
                            post_data['building'].discount_amount = (post_data['building'].discount_type=="per")?((post_data['building'].order_total * percentage) /100).toFixed(2):(percentage);
                            //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].discount_amount;
                            BuildingPriceArrarNew['sub_order_total'] = BuildingPriceArrarNew['order_total'] - post_data['building'].discount_amount;
                            BuildingPriceArrarNew['discount_order_total'] = parseFloat(post_data['building'].discount_amount);
                            post_data['building'].sub_order_total = post_data['building'].sub_order_total - post_data['building'].discount_amount;
                       } else {
                        if(checkMFGDiscount==false)
                        {
                            let percentage = 0;
                            post_data['building'].discount_rate = percentage;
                            post_data['building'].discount_type = (const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][newParams.m_s_n][i].amount_type=="%")?"per":'amt';
                            post_data['building'].discount_amount = (post_data['building'].discount_type=="per")?((post_data['building'].order_total * percentage) /100).toFixed(2):(percentage);
                            //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].discount_amount;
                            const_var.BuildingPriceArrar['sub_order_total'] = const_var.BuildingPriceArrar['order_total'] - post_data['building'].discount_amount;
                            const_var.BuildingPriceArrar['discount_order_total'] = parseFloat(post_data['building'].discount_amount);
                            post_data['building'].sub_order_total = post_data['building'].sub_order_total - post_data['building'].discount_amount;
                        }
                    }
                   }
                }
            }else
            {
                let percentage = 0;
                post_data['building'].discount_rate = percentage;
                // post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                post_data['building'].discount_type = "per";
                post_data['building'].discount_amount = (post_data['building'].discount_type=="per")?((post_data['building'].order_total * percentage) /100).toFixed(2):(percentage);
                //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].discount_amount;
                BuildingPriceArrarNew['sub_order_total'] = BuildingPriceArrarNew['order_total'] - post_data['building'].discount_amount;
                BuildingPriceArrarNew['discount_order_total'] = parseFloat(post_data['building'].discount_amount);
                post_data['building'].sub_order_total = post_data['building'].sub_order_total - post_data['building'].discount_amount;
            }

        if (surcharge_by_mfg.length>0) {
                post_data['building'].sub_order_total =  parseFloat(post_data['building'].sub_order_total);
                const_var.BuildingPriceArrar['sub_order_total'] = parseFloat(post_data['building'].sub_order_total);
                
                if(CalculatesurchargeFees==undefined){
                    CalculatesurchargeFees = 0;
                } else {
                    CalculatesurchargeFees = parseFloat(const_var.order_extra_items_Compare['surchargeFees']);
                }
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]==undefined )
                {
                    if(const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n]!=undefined)
                    {
                        const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n] = (const_var.stateManufacturerAcordingAPIDiscount['surchargeArray']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n].length>0)?const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n]:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n];
                    }else
                    {
                        const_var.stateManufacturerAcordingAPIDiscount['surcharge'] = [];
                    }
                }
                let filterData = "";
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]!=undefined && Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]).length>0)
                {
                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].is_edit==undefined && const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n].length>0)
                    {
                        let filterData1 = const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n].filter(data =>(parseFloat(post_data['building'].roof_style_price)+parseFloat(leantoPriceCalculation.totalBasePrice)) >=data.price_from && (parseFloat(post_data['building'].roof_style_price)+parseFloat(leantoPriceCalculation.totalBasePrice))<=data.price_to && data.percentage_of=="basic_price");
                        filterData = const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][newParams.m_s_n].filter(data =>post_data['building'].sub_order_total >=data.price_from && post_data['building'].sub_order_total<=data.price_to && data.percentage_of=="building_amount");
                        filterData = (filterData1.length==0)?filterData:filterData1;
                        let len = filterData.length-1;
                        const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n] = (filterData[len]!=undefined)?filterData[len]:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n];
                        if(filterData.length==0)
                        {
                            const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n] = (filterData.length==0)?undefined:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n];
                            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]==undefined)
                            {
                                const_var.order_extra_items_Compare['surchargeFees'] =  (isNaN(parseFloat(const_var.order_extra_items_Compare['surchargeFees']))==true)?0:const_var.order_extra_items_Compare['surchargeFees'];
                            }
                        }
                    }else{
                        const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n] = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n];
                    }
                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]!=undefined)
                    {
                        const_var.UpdatedPriceData.surcharge_taxable = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].taxable;
                    }
                }
                post_data['building'].surcharge_amount = const_var.order_extra_items_Compare['surchargeFees'];
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]!=undefined  && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]!=0&& Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]).length>0)
                {
                    
                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].taxable==1 )
                    {   
                        if (const_var.surcharge_amount_is_edit!=undefined && const_var.surcharge_amount_is_edit==true) {
                            const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].is_edit = true;
                        }
                            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].is_edit==undefined)
                            {
                                const_var.order_extra_items_Compare['surchargeFees'] = 0;
                                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount_type=='per')
                                {
                                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].percentage_of=="building_amount")
                                    {
                                        CalculatesurchargeFees = parseFloat((parseFloat(const_var.BuildingPriceArrar['sub_order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount))/100).toFixed(2);
                                    }else
                                    {
                                        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].percentage_of=="basic_price")
                                        {
                                            CalculatesurchargeFees = parseFloat((parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice))*(parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount))/100).toFixed(2);
                                        }else
                                        {
                                            CalculatesurchargeFees = parseFloat((parseFloat(const_var.BuildingPriceArrar['sub_order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount))/100).toFixed(2);
                                        }
                                    }
                                }else
                                {
                                    CalculatesurchargeFees = parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount);
                                }
                            }else
                            {
                                CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                            }
                        CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                        post_data['building'].surcharge_taxable = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].taxable;
                        post_data['building'].surcharge_amount = CalculatesurchargeFees;
                        const_var.BuildingPriceArrar['surcharge_amount'] =  parseFloat(post_data['building'].surcharge_amount);
                        post_data['building'].sub_order_total = parseFloat(post_data['building'].sub_order_total) + parseFloat(post_data['building'].surcharge_amount);
                        const_var.BuildingPriceArrar['sub_order_total'] = parseFloat(const_var.BuildingPriceArrar['sub_order_total']) + parseFloat(post_data['building'].surcharge_amount);
                        if(const_var.order_extra_items_Compare['surchargeFees']==0)
                        {
                            const_var.order_extra_items_Compare['surchargeFees'] = parseFloat(CalculatesurchargeFees);
                        }
                    }else
                    {
                        CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                        post_data['building'].surcharge_taxable = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].taxable;
                        post_data['building'].surcharge_amount = CalculatesurchargeFees;
                        const_var.BuildingPriceArrar['surcharge_amount'] =  parseFloat(post_data['building'].surcharge_amount);
                        post_data['building'].sub_order_total = parseFloat(post_data['building'].sub_order_total) + parseFloat(post_data['building'].surcharge_amount);
                        const_var.BuildingPriceArrar['sub_order_total'] = parseFloat(const_var.BuildingPriceArrar['sub_order_total']) + parseFloat(post_data['building'].surcharge_amount);
                    }
                    
                }
         }
            

        BuildingPriceArrarNew['new_sub_order_total'] = 0;
            let calVar = 10;

            if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][newParams.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['commissions'][newParams.m_s_n].length>0)
            {
                let FilterData = const_var.stateManufacturerAcordingAPIDiscount['commissions'][newParams.m_s_n].filter(data=>data.component==undefined || data.component=="building_amount");
                if(FilterData.length > 0){
                    for(var i=0;i<FilterData.length;i++)
                    // for(var i=0;i<const_var.stateManufacturerAcordingAPIDiscount['commissions'][newParams.m_s_n].length;i++)
                    {
                       if(post_data['building'].order_total >= parseInt(FilterData[i].from)  && post_data['building'].order_total <=parseInt(FilterData[i].to))
                       {
                           calVar  = FilterData[i].percentage;
                           const_var.downPersentage = FilterData[i].percentage;
                           post_data['building'].down_payment_total = ((post_data['building'].sub_order_total * const_var.downPersentage) /100).toFixed(2);
                           post_data['building'].down_payment_rate = const_var.downPersentage;
                           post_data['building'].down_payment_type = "per";
                           post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                           post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                           post_data['building'].dealer_deposit = (post_data['building'].sub_order_total * const_var.downPersentage) /100;
                           BuildingPriceArrarNew['down_payment_total'] =  (parseFloat(BuildingPriceArrarNew['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                           BuildingPriceArrarNew['dealer_deposit'] =  (parseFloat(BuildingPriceArrarNew['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                           BuildingPriceArrarNew['new_sub_order_total'] = parseFloat(BuildingPriceArrarNew['sub_order_total']) - parseFloat(BuildingPriceArrarNew['down_payment_total']);
                       }else
                       {
                        const_var.downPersentage = calVar;
                        post_data['building'].down_payment_total = ((post_data['building'].sub_order_total) * const_var.downPersentage /100).toFixed(2);
                        post_data['building'].down_payment_rate = const_var.downPersentage;
                        post_data['building'].down_payment_type = "per";
                        post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                        post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                        post_data['building'].dealer_deposit = (post_data['building'].sub_order_total) * const_var.downPersentage /100;
                        BuildingPriceArrarNew['down_payment_total'] =  (parseFloat(BuildingPriceArrarNew['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                        BuildingPriceArrarNew['dealer_deposit'] =  (parseFloat(BuildingPriceArrarNew['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                        BuildingPriceArrarNew['new_sub_order_total'] = parseFloat(BuildingPriceArrarNew['sub_order_total']) - parseFloat(BuildingPriceArrarNew['down_payment_total']);
                       }
                    }
                }
                else{
                    const_var.downPersentage = 10;
                    post_data['building'].down_payment_total = ((post_data['building'].sub_order_total) * const_var.downPersentage /100).toFixed(2);
                    post_data['building'].down_payment_rate = const_var.downPersentage;
                    post_data['building'].down_payment_type = "per";
                    post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                    post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                    post_data['building'].dealer_deposit = (post_data['building'].sub_order_total) * const_var.downPersentage /100;
                    BuildingPriceArrarNew['down_payment_total'] =  (parseFloat(BuildingPriceArrarNew['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                    BuildingPriceArrarNew['dealer_deposit'] =  (parseFloat(BuildingPriceArrarNew['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                    BuildingPriceArrarNew['new_sub_order_total'] = parseFloat(BuildingPriceArrarNew['sub_order_total']) - parseFloat(BuildingPriceArrarNew['down_payment_total']);
                }
            }else{
                const_var.downPersentage = 10;
                post_data['building'].down_payment_total = ((post_data['building'].sub_order_total) * const_var.downPersentage /100).toFixed(2);
                post_data['building'].down_payment_rate = const_var.downPersentage;
                post_data['building'].down_payment_type = "per";
                post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                post_data['building'].dealer_deposit = (post_data['building'].sub_order_total) * const_var.downPersentage /100;
                BuildingPriceArrarNew['down_payment_total'] =  (parseFloat(BuildingPriceArrarNew['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                BuildingPriceArrarNew['dealer_deposit'] =  (parseFloat(BuildingPriceArrarNew['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                BuildingPriceArrarNew['new_sub_order_total'] = parseFloat(BuildingPriceArrarNew['sub_order_total']) - parseFloat(BuildingPriceArrarNew['down_payment_total']);
            }
        

        BuildingPriceArrarNew['new_down_payment_total'] = parseFloat(post_data['building'].down_payment_total);
        
            if(const_var.stateManufacturerAcordingAPIDiscount['discount'][newParams.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['discount'][newParams.m_s_n].length>0  && const_var.stateManufacturerAcordingAPIDiscount['discount'][newParams.m_s_n].dealer_discount!='')
            {
                for(var i=0;i<const_var.stateManufacturerAcordingAPIDiscount['discount'][newParams.m_s_n].length;i++)
                {
                   if(post_data['building'].order_total >= parseInt(const_var.stateManufacturerAcordingAPIDiscount['discount'][newParams.m_s_n][i].from)  && post_data['building'].order_total <=parseInt(const_var.stateManufacturerAcordingAPIDiscount['discount'][newParams.m_s_n][i].to))
                   {
                        let percentage = const_var.stateManufacturerAcordingAPIDiscount['discount'][newParams.m_s_n][i].dealer_discount;
                        post_data['building'].down_payment_discount_rate = percentage;
                        post_data['building'].down_payment_discount_type = (const_var.stateManufacturerAcordingAPIDiscount['discount'][newParams.m_s_n][i].dealer_discount_in=="%")?"per":'amt';
                        const_var.UpdatedPriceData.down_payment_discount_type = post_data['building'].down_payment_discount_type;
                        post_data['building'].down_payment_discount_total = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):((parseFloat(post_data['building'].down_payment_total) * parseFloat(percentage ))/100).toFixed(2);
                        BuildingPriceArrarNew['down_payment_discount_total'] = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):parseFloat(parseFloat(BuildingPriceArrarNew['down_payment_total']) * parseFloat(percentage ))/100;
                        BuildingPriceArrarNew['new_down_payment_total'] = parseFloat(BuildingPriceArrarNew['down_payment_total']) - parseFloat(BuildingPriceArrarNew['down_payment_discount_total']);
                        //post_data['building'].down_payment_total = (parseInt(post_data['building'].down_payment_total) - parseInt(post_data['building'].down_payment_discount_total));
                        //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].down_payment_discount_total;
                   }else
                   {
                        if(post_data['building'].order_total > parseInt(const_var.stateManufacturerAcordingAPIDiscount['discount'][newParams.m_s_n][i].from)  && post_data['building'].order_total >parseInt(const_var.stateManufacturerAcordingAPIDiscount['discount'][newParams.m_s_n][i].to))
                        {
                            let percentage = 0;
                            post_data['building'].down_payment_discount_rate = percentage;
                            post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                            post_data['building'].down_payment_discount_total = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):((parseFloat(post_data['building'].down_payment_total) * parseFloat(percentage ))/100).toFixed(2);
                            BuildingPriceArrarNew['down_payment_discount_total'] = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):parseFloat(parseFloat(BuildingPriceArrarNew['down_payment_total']) * parseFloat(percentage ))/100;
                            BuildingPriceArrarNew['new_down_payment_total'] = parseFloat(BuildingPriceArrarNew['down_payment_total']) - parseFloat(BuildingPriceArrarNew['down_payment_discount_total']);
                        
                        }
                   }
                }
            }else
            {
                let percentage = 0;
                post_data['building'].down_payment_discount_rate = percentage;
                post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                post_data['building'].down_payment_discount_total = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):((parseFloat(post_data['building'].down_payment_total) * parseFloat(percentage ))/100).toFixed(2);
                BuildingPriceArrarNew['down_payment_discount_total'] = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):parseFloat(parseFloat(BuildingPriceArrarNew['down_payment_total']) * parseFloat(percentage ))/100;
                BuildingPriceArrarNew['new_down_payment_total'] = parseFloat(BuildingPriceArrarNew['down_payment_total']) - parseFloat(BuildingPriceArrarNew['down_payment_discount_total']);
                
            }
   
        
        if(post_data['building'].discount_type==undefined)
        {
            post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
        }
        if(post_data['building'].discount_rate ==undefined)
        {
            post_data['building'].discount_rate = (const_var.UpdatedPriceData.discount_rate!=undefined)?const_var.UpdatedPriceData.discount_rate:0;
        }
        if(post_data['building'].discount_amount ==undefined)
        {
            post_data['building'].discount_amount = (const_var.UpdatedPriceData.discount_amount!=undefined)?const_var.UpdatedPriceData.discount_amount:0;
        }

        if(post_data['building'].down_payment_discount_type==undefined)
        {
            post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
        }
        if(post_data['building'].down_payment_discount_total ==undefined)
        {
            post_data['building'].down_payment_discount_total = (const_var.UpdatedPriceData.down_payment_discount_total!=undefined)?const_var.UpdatedPriceData.down_payment_discount_total:0;
        }
        if(post_data['building'].down_payment_discount_rate==undefined)
        {
            post_data['building'].down_payment_discount_rate = (const_var.UpdatedPriceData.down_payment_discount_rate!=undefined)?const_var.UpdatedPriceData.down_payment_discount_rate:0;
        }
        if(const_var.tax.type=="%")
        {
            const_var.tax.type = "per";
        }
        if(const_var.tax.type=="$")
        {
            const_var.tax.type = "amt";
        }
        post_data['building'].grand_total = parseFloat(post_data['building'].order_total);

        // if(post_data['building'].down_payment_discount_total!=undefined && post_data['building'].down_payment_discount_total!=0)
        // {
        //     post_data['building'].grand_total = parseInt(post_data['building'].grand_total) - parseInt(post_data['building'].down_payment_discount_total);
        // }
        // This code is return for North Carolina SBS abd SFG manufacturer
        BuildingPriceArrarNew['labor_fee'] = 0

        // console.log('BuildingPriceArrarNew',BuildingPriceArrarNew, const_var.order_extra_items_Compare)
        // if(const_var.order_extra_items_Compare!=undefined && params.p_s_n == 29 && (params.m_s_n == 3 || params.m_s_n == 9 || params.m_n_f_1 == 3 || params.m_n_f_1 == 9 || params.m_n_f_2 == 3 || params.m_n_f_2 == 9))
        // {
        //     BuildingPriceArrarNew['labor_fee'] = parseFloat(const_var.order_extra_items_Compare['extra_labour']) + parseFloat(const_var.order_extra_items_Compare['order_permit_fee']);
        //     console.log('BuildingPriceArrarNew',BuildingPriceArrarNew['labor_fee'])
            
        //     post_data['building'].sub_order_total = parseFloat(post_data['building'].sub_order_total) + parseFloat(BuildingPriceArrarNew['labor_fee'])
        // }
        // console.log('BuildingPriceArrarNew',BuildingPriceArrarNew)
        let newTaxArray = [];
        var taxCalculation = 0;
        if(const_var.tax.percentage!=0 && const_var.tax.percentage!=undefined)
        {
            taxCalculation = (const_var.tax.type=="per")?(taxCalculation + ((post_data['building'].sub_order_total * (const_var.tax.percentage))/100)).toFixed(2):parseFloat(taxCalculation +const_var.tax.percentage);
            const_var.tax.amount = (taxCalculation);
            const_var.tax.name =(const_var.tax.name=="" || const_var.tax.name==undefined)?'sales_tax':const_var.tax.name;
            //newTaxArray[const_var.MoreTaxinputs.length] = const_var.tax;
            post_data['building'].parentTax = const_var.tax;
            const_var.sendTaxarray.push(const_var.tax);
            //const_var.newTaxCalcuArray[const_var.tax.name] = const_var.tax.amount;
           // const_var.newTaxCalcuArray.push(const_var.tax);
        }

        var moretaxCalculation = 0;
        if(const_var.MoreTaxinputs!=undefined && const_var.MoreTaxinputs.length>0)
        {
            const_var.MoreTaxinputs.map((val, index) => {
                const_var.MoreTaxinputs[index].amount = (val.type=="per")?((post_data['building'].sub_order_total * (val.percentage))/100).toFixed(2):val.percentage ;
                //post_data['building'].tax_amount = moretaxCalculation;
                const_var.MoreTaxinputs[index].more_tax_amount = (val.type=="per")?((post_data['building'].sub_order_total * (val.percentage))/100).toFixed(2):val.percentage;
                moretaxCalculation = parseFloat(moretaxCalculation) + parseFloat(const_var.MoreTaxinputs[index].amount);
                const_var.MoreTaxinputs[index].name =(const_var.MoreTaxinputs[index].name=="" || const_var.MoreTaxinputs[index].name==undefined)?"sales_tax":const_var.MoreTaxinputs[index].name;
                const_var.sendTaxarray.push(const_var.MoreTaxinputs[index]);
            });
            post_data['building'].MoreTaxinputs = const_var.MoreTaxinputs;

            //const_var.newTaxCalcuArray.push(const_var.MoreTaxinputs);
        }
        
        post_data['building'].all_tax_amount = (const_var.tax.type=="per")?parseFloat(taxCalculation) + parseFloat(moretaxCalculation):parseFloat(taxCalculation) + parseFloat(moretaxCalculation);
        //console.log(const_var.newTaxCalcuArray,"const_var.newTaxCalcuArray")
        post_data['building'].tax_amount = (const_var.tax.type=="per")?parseFloat(taxCalculation):parseFloat(taxCalculation);
        post_data['building'].tax_zipcode = newParams.tax_zipcode;
        post_data['building'].tax_exempt = (newParams.tax_exempt==false)?0:1;
        post_data['building'].tax = const_var.sendTaxarray;//{...newTaxArray,...const_var.MoreTaxinputs};
        
        post_data['building'].grand_total =  post_data['building'].grand_total + parseFloat(taxCalculation) + parseFloat(moretaxCalculation);
        if(const_var.card_processing_fee!=undefined && Object.keys(const_var.card_processing_fee).length>0 && const_var.card_processing_fee.is_edit==undefined )
        {
            if(const_var.card_processing_fee.percentage_of=="base_price")
            {
                if(const_var.card_processing_fee.type=="%")
                {
                    const_var.order_extra_items_Compare['processing_fee'] = ((post_data['building'].roof_style_price * const_var.card_processing_fee.fee)/100).toFixed(2);
                }else
                {
                    const_var.order_extra_items_Compare['processing_fee'] = (parseFloat(const_var.card_processing_fee.fee)).toFixed(2);
                }
            }if(const_var.card_processing_fee.percentage_of=="building_amount")
            {
                if(const_var.card_processing_fee.type=="%")
                {
                    const_var.order_extra_items_Compare['processing_fee'] = ((post_data['building'].order_total * const_var.card_processing_fee.fee)/100).toFixed(2);
                }else
                {
                    const_var.order_extra_items_Compare['processing_fee'] = (parseFloat(const_var.card_processing_fee.fee)).toFixed(2);
                }
            }
            if(const_var.card_processing_fee.percentage_of=="dealer_deposit")
            {
                if(const_var.card_processing_fee.type=="%")
                {
                    const_var.order_extra_items_Compare['processing_fee'] = ((post_data['building'].dealer_deposit * const_var.card_processing_fee.fee)/100).toFixed(2);
                }else
                {
                    const_var.order_extra_items_Compare['processing_fee'] = (parseFloat(const_var.card_processing_fee.fee)).toFixed(2);
                }
            }
        }
        if(const_var.stateManufacturerAcordingAPI[params.p_s_n]!=undefined && const_var.stateManufacturerAcordingAPI[params.p_s_n].length>0)
        {
            const_var.stateManufacturerAcordingAPI[params.p_s_n].map((val,key)=>{
                if(val.id == newParams.m_s_n)
                {
                    const_var.order_extra_items_Compare['document_fee'] = (val.document_fee!=null)?val.document_fee:0;
                    
                    if(const_var.order_extra_items['permit'] == "yes"){
                        const_var.order_extra_items_Compare['order_permit_fee'] = (val.order_permit_fee!=null)?val.order_permit_fee:0;
                    }else{
                        const_var.order_extra_items_Compare['order_permit_fee'] = 0;
                    }
                    const_var.order_extra_items_Compare['extra_labour'] = (val.labor_fee!=null)?val.labor_fee:0;
                    const_var.order_extra_items_Compare['order_processing_fee'] = (val.order_processing_fee!=null)?val.order_processing_fee:0;
                }
            })
        }

        if(const_var.order_extra_items_Compare!=undefined && params.p_s_n == 29 && (params.m_s_n == 3 || params.m_s_n == 9 || params.m_n_f_1 == 3 || params.m_n_f_1 == 9 || params.m_n_f_2 == 3 || params.m_n_f_2 == 9))
        {
            BuildingPriceArrarNew['labor_fee'] = parseFloat(const_var.order_extra_items_Compare['extra_labour']) + parseFloat(const_var.order_extra_items_Compare['order_permit_fee']);
            
            post_data['building'].sub_order_total = parseFloat(post_data['building'].sub_order_total) + parseFloat(BuildingPriceArrarNew['labor_fee'])
        }
        BuildingPriceArrarNew['additional_charges'] = 0;
        let activeEngDrawingCost = const_var.order_extra_items_Compare['engineer_drawings']
       
        if(building_drawing_opt != undefined && building_drawing_opt.length > 0){
            // let currEDName = const_var.order_extra_items_Compare['engineer_drawings'] > 0 && const_var.order_extra_items_Compare['engineer_drawings']
            let currEDName = const_var.order_extra_items_Compare['engineer_drawings_name'] != undefined && const_var.order_extra_items_Compare['engineer_drawings_name'] != '' ? const_var.order_extra_items_Compare['engineer_drawings_name'] : (const_var.order_extra_items_Compare['engineer_drawings'] > 0 ? 'Engineered Drawing' : '')
            // let activeEngDrawingCost = currEDName != '' ? building_drawing_opt.filter(obj => obj.name.toLowerCase() == currEDName.toLowerCase()) : building_drawing_opt.filter(obj => obj.is_default == 'yes')
            if(currEDName != ''){
                let activeEngDrawingItem = building_drawing_opt.filter(obj => obj.name.toLowerCase() == currEDName.toLowerCase()) 
                
                if(activeEngDrawingItem.length > 0){
                    activeEngDrawingCost = const_var.order_extra_items_Compare['engineer_drawings']
                    const_var.order_extra_items_Compare['engineer_drawings_name'] = currEDName
                    // activeEngDrawingCost = activeEngDrawingItem[0].cost
                } 
                else{
                    activeEngDrawingItem = building_drawing_opt.filter(obj => obj.is_default == 'yes')
                    activeEngDrawingCost = activeEngDrawingItem.length > 0 ? activeEngDrawingItem[0].cost : 0

                    const_var.order_extra_items_Compare['engineer_drawings_name'] = activeEngDrawingItem[0].name
                    const_var.order_extra_items_Compare['engineer_drawings'] = activeEngDrawingCost ? activeEngDrawingCost : 0
                    // const_var.order_extra_items_Compare['engineer_drawings'] = activeEngDrawingCost
                    // activeEngDrawingCost = activeEngDrawingItem.length > 0 ? activeEngDrawingItem[0].cost : 0
                }
                // const_var.order_extra_items_Compare['engineer_drawings_name'] = currEDName
                // const_var.order_extra_items_Compare['engineer_drawings'] = activeEngDrawingCost ? activeEngDrawingCost : 0
            }
            else{
                let activeEngDrawingItem = building_drawing_opt.filter(obj => obj.is_default == 'yes')
                // activeEngDrawingCost = activeEngDrawingItem.length > 0 ? activeEngDrawingItem[0].cost : 0
                activeEngDrawingCost = activeEngDrawingItem.length > 0 ? activeEngDrawingItem[0].cost : 0// const_var.order_extra_items_Compare['engineer_drawings']
                const_var.order_extra_items_Compare['engineer_drawings'] = activeEngDrawingCost
                const_var.order_extra_items_Compare['engineer_drawings_name'] = activeEngDrawingItem.length > 0 ? activeEngDrawingItem[0].name : 'None'
                // const_var.order_extra_items_Compare['engineer_drawings'] = activeEngDrawingItem.length > 0 ? activeEngDrawingItem[0].cost : 0
            }
        }

        if(const_var.order_extra_items_Compare!=undefined)
        {
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['equipment_rental']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['document_fee']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['order_processing_fee']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['delivery_fee']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(activeEngDrawingCost);
            // post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['engineer_drawings']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['freight']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['extra_labour']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['grvy_value']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['concrete_work']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['ground_work']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['order_permit_fee'])


            post_data['building'].grvy_value = parseFloat(const_var.order_extra_items_Compare['grvy_value']);
            const_var.order_extra_items_Compare['order_processing_fee'] = (const_var.order_extra_items_Compare['order_processing_fee']==undefined)?0:const_var.order_extra_items_Compare['order_processing_fee'];
            BuildingPriceArrarNew['grvy_value'] = post_data['building'].grvy_value;
            
            if(newParams.lift_type==true && data.side[0].lift_type!=''){
                post_data['building'].lift_type = newParams.lift_type;
                post_data['building'].lifttype_name = data.side[0].lift_type;
                post_data['building'].lifttype_price = data.side[0].lifttype_price;
                BuildingPriceArrarNew['additional_charges'] = parseFloat(BuildingPriceArrarNew['additional_charges'])+ parseFloat(post_data['building'].lifttype_price);
            }else{
                newParams.lifttype_price = 0;
                post_data['building'].lifttype_name = "NA";
                post_data['building'].lifttype_price = 0;
                BuildingPriceArrarNew['additional_charges'] = parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(post_data['building'].lifttype_price);
            }
            // if(params.p_s_n == 29 && (params.m_s_n == 3 || params.m_s_n == 9 || params.m_n_f_1 == 3 || params.m_n_f_1 == 9 || params.m_n_f_2 == 3 || params.m_n_f_2 == 9)){
            if(params.p_s_n == 29 && (manufacturerId == 3 || manufacturerId == 9)){
                BuildingPriceArrarNew['additional_charges'] = parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(const_var.order_extra_items_Compare['equipment_rental']) + parseFloat(const_var.order_extra_items_Compare['concrete_work']) + parseFloat(const_var.order_extra_items_Compare['ground_work']) + parseFloat(const_var.order_extra_items_Compare['document_fee']) + parseFloat(const_var.order_extra_items_Compare['order_processing_fee']) + parseFloat(const_var.order_extra_items_Compare['delivery_fee']) + parseFloat(activeEngDrawingCost)+parseFloat(const_var.order_extra_items_Compare['freight'])
                // BuildingPriceArrarNew['additional_charges'] = parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(const_var.order_extra_items_Compare['equipment_rental']) + parseFloat(const_var.order_extra_items_Compare['concrete_work']) + parseFloat(const_var.order_extra_items_Compare['ground_work']) + parseFloat(const_var.order_extra_items_Compare['document_fee']) + parseFloat(const_var.order_extra_items_Compare['order_processing_fee']) + parseFloat(const_var.order_extra_items_Compare['delivery_fee']) + parseFloat(const_var.order_extra_items_Compare['engineer_drawings'])+parseFloat(const_var.order_extra_items_Compare['freight'])
            }else{
                BuildingPriceArrarNew['additional_charges'] = parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(const_var.order_extra_items_Compare['equipment_rental']) + parseFloat(const_var.order_extra_items_Compare['concrete_work']) + parseFloat(const_var.order_extra_items_Compare['ground_work']) + parseFloat(const_var.order_extra_items_Compare['document_fee']) + parseFloat(const_var.order_extra_items_Compare['order_processing_fee']) + parseFloat(const_var.order_extra_items_Compare['delivery_fee']) + parseFloat(activeEngDrawingCost)+parseFloat(const_var.order_extra_items_Compare['freight'])+parseFloat(const_var.order_extra_items_Compare['extra_labour'])+parseFloat(const_var.order_extra_items_Compare['order_permit_fee']);
                // BuildingPriceArrarNew['additional_charges'] = parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(const_var.order_extra_items_Compare['equipment_rental']) + parseFloat(const_var.order_extra_items_Compare['concrete_work']) + parseFloat(const_var.order_extra_items_Compare['ground_work']) + parseFloat(const_var.order_extra_items_Compare['document_fee']) + parseFloat(const_var.order_extra_items_Compare['order_processing_fee']) + parseFloat(const_var.order_extra_items_Compare['delivery_fee']) + parseFloat(const_var.order_extra_items_Compare['engineer_drawings'])+parseFloat(const_var.order_extra_items_Compare['freight'])+parseFloat(const_var.order_extra_items_Compare['extra_labour'])+parseFloat(const_var.order_extra_items_Compare['order_permit_fee']);
            }
            
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]!=undefined && Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]).length>0)
            {
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].taxable==0)
                {
                    if (const_var.surcharge_amount_is_edit!=undefined && const_var.surcharge_amount_is_edit==true) {
                        const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].is_edit = true;
                    }
                        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].is_edit==undefined)
                        {
                            const_var.order_extra_items_Compare['surchargeFees'] = 0;
                            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount_type=='per')
                            {
                                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].percentage_of=="building_amount")
                                {
                                    CalculatesurchargeFees = parseFloat((parseFloat(BuildingPriceArrarNew['sub_order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount))/100).toFixed(2);
                                }else
                                {
                                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].percentage_of=="basic_price")
                                    {
                                        CalculatesurchargeFees = parseFloat((parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice))*(parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount))/100).toFixed(2);
                                    }else
                                    {
                                        CalculatesurchargeFees = parseFloat((parseFloat(BuildingPriceArrarNew['sub_order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount))/100).toFixed(2);
                                    }
                                    //console.log(CalculatesurchargeFees,"CalculatesurchargeFees",const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount,BuildingPriceArrarNew['sub_order_total']);
                                }
                            }else
                            {
                                CalculatesurchargeFees = parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].amount);
                            }
                            CalculatesurchargeFees = CalculatesurchargeFees;
                        }else
                        {
                            CalculatesurchargeFees = CalculatesurchargeFees;
                        }
                    post_data['building'].surcharge_taxable = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n].taxable;
                    post_data['building'].surcharge_amount = CalculatesurchargeFees;
                    post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(CalculatesurchargeFees);
                    BuildingPriceArrarNew['additional_charges'] = parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(CalculatesurchargeFees);
                    if(const_var.order_extra_items_Compare['surchargeFees']==0)
                    {
                        const_var.order_extra_items_Compare['surchargeFees'] = parseFloat(CalculatesurchargeFees);
                    }
                }
                
            }else{
                CalculatesurchargeFees = 0;
                // console.log(post_data['building'].surcharge_amount,"post_data['building'].surcharge_amount")
                BuildingPriceArrarNew['additional_charges'] = parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(CalculatesurchargeFees);
            }
            // if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][newParams.m_s_n]==undefined )
            // {
            //     CalculatesurchargeFees = (post_data['building'].surcharge_amount!=0)?post_data['building'].surcharge_amount:parseFloat(CalculatesurchargeFees);
            //     post_data['building'].surcharge_taxable = 0;
            //     post_data['building'].surcharge_amount = CalculatesurchargeFees;
            //     post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(CalculatesurchargeFees);
            //     BuildingPriceArrarNew['additional_charges'] = parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(CalculatesurchargeFees);
            // }
            if(const_var.order_extra_items_Compare['dont_show_processing_fee_pdf']!=undefined && const_var.order_extra_items_Compare['dont_show_processing_fee_pdf'] == "1")
            {
                BuildingPriceArrarNew['new_down_payment_total'] = BuildingPriceArrarNew['new_down_payment_total']+parseFloat(const_var.order_extra_items_Compare['processing_fee']);
                //BuildingPriceArrarNew['new_sub_order_total'] = BuildingPriceArrarNew['new_sub_order_total']+parseFloat(const_var.order_extra_items_Compare['processing_fee']);
                BuildingPriceArrarNew['processing_fee'] = parseFloat(const_var.order_extra_items_Compare['processing_fee']);
                post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items_Compare['processing_fee']);
            }
            if(const_var.order_extra_items_Compare['dont_show_processing_fee_pdf']!=undefined && const_var.order_extra_items_Compare['dont_show_processing_fee_pdf'] == "2")
            {
                //BuildingPriceArrarNew['new_down_payment_total'] = BuildingPriceArrarNew['new_down_payment_total']+parseFloat(const_var.order_extra_items['processing_fee']);
                //BuildingPriceArrarNew['new_sub_order_total'] = BuildingPriceArrarNew['new_sub_order_total']+parseFloat(const_var.order_extra_items['processing_fee']);
                BuildingPriceArrarNew['processing_fee'] = parseFloat(const_var.order_extra_items_Compare['processing_fee']);
                //post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['processing_fee']);
            }
            if(post_data['building'].discount_amount!=undefined && post_data['building'].discount_amount!=0)
            {
                post_data['building'].has_grvy = 1;
            }else
            {
                post_data['building'].has_grvy = 0;
            }
            BuildingPriceArrarNew['has_grvy'] = post_data['building'].has_grvy;
            const_var.order_extra_items_Compare.has_grvy = post_data['building'].has_grvy;
            post_data['building'].order_extra_items = const_var.order_extra_items_Compare;
        }
        post_data['building'].state_mfg_zipcode = (const_var.state_mfg_zipcode!=undefined)?const_var.state_mfg_zipcode:'';
        if(params.p_s_n == 29 && (params.m_s_n == 3 || params.m_s_n == 9)){
            post_data['building'].due_upon_installation = (parseFloat(BuildingPriceArrarNew['new_sub_order_total']) + parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(BuildingPriceArrarNew['labor_fee']) + parseFloat(post_data['building'].all_tax_amount));
        }else{
            post_data['building'].due_upon_installation = (parseFloat(BuildingPriceArrarNew['new_sub_order_total']) + parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(post_data['building'].all_tax_amount));
        }
        //post_data['building'].due_upon_installation = (parseFloat(BuildingPriceArrarNew['new_sub_order_total']) + parseFloat(BuildingPriceArrarNew['additional_charges']) + parseFloat(BuildingPriceArrarNew['labor_fee']) + parseFloat(post_data['building'].all_tax_amount));
        BuildingPriceArrarNew['grand_total'] = post_data['building'].grand_total + post_data['building'].tax_amount;
        post_data['building'].grand_total = (post_data['building'].due_upon_installation + BuildingPriceArrarNew['new_down_payment_total'] + BuildingPriceArrarNew['grvy_value']);
        //console.log(BuildingPriceArrarNew['grand_total'],"BuildingPriceArrarNew['grand_total']",post_data['building'].grand_total,post_data['building'])
        post_data['building'].dealer_deposit = BuildingPriceArrarNew['new_down_payment_total'] + BuildingPriceArrarNew['grvy_value'];
        post_data['building']['extra_items'] = extra_items;
        if(pricing_data.overhang != undefined){
            post_data['building']['overhang'] = pricing_data.overhang;
        }
        post_data['building']['entry_points'] = newEntryPoint;
        post_data['building']['hide_price_calculation'] = const_var.hide_price_calculation;
        post_data['building'].BuildingPriceArrarNew = JSON.parse(JSON.stringify(BuildingPriceArrarNew));
        const_var.MainBuilingImage = const_var.renderer.domElement.toDataURL("image/jpeg");
        var newJsonData = {};
        newJsonData['building'] = JSON.parse(JSON.stringify({...const_var.order_extra_items_Compare,...post_data['building']}));
        newJsonData.building_total = t_c;
        const_var.ComparisionDataArray[iiD].post_data = JSON.parse(JSON.stringify(newJsonData));
        
        const_var.ComparisionDataArray[iiD].post_data = JSON.parse(JSON.stringify({...const_var.ComparisionDataArray[iiD].post_data,...const_var.LeadCustomerData}));
        const_var.ComparisionDataArray[iiD].request_data = JSON.parse(JSON.stringify(const_var.ComparisionDataArray[iiD].post_data));
        const_var.ComparisionDataArray[iiD].paramsData = JSON.parse(JSON.stringify({...newParams}));
        /*
            There is need to call this function in here beacuse we are not using const_var.UpdatedPriceData in compare shopping, 
            we need to call this in the cp function Only.
            The function call causes an issue when desigening a build from non-login estimator and then click on sales login
            then the in the `setDealerStateList` wee are  updateing the const_var.UpdatedPriceData variable 
            so this causes an issue in the filtterArrayElements function 
         */
        filtterArrayElements();
        

    } 
//     const convertToNumber = (price) => num => {
//   const pow = Math.pow(price, 2);
//   console.log(price, typeof price, num,pow,"convertToNumber",+(Math.round(num * pow) / pow));
//   return +(Math.round(num * pow) / pow)
// }
   const convertToNumber = (price) =>{
        return +(Math.round(price + "e+2")  + "e-2");
        //return (typeof price == "string")? Number(price) : price;
    }

   const convertToTwoDecimalNumber = (price) =>{
    
        price = parseFloat(price);
        let convertToTwoDecimal = Number.isInteger(price) ? price : price.toFixed(2);
        let convertToNumber = parseFloat(convertToTwoDecimal);

        return convertToNumber;
    }

    export const cP = (chk,isLean,componentIndex,componentVal,is_editChk)=>{
        // console.log("rahulllll",const_var.checkPanelForLean)
        const_var.BuildingPriceArrar['overhead_door_calculation'] = undefined;
        const_var.BuildingPriceArrar['insulation_calculation'] = undefined;
        const_var.newTaxCalcuArray = [];
        const_var.sendTaxarray = [];
        var CalculatesurchargeFees = 0;
        let CheckCut = chk;
        let data = const_var.a_p_d_a;
        let b_f_o_J = {};
        let t_c_b = 0;
        let t_c = 0;
        let post_data = {};
        post_data['building'] = {};
        let a_p_d_a = data;
        params.p_w = parseInt(params.p_w);
        params.p_d = parseInt(params.p_d);
        params.p_h = parseInt(params.p_h);
        var a,b = {}; 
        var extra_items = [];
        var extra_price_cal = [];
        var activeLean = "";
        let CalCulateRoofBasePrice = 0;
        let CalCulateRoofUtilityEndPrice = 0;
        let CalCulateRoofEndClosePrice = 0;
        let CalCulateRoofEndGablePrice = 0;
        let UpdatePriceRecord = false;
        var VUEData = (const_var.CallApionAction==false)?const_var.defaultProData:'';
       if(const_var.UpdatedPriceData.length>0)
       {
            UpdatePriceRecord = true;
       }
       if(const_var.loginSession==false)
       {
            const_var.UpdatedPriceData.down_payment_rate = undefined;
       }
       let heightFullData = ""; 
       a = {'state_name':const_var.stateNameAcordingAPI[params.p_s_n].name,'state_list':params.p_s_n,'state':params.p_s_n,'manufacturer_name':const_var.stateManufacturerAcordingAPIDiscount['manuName'][params.m_s_n],'manufacturer':params.m_s_n,"building_type":params.p_b_t,"building_type_name":params.building_type_name,"display_building_type_name":params.building_type_name,"checkeditName":params.checkeditName,"other_building_type_name":params.other_building_type_name,"roof_style":params.p_r_s,"roof_style_name":const_var.TypeEnumID[params.p_r_s],"installation_surface":ConvStr(const_var.installationValue[params.p_i_s]),"width":(params.p_b_t =="2")?params.p_w+24:params.p_w,"length":params.p_d,"height":params.p_h,"roof_length":params.frame_length,"gauge":const_var.g_v,"front_wall":(params.p_f_w=="Extended Gable")?'extended_gable':ConvStr(params.p_f_w),"back_wall":(params.p_b_w=="Extended Gable")?'extended_gable':ConvStr(params.p_b_w),"left_wall":ConvStr(params.p_l_w),"right_wall":ConvStr(params.p_r_w),"back_wall_price":0,"front_wall_price":0,"left_wall_price":0,"right_wall_price":0,"front_wall_vertical":params.p_v_w,"back_wall_vertical":params.p_v_w,"left_wall_vertical":params.p_v_w,"right_wall_vertical":params.p_v_w,"vertical_walls":params.p_v_w,"heavy_snow":(const_var.CheckSnowLoadValue==35)?0:1,"certificate":const_var.c_f_aCer[params.p_e_i],"singleSlope":params.singleSlope,"isBreezeway":params.isBreezeway,"certificate_name":(const_var.c_f_aCer[params.p_e_i]!=undefined)?const_var.c_f_aCer[params.p_e_i].name:''};
        data  = a_p_d_a;   
        if(params.p_u_c==true)
        {
            data.side = data.side;
            data.panel = data.panel;
            data.end = data.end;
            heightFullData = (data.full_length_side!=undefined)?data.full_length_side:data.side;
        }else
        {
            data.side = (data.full_length_side!=undefined)?data.full_length_side:data.side;
            data.panel = ( data.full_length_panel!=undefined && (!const_var.checkPanelForLean.left && !const_var.checkPanelForLean.right)) ?data.full_length_panel: data.panel;
            data.end = (data.central_end!=undefined && data.central_end.length>0)?data.central_end:data.end;
            heightFullData = (data.full_length_side!=undefined)?data.full_length_side:data.side;
            if(isLean!=undefined && params.add_left_lean==true && const_var.leanGetDataLeft.central_side!=undefined && const_var.leanGetDataLeft.central_side.length>0)
            {
                data.side = const_var.leanGetDataLeft.central_side;
                heightFullData = (const_var.leanGetDataLeft.central_side_full_length!=undefined)?const_var.leanGetDataLeft.central_side_full_length:data.side;
            }
            if(isLean!=undefined &&params.add_front_lean==true && const_var.leanGetDataFront.central_side!=undefined && const_var.leanGetDataFront.central_side.length>0)
            {
                data.side = const_var.leanGetDataFront.central_side;
                heightFullData = (const_var.leanGetDataFront.central_side_full_length!=undefined)?const_var.leanGetDataFront.central_side_full_length:data.side;
            }
            if(isLean!=undefined &&params.add_left_lean==true && const_var.leanGetDataLeft.central_end!=undefined && const_var.leanGetDataLeft.central_end.length>0)
            {
                data.end = const_var.leanGetDataLeft.central_end;
            }
            if(isLean!=undefined && params.add_front_lean==true && const_var.leanGetDataFront.central_end!=undefined && const_var.leanGetDataFront.central_end.length>0)
            {
                data.end = const_var.leanGetDataFront.central_end;
            }
            if(isLean!=undefined && params.add_right_lean==true && const_var.leanGetDataRight.central_side!=undefined && const_var.leanGetDataRight.central_side.length>0)
            {
                data.side = const_var.leanGetDataRight.central_side;
                heightFullData = (const_var.leanGetDataRight.central_side_full_length!=undefined)?const_var.leanGetDataRight.central_side_full_length:data.side;
            }
            if(isLean!=undefined && params.add_right_lean==true && const_var.leanGetDataRight.central_end!=undefined && const_var.leanGetDataRight.central_end.length>0)
            {
                data.end = const_var.leanGetDataRight.central_end;
            }
            if(isLean!=undefined && params.add_back_lean==true && const_var.leanGetDataBack.central_side!=undefined && const_var.leanGetDataBack.central_side.length>0)
            {
                data.side = const_var.leanGetDataBack.central_side;
                heightFullData = (const_var.leanGetDataBack.central_side_full_length!=undefined)?const_var.leanGetDataBack.central_side_full_length:data.side;
            }
            if(isLean!=undefined && params.add_back_lean==true && const_var.leanGetDataBack.central_end!=undefined && const_var.leanGetDataBack.central_end.length>0)
            {
                data.end = const_var.leanGetDataBack.central_end;
            }
            
        }
        let LeftWallSidePrice = data.side;
        if(params.singleSlope==true)
        {
            LeftWallSidePrice = (data.side_slope_height!=undefined && data.side_slope_height.length>0)?data.side_slope_height:data.side;
        }
        let connection_feesCost = 0;
        let connection_feesEnd = 0;
        if(const_var.leanGetDataFront!="" && const_var.leanGetDataFront!=undefined && const_var.leanGetDataFront.connection_fees.length==0)
        {
            const_var.leanGetDataFront.connection_fees = [];
            const_var.leanGetDataFront.connection_fees.push({"cost":0,"end_cost":0});
        }
        if(const_var.leanGetDataBack!="" && const_var.leanGetDataBack!=undefined && const_var.leanGetDataBack.connection_fees.length==0)
        {
            const_var.leanGetDataBack.connection_fees = [];
            const_var.leanGetDataBack.connection_fees.push({"cost":0,"end_cost":0});
        }
        if(data.connection_fees!=undefined && data.connection_fees.length>0)
        {
            if((params.add_right_lean==true && const_var.leanGetDataRight!="" && const_var.leanGetDataRight!=undefined && const_var.leanGetDataRight.connection_fees.length>0))
            {
                connection_feesCost = (const_var.UpdatedPriceData.connection_fee_side_changed!=true)?const_var.UpdatedPriceData.connection_fee_side:((const_var.leanGetDataRight.connection_fees[0].cost) + (connection_feesCost));
                a.connection_fee_side = connection_feesCost;
            }if((params.add_left_lean==true && const_var.leanGetDataLeft!="" && const_var.leanGetDataLeft!=undefined && const_var.leanGetDataLeft.connection_fees.length>0))
            {
                connection_feesCost = (const_var.UpdatedPriceData.connection_fee_side_changed!=true)?const_var.UpdatedPriceData.connection_fee_side:((const_var.leanGetDataLeft.connection_fees[0].cost) + (connection_feesCost));
                a.connection_fee_side = connection_feesCost;
            }
            if((params.add_front_lean==true && const_var.leanGetDataFront!="" && const_var.leanGetDataFront!=undefined && const_var.leanGetDataFront.connection_fees.length>0))
            {
                connection_feesCost = (const_var.UpdatedPriceData.connection_fee_side_changed!=true)?const_var.UpdatedPriceData.connection_fee_side:((const_var.leanGetDataFront.connection_fees[0].cost) + (connection_feesCost));
                a.connection_fee_side = connection_feesCost;
            }
            if((params.add_back_lean==true && const_var.leanGetDataBack!="" && const_var.leanGetDataBack!=undefined && const_var.leanGetDataBack.connection_fees.length>0))
            {
                connection_feesCost = (const_var.UpdatedPriceData.connection_fee_side_changed!=true)?const_var.UpdatedPriceData.connection_fee_side:((const_var.leanGetDataBack.connection_fees[0].cost) + (connection_feesCost));
                a.connection_fee_side = connection_feesCost;
            }
            
        }else{
            a.connection_fee_side =  0;
        }
        if(data.connection_fees!=undefined && data.connection_fees.length>0)
        {
            // console.log(data,"data",const_var.UpdatedPriceData,"const_var.UpdatedPriceData",const_var.leanGetDataRight,"const_var.leanGetDataRight.");
            if((params.add_right_lean==true && const_var.leanGetDataRight!="" && const_var.leanGetDataRight!=undefined && const_var.leanGetDataRight.connection_fees.length>0))
            {
                connection_feesEnd = (const_var.UpdatedPriceData.connection_fee_end_changed!=true)?const_var.UpdatedPriceData.connection_fee_end:((const_var.leanGetDataRight.connection_fees[0].end_cost) + (connection_feesEnd));
                a.connection_fee_end = connection_feesEnd;
            }if((params.add_left_lean==true && const_var.leanGetDataLeft!="" && const_var.leanGetDataLeft!=undefined && const_var.leanGetDataLeft.connection_fees.length>0))
            {
                connection_feesEnd = (const_var.UpdatedPriceData.connection_fee_end_changed!=true)?const_var.UpdatedPriceData.connection_fee_end:((const_var.leanGetDataLeft.connection_fees[0].end_cost) + (connection_feesEnd));
                a.connection_fee_end = connection_feesEnd;
            }
            if((params.add_front_lean==true && const_var.leanGetDataFront!="" && const_var.leanGetDataFront!=undefined && const_var.leanGetDataFront.connection_fees.length>0))
            {
                connection_feesEnd = (const_var.UpdatedPriceData.connection_fee_end_changed!=true)?const_var.UpdatedPriceData.connection_fee_end:((const_var.leanGetDataFront.connection_fees[0].end_cost) + (connection_feesEnd));
                a.connection_fee_end = connection_feesEnd;
            }if((params.add_back_lean==true && const_var.leanGetDataBack!="" && const_var.leanGetDataBack!=undefined && const_var.leanGetDataBack.connection_fees.length>0 ))
            {
                connection_feesEnd = (const_var.UpdatedPriceData.connection_fee_end_changed!=true)?const_var.UpdatedPriceData.connection_fee_end:((const_var.leanGetDataBack.connection_fees[0].end_cost) + (connection_feesEnd));
                a.connection_fee_end = connection_feesEnd;
            }
            //b.connection_fee_side = (params.b_h_t2 )?(data.connection_fees[0].cost * 2):(data.connection_fees[0].cost);
            connection_feesEnd = (const_var.UpdatedPriceData.connection_fee_end_changed!=true)?const_var.UpdatedPriceData.connection_fee_end:((data.connection_fees[0].end_cost) + (connection_feesEnd));
            a.connection_fee_end = connection_feesEnd;

        }else{
            a.connection_fee_end =  0;
        }
    //    console.log(a,b);
        post_data['building'] = {...a,...b};
        // console.log(post_data['building'],"post_data['building']");
        t_c = 0;
        var vertiP = 0;
        var vertiP2 = 0;
        var mapVal = const_var.map[params.p_r_s];
        var utilityLen = (params.p_u_c==true)?Number(params.p_u_t):params.p_d;
        let endCostV3_front = ((params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true) && data.side_combo_v3.length>0 && params.p_f_w != "Close") ? data.end_combo_v3[0] : data.end[0]
        let endCostV3_back = ((params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true) && data.side_combo_v3.length>0 && params.p_b_w != "Close") ? data.end_combo_v3[0] : data.end[0]
        //console.log(UpdatePriceRecord,"UpdatePriceRecord", post_data['building'],"post_datapost_data['building']",const_var.UpdatedPriceData,"data",data);
        if(data.base.length>0)
        {
            for(var i=0;i< data.base.length;i++)
            {
                if(const_var.g_v==data.base[i].gauge)
                {
                   post_data['building'].roof_style_price = (const_var.UpdatedPriceData.roof_style_price_changed!=true)?const_var.UpdatedPriceData.roof_style_price:data.base[i][mapVal];
                    t_c = parseFloat(t_c) + parseFloat(post_data['building'].roof_style_price);
                    CalCulateRoofBasePrice = post_data['building'].roof_style_price;
                }
            }
        }else
        {
            post_data['building'].roof_style_price = (const_var.UpdatedPriceData.roof_style_price_changed!=true)?const_var.UpdatedPriceData.roof_style_price:0;
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].roof_style_price);
            CalCulateRoofBasePrice = post_data['building'].roof_style_price;
        }
       
        if ( params.cupola ) {
            let cupolaPrice = 0;
            const_var.cupolaEntries.length > 0 && const_var.cupolaEntries.map((cupola) => {
                cupolaPrice =  parseFloat(cupolaPrice) + parseFloat(cupola.cupola_price)
            })
            post_data['building'].cupola_obj = const_var.cupolaEntries;
            post_data['building']['cupolaEntries'] = const_var.cupolaEntries;
            t_c = parseFloat(t_c) + parseFloat(cupolaPrice);
        }
   
        
        // console.log(const_var.UpdatedPriceData.back_wall_price_changed,data.end,"const_var.UpdatedPriceData.back_wall_price_changed")
        if(post_data['building'].connection_fee_side!=undefined)
        {
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_side);
        }if(post_data['building'].connection_fee_end!=undefined)
        {
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_end);
        }
        
        // console.log( const_var.UpdatedPriceData.left_front_wrap_connection_fee_changed,const_var.UpdatedPriceData.right_front_wrap_connection_fee_changed, const_var.UpdatedPriceData.left_back_wrap_connection_fee_changed, const_var.UpdatedPriceData.right_back_wrap_connection_fee_changed);

        if(params.add_left_front_lean_porch==true && const_var.leanGetDataLeft!='' && const_var.leanGetDataLeft.connection_fees.length>0)
        {
            post_data['building'].connection_fee_left_front = (const_var.UpdatedPriceData.left_front_wrap_connection_fee_changed!=true)?const_var.UpdatedPriceData?.connection_fee_left_front:(const_var.leanGetDataLeft.connection_fees[0].wrap_around_cost);
            
            if ( post_data['building'].connection_fee_left_front != undefined) {
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_left_front);
            }
        }
        if(params.add_right_front_lean_porch==true && const_var.leanGetDataRight!=''  && const_var.leanGetDataRight.connection_fees.length>0)
        {
            post_data['building'].connection_fee_right_front = (const_var.UpdatedPriceData.right_front_wrap_connection_fee_changed!=true)?const_var.UpdatedPriceData?.connection_fee_right_front:(const_var.leanGetDataRight.connection_fees[0].wrap_around_cost);
           
            if ( post_data['building'].connection_fee_right_front != undefined) {
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_right_front);
            }
        }
        if(params.add_right_back_lean_porch==true && const_var.leanGetDataRight!=''  && const_var.leanGetDataRight.connection_fees.length>0)
        {
            post_data['building'].connection_fee_right_back = (const_var.UpdatedPriceData.right_back_wrap_connection_fee_changed!=true)?const_var.UpdatedPriceData?.connection_fee_right_back:(const_var.leanGetDataRight.connection_fees[0].wrap_around_cost);
            
            if ( post_data['building'].connection_fee_right_back != undefined) {
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_right_back);
            }
        }if(params.add_left_back_lean_porch==true && const_var.leanGetDataLeft!=''  && const_var.leanGetDataLeft.connection_fees.length>0)
        {
            post_data['building'].connection_fee_left_back = (const_var.UpdatedPriceData.left_back_wrap_connection_fee_changed!=true)?const_var.UpdatedPriceData?.connection_fee_left_back:(const_var.leanGetDataLeft.connection_fees[0].wrap_around_cost);
            if ( post_data['building'].connection_fee_left_back != undefined) {
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].connection_fee_left_back);
            }
        }
        if(params.p_l_w=="Close")
        {
            if(params.cB_addStorage_check_left!=true)
            {
              post_data['building'].left_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_wall_price_changed!=true)?const_var.UpdatedPriceData.left_wall_price:(params.p_v_w==true)? convertToTwoDecimalNumber(LeftWallSidePrice[0].vertical_side_cost + LeftWallSidePrice[0].side_close_cost):(LeftWallSidePrice[0].side_close_cost);
              t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
            }else
            {
              post_data['building'].left_wall_price = 0;
              t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
            }
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].left_wall_price);
        }if(params.p_l_w=="Half_Close")
        {
            post_data['building'].left_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_wall_price_changed!=true)?const_var.UpdatedPriceData.left_wall_price:(params.p_v_w==true)?((LeftWallSidePrice[0].half_vertical_side_cost)+(LeftWallSidePrice[0].half_side_close_cost)).toFixed(2):(LeftWallSidePrice[0].half_side_close_cost).toFixed(2);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].left_wall_price);
        }if(params.p_l_w=="One_Fourth_Close")
        {
            post_data['building'].left_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_wall_price_changed!=true)?const_var.UpdatedPriceData.left_wall_price:(params.p_v_w==true)?((LeftWallSidePrice[0].one_fourth_vertical_side_cost)+(LeftWallSidePrice[0].one_fourth_side_close_cost)).toFixed(2):(LeftWallSidePrice[0].one_fourth_side_close_cost).toFixed(2);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].left_wall_price);
        }if(params.p_l_w=="Three_Fourth_Close")
        {
            post_data['building'].left_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_wall_price_changed!=true)?const_var.UpdatedPriceData.left_wall_price:(params.p_v_w==true)?((LeftWallSidePrice[0].three_fourth_vertical_side_cost)+(LeftWallSidePrice[0].three_fourth_side_close_cost)).toFixed(2):(LeftWallSidePrice[0].three_fourth_side_close_cost).toFixed(2);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].left_wall_price);
        }if(params.p_l_w!=="Close" && params.p_l_w!=="Open" && params.p_l_w!=="Half_Close" && params.p_l_w!=="One_Fourth_Close" && params.p_l_w!=="Three_Fourth_Close")
        {
            //post_data['building'].left_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_wall_price_changed!=true)?const_var.UpdatedPriceData.left_wall_price:(params.p_v_w==true )? convertToTwoDecimalNumber(data.panel[0].vertical_panel_cost * params.p_l_w):(data.panel[0].cost * params.p_l_w);
            post_data['building'].left_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_wall_price_changed!=true)?const_var.UpdatedPriceData.left_wall_price:(params.p_v_w==true )? convertToTwoDecimalNumber((params.add_left_lean==true && const_var.checkPanelForLean.left==true && data.panel[0].vertical_roof_panel_cost!=undefined && data.panel[0].vertical_roof_panel_cost!=0)?(data.panel[0].vertical_roof_panel_cost * params.p_l_w):(data.panel[0].vertical_panel_cost * params.p_l_w)):((params.add_left_lean==true && const_var.checkPanelForLean.left==true && data.panel[0].horizontal_roof_panel_cost!=undefined && data.panel[0].horizontal_roof_panel_cost!=0)?(data.panel[0].horizontal_roof_panel_cost * params.p_l_w):data.panel[0].cost * params.p_l_w);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_price);
        }if(params.p_r_w=="Close")
        {
            if(params.cB_addStorage_check_right!=true)
            {
              post_data['building'].right_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_wall_price_changed!=true)?const_var.UpdatedPriceData.right_wall_price:(params.p_v_w==true)? convertToTwoDecimalNumber(data.side[0].vertical_side_cost+data.side[0].side_close_cost):(data.side[0].side_close_cost);
              t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
            }else
            {
              post_data['building'].right_wall_price = 0;
              t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
            }
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].right_wall_price);
        }if(params.p_r_w=="Half_Close")
        {
            post_data['building'].right_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_wall_price_changed!=true)?const_var.UpdatedPriceData.right_wall_price:(params.p_v_w==true)?(((data.side[0].half_vertical_side_cost)+(data.side[0].half_side_close_cost))):(data.side[0].half_side_close_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].right_wall_price);
        }if(params.p_r_w=="One_Fourth_Close")
        {
            post_data['building'].right_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_wall_price_changed!=true)?const_var.UpdatedPriceData.right_wall_price:(params.p_v_w==true)? convertToTwoDecimalNumber(data.side[0].one_fourth_vertical_side_cost+data.side[0].one_fourth_side_close_cost):(data.side[0].one_fourth_side_close_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].right_wall_price);
        }if(params.p_r_w=="Three_Fourth_Close")
        {
            post_data['building'].right_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_wall_price_changed!=true)?const_var.UpdatedPriceData.right_wall_price:(params.p_v_w==true)?(((data.side[0].three_fourth_vertical_side_cost)+(data.side[0].three_fourth_side_close_cost))):(data.side[0].three_fourth_side_close_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].right_wall_price);
        }if(params.p_r_w!=="Close" && params.p_r_w!=="Open" && params.p_r_w!=="Half_Close" && params.p_r_w!=="One_Fourth_Close" && params.p_r_w!=="Three_Fourth_Close")
        {
            //post_data['building'].right_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_wall_price_changed!=true)?const_var.UpdatedPriceData.right_wall_price:(params.p_v_w==true )? convertToTwoDecimalNumber(data.panel[0].vertical_panel_cost * params.p_r_w):(data.panel[0].cost * params.p_r_w);
            post_data['building'].right_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_wall_price_changed!=true)?const_var.UpdatedPriceData.right_wall_price:(params.p_v_w==true )? convertToTwoDecimalNumber((params.add_right_lean==true && const_var.checkPanelForLean.right==true && data.panel[0].vertical_roof_panel_cost!=undefined && data.panel[0].vertical_roof_panel_cost!=0)?(data.panel[0].vertical_roof_panel_cost * params.p_r_w):(data.panel[0].vertical_panel_cost * params.p_r_w)):(params.add_right_lean==true && const_var.checkPanelForLean.right==true && data.panel[0].horizontal_roof_panel_cost!=undefined && data.panel[0].horizontal_roof_panel_cost!=0)?(data.panel[0].horizontal_roof_panel_cost * params.p_r_w):(data.panel[0].cost * params.p_r_w);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_price);
        }if(params.p_f_w=="Close")
        {
            // console.log(const_var.UpdatedPriceData.front_wall_price_changed,"const_var.UpdatedPriceData.front_wall_price_changed")
            post_data['building'].front_wall_price = params.cB_addStorage_check_front ? 0 : (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_wall_price_changed!=true)?const_var.UpdatedPriceData.front_wall_price:(params.p_v_w==true)?convertToTwoDecimalNumber((endCostV3_front.vertical_ends_cost)+ (endCostV3_front.end_close_cost)):(endCostV3_front.end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].front_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].front_wall_price);
        }if(params.p_f_w=="Half_Close")
        {
            post_data['building'].front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_wall_price_changed!=true)?const_var.UpdatedPriceData.front_wall_price:(params.p_v_w==true)?(((endCostV3_front.half_vertical_ends_cost)+ (endCostV3_front.half_end_close_cost))):(endCostV3_front.half_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].front_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].front_wall_price);
        }if(params.p_f_w=="One_Fourth_Close")
        {
            post_data['building'].front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_wall_price_changed!=true)?const_var.UpdatedPriceData.front_wall_price:(params.p_v_w==true)?(convertToTwoDecimalNumber((endCostV3_front.one_fourth_vertical_ends_cost)+ (endCostV3_front.one_fourth_end_close_cost))):(endCostV3_front.one_fourth_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].front_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].front_wall_price);
        }if(params.p_f_w=="Three_Fourth_Close")
        {
            post_data['building'].front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_wall_price_changed!=true)?const_var.UpdatedPriceData.front_wall_price:(params.p_v_w==true)?(((endCostV3_front.three_fourth_vertical_ends_cost)+ (endCostV3_front.three_fourth_end_close_cost))):(endCostV3_front.three_fourth_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].front_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].front_wall_price);
        }if(params.p_f_w!=="Close" && params.p_f_w!=="Open" && params.p_f_w!=="Half_Close" && params.p_f_w!=="One_Fourth_Close" && params.p_f_w!=="Three_Fourth_Close")
        {
            if(params.p_f_w=="Gable")
            {
                if(params.p_v_w==true)
                {
                    if(const_var.c_f_a_sCer[params.p_e_i]==1)
                    {
                        //t_c = (data.gable_end[0].certified!=0)?t_c + (data.gable_end[0].vertical_certified) + data.gable_end[0].certified :t_c + (data.gable_end[0].vertical) + data.gable_end[0].uncertified;
                        vertiP = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_wall_price_changed!=true)?const_var.UpdatedPriceData.front_wall_price:(vertiP + (data.gable_end[0].vertical_certified)+data.gable_end[0].certified);
                    }else{
                        //t_c = t_c + (data.gable_end[0].vertical) + (data.gable_end[0].uncertified);
                        vertiP = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_wall_price_changed!=true)?const_var.UpdatedPriceData.front_wall_price:((vertiP + (data.gable_end[0].vertical)+ (data.gable_end[0].uncertified)));
                    }
                }else{
                    if(const_var.c_f_a_sCer[params.p_e_i]==1)
                    {
                        //t_c = (data.gable_end[0].certified!=0)?t_c + data.gable_end[0].certified :t_c + data.gable_end[0].uncertified;
                        vertiP = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_wall_price_changed!=true)?const_var.UpdatedPriceData.front_wall_price:((vertiP + data.gable_end[0].certified));
                    }else{
                        //t_c = t_c + data.gable_end[0].uncertified;
                        vertiP = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_wall_price_changed!=true)?const_var.UpdatedPriceData.front_wall_price:((vertiP + data.gable_end[0].uncertified));
                    }
                } 
            }else
            {
                if(params.p_v_w==true)
                {
                    //t_c = t_c + (data.gable_end[0].vertical_extended) + (data.gable_end[0].extended);
                    vertiP = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_wall_price_changed!=true)?const_var.UpdatedPriceData.front_wall_price:((vertiP + (data.gable_end[0].vertical_extended) + (data.gable_end[0].extended)));
                }else{    
                    //t_c = t_c+ (data.gable_end[0].extended);
                    vertiP = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_wall_price_changed!=true)?const_var.UpdatedPriceData.front_wall_price:((vertiP+(data.gable_end[0].extended)));
                } 
            }  
            post_data['building'].front_wall_price = vertiP;  
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].front_wall_price);
            //t_c = (const_var.c_f_a[params.p_e_i]==0)?t_c + 0:(data.gableCost[0].certified_cost) + t_c;
            CalCulateRoofEndGablePrice = post_data['building'].front_wall_price;
        }if(params.p_b_w=="Close")
        {
            if(params.p_u_c!=true)
            {
                post_data['building'].back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_wall_price_changed!=true)?const_var.UpdatedPriceData.back_wall_price:(params.p_v_w==true)?convertToTwoDecimalNumber((endCostV3_back.vertical_ends_cost)+(endCostV3_back.end_close_cost)):(endCostV3_back.end_close_cost);
                t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
                CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].back_wall_price);
            }else
            {
                post_data['building'].back_wall_price = 0;
                t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
                CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].back_wall_price);
            }
        }if(params.p_b_w=="Half_Close")
        {
            post_data['building'].back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_wall_price_changed!=true)?const_var.UpdatedPriceData.back_wall_price:(params.p_v_w==true)?(((endCostV3_back.half_vertical_ends_cost)+ (endCostV3_back.half_end_close_cost))):(endCostV3_back.half_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].back_wall_price);
        }if(params.p_b_w=="One_Fourth_Close")
        {
            post_data['building'].back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_wall_price_changed!=true)?const_var.UpdatedPriceData.back_wall_price:(params.p_v_w==true)?(((endCostV3_back.one_fourth_vertical_ends_cost)+ (endCostV3_back.one_fourth_end_close_cost))):(endCostV3_back.one_fourth_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].back_wall_price);
        }if(params.p_b_w=="Three_Fourth_Close")
        {
            post_data['building'].back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_wall_price_changed!=true)?const_var.UpdatedPriceData.back_wall_price:(params.p_v_w==true)?(((endCostV3_back.three_fourth_vertical_ends_cost)+ (endCostV3_back.three_fourth_end_close_cost))):(endCostV3_back.three_fourth_end_close_cost);
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
            CalCulateRoofEndClosePrice = parseFloat(CalCulateRoofEndClosePrice) + parseFloat(post_data['building'].back_wall_price);
        }if(params.p_b_w!=="Close" && params.p_b_w!=="Open" && params.p_b_w!=="Half_Close" && params.p_b_w!=="One_Fourth_Close" && params.p_b_w!=="Three_Fourth_Close")
        {
            if(params.p_b_w=="Gable")
            {
                if(params.p_v_w==true)
                {
                    if(const_var.c_f_a_sCer[params.p_e_i]==1)
                    {
                        //t_c = (data.gable_end[0].certified!=0)?t_c + (data.gable_end[0].vertical_certified) + data.gable_end[0].certified :t_c + (data.gable_end[0].vertical) + data.gable_end[0].uncertified;
                        vertiP2 = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_wall_price_changed!=true)?const_var.UpdatedPriceData.back_wall_price:(vertiP2 + ((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified)));
                    }else{
                        //t_c = t_c + (data.gable_end[0].vertical) + (data.gable_end[0].uncertified);
                        vertiP2 = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_wall_price_changed!=true)?const_var.UpdatedPriceData.back_wall_price:(vertiP2 + ((data.gable_end[0].vertical)+(data.gable_end[0].uncertified)));
                    }
                }else{
                    if(const_var.c_f_a_sCer[params.p_e_i]==1)
                    {
                        //t_c = (data.gable_end[0].certified!=0)?t_c + data.gable_end[0].certified :t_c + data.gable_end[0].uncertified;
                        vertiP2 = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_wall_price_changed!=true)?const_var.UpdatedPriceData.back_wall_price:(vertiP2 + data.gable_end[0].certified);
                    }else{
                        //t_c = t_c + data.gable_end[0].uncertified;
                        vertiP2 = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_wall_price_changed!=true)?const_var.UpdatedPriceData.back_wall_price:(vertiP2 + data.gable_end[0].uncertified);
                    }
                } 
            }else
            {
                if(params.p_v_w==true)
                {
                    //t_c = t_c + (data.gable_end[0].vertical_extended) + (data.gable_end[0].extended);
                    vertiP2 = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_wall_price_changed!=true)?const_var.UpdatedPriceData.back_wall_price:(vertiP2 + ((data.gable_end[0].vertical_extended) + (data.gable_end[0].extended)));
                }else{    
                    //t_c = t_c+ (data.gable_end[0].extended);
                    vertiP2 = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_wall_price_changed!=true)?const_var.UpdatedPriceData.back_wall_price:((vertiP2+(data.gable_end[0].extended)));
                } 
            } 
            post_data['building'].back_wall_price = vertiP2;
            t_c = parseFloat(t_c)  + parseFloat(post_data['building'].back_wall_price);
            CalCulateRoofEndGablePrice = CalCulateRoofEndGablePrice + post_data['building'].back_wall_price;
        }if(params.p_c_p_l==true)
        {
            post_data['building'].left_wall_cut_panel_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_wall_cut_panel_price_changed!=true)?const_var.UpdatedPriceData.left_wall_cut_panel_price:(data.panel[0].cut_panel_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_cut_panel_price);
            post_data['building'].left_wall_cutpanel = true;

            // t_c = parseFloat(t_c) + parseFloat((data.panel[0].cut_panel_cost));
            // post_data['building'].left_wall_price = post_data['building'].left_wall_price + (data.panel[0].cut_panel_cost);
            // post_data['building'].left_wall_cutpanel = true;
        }else
        {
            post_data['building'].left_wall_cut_panel_price = 0;
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].left_wall_cut_panel_price);
        }
        if(params.p_c_p_r==true)
        {
            post_data['building'].right_wall_cut_panel_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_wall_cut_panel_price_changed!=true)?const_var.UpdatedPriceData.right_wall_cut_panel_price:(data.panel[0].cut_panel_cost);
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_cut_panel_price);
            post_data['building'].right_wall_cutpanel = true;

            // t_c = parseFloat(t_c) + parseFloat((data.panel[0].cut_panel_cost));
            // post_data['building'].right_wall_price = post_data['building'].right_wall_price + (data.panel[0].cut_panel_cost);
            // post_data['building'].right_wall_cutpanel = true;
        }else
        {
            post_data['building'].right_wall_cut_panel_price = 0;
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].right_wall_cut_panel_price);
        }
        
        //t_c = t_c + (data.side[0].leg_height_cost); 
        // console.log(t_c,"t_ct_ct_c122555")
        if(params.p_u_c==true && data.utility_side.length>0)
        {   
            if(const_var.b_o_J_1[params.p_b_t].includes("Free Standing Lean-to") && data.utility_slope_height.length>0)
            {
                let heigherSide = (params.p_r_w != "Close") ? (params.p_v_w == true) ? (data.utility_side[0].vertical_side_cost) + (data.utility_side[0].side_close_cost) : (data.utility_side[0].side_close_cost) : 0
                let lowerSide = (params.p_l_w != "Close") ? (params.p_v_w == true) ? (data.utility_slope_height[0].vertical_side_cost) + (data.utility_slope_height[0].side_close_cost) : (data.utility_slope_height[0].side_close_cost) : 0
                post_data['building'].utility_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.utility_price_changed!=true)?const_var.UpdatedPriceData.utility_price:(params.p_v_w==true)?(convertToTwoDecimalNumber((data.end[0].vertical_ends_cost * 2)+(heigherSide )+(lowerSide)+(data.end[0].end_close_cost * 2))):(convertToTwoDecimalNumber((heigherSide)+(lowerSide )+(data.end[0].end_close_cost * 2)));
            }else{
                post_data['building'].utility_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.utility_price_changed!=true)?const_var.UpdatedPriceData.utility_price:(params.p_v_w==true)?(convertToTwoDecimalNumber((data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2))):(convertToTwoDecimalNumber((data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)));
            }
            
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].utility_price);
            post_data['building'].utility_length = params.p_u_t;
            post_data['building'].has_utility = true;
            post_data['building'].utility_name = "back";
            post_data['building'].utility_vertical = (params.p_v_w)?true:false;
            post_data['building'].utility_on_centers = (const_var.DistanceArr[params.p_b_t][params.p_r_s]==undefined)?5:const_var.DistanceArr[params.p_b_t][params.p_r_s];
            if(const_var.DistanceArr[params.p_b_t][params.p_r_s]==5)
            {
                var b_u_D_p_a = const_var.b_u_D_p_a5;
            }else{
                var b_u_D_p_a = const_var.b_u_D_p_a4;
            }
            post_data['building'].utility_length_list = b_u_D_p_a;
            CalCulateRoofUtilityEndPrice = post_data['building'].utility_price;
        }else if((params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true) && data.side_combo_v3.length>0)
        {   
            let exactPriceAdd = 0;
            if(params.p_h >= const_var.buildingHeightArray[const_var.buildingHeightArray.length-1].value && const_var.b_o_J_1[params.p_b_t].includes("Free Standing Lean-to") == false)
            {
                if(Number(params.p_r_p)>3)
                {
                    exactPriceAdd = (params.p_v_w==true)?(data.panel[0].vertical_panel_cost * 2):(data.panel[0].cost * 2);
                }else{
                    exactPriceAdd = (params.p_v_w==true)?(data.panel[0].vertical_panel_cost * 1):(data.panel[0].cost * 1);
                }
            }
            let sideCloseCostOnZeroPrice = 0, endCloseCostOnZeroPrice = 0;
            if (data.side_combo_v3[0].side_close_cost == 0) {
                sideCloseCostOnZeroPrice = data.side[0].side_close_cost;
            }
            if (data.end_combo_v3[0].end_close_cost == 0) {
                endCloseCostOnZeroPrice = (2 * data.end[0].end_close_cost);
                if (Number(params.p_r_p) > 3) {
                    endCloseCostOnZeroPrice = endCloseCostOnZeroPrice + data.gable_end[0].certified;
                }
            }
            let newSideWallPrice = data.side;
            if(params.singleSlope==true)
            {
                newSideWallPrice = (params.cB_addStorage_check_left==true && data.side_slope_height!=undefined && data.side_slope_height.length>0)?data.side_slope_height:data.side;
            }
            // console.log(const_var.buildingHeightArray[const_var.buildingHeightArray.length-1].value,"const_var.buildingHeightArray[const_var.buildingHeightArray.length-1].value",params.p_r_p)
            // console.log( data.side_combo_v3,"data.side_combo_v3", data.end_combo_v3);

            // console.log((data.side_combo_v3[0].vertical_side_cost),"+",(data.side[0].vertical_side_cost),"+",
            // (data.end_combo_v3[0].vertical_ends_cost * 2),"+",(data.side_combo_v3[0].side_close_cost),"+",
            // (data.side[0].side_close_cost),"+",(data.end_combo_v3[0].end_close_cost * 2),"+",exactPriceAdd,"exactPriceAddexactPriceAdd",post_data['building'].utility_price)

            let endCost = data.end_combo_v3[0].end_close_cost * 2
            if(params.p_f_w != "Close" && params.p_b_w != "Close"){
                endCost = (params.p_v_w == true) ? (data.end_combo_v3[0].vertical_ends_cost *2) + (data.end_combo_v3[0].end_close_cost * 2) : (data.end_combo_v3[0].end_close_cost * 2) 
            }else if((params.p_f_w == "Close" && params.p_b_w != "Close") || (params.p_f_w != "Close" && params.p_b_w == "Close") ){
                endCost = (params.p_v_w == true) ? (data.end_combo_v3[0].vertical_ends_cost) + (data.end_combo_v3[0].end_close_cost) : (data.end_combo_v3[0].end_close_cost)
            }else{
                endCost = 0
            }

            let calculate_side_stoarage_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.utility_price_changed!=true)
            ? const_var.UpdatedPriceData.utility_price:(params.p_v_w==true) ?
            convertToTwoDecimalNumber(((data.side_combo_v3[0].vertical_side_cost)+(newSideWallPrice[0].vertical_side_cost)+
            (data.side_combo_v3[0].side_close_cost)+ endCost +
            (newSideWallPrice[0].side_close_cost)+exactPriceAdd))
            :
            convertToTwoDecimalNumber(((data.side_combo_v3[0].side_close_cost)+(newSideWallPrice[0].side_close_cost)+exactPriceAdd + sideCloseCostOnZeroPrice + endCost + endCloseCostOnZeroPrice))
            // console.log(calculate_side_stoarage_price,"calculate_side_stoarage_price");
            // post_data['building'].utility_price = (calculate_side_stoarage_price % 1 ==0) ? calculate_side_stoarage_price : (calculate_side_stoarage_price).toFixed(2) ;
            post_data['building'].utility_price = (calculate_side_stoarage_price); //Math.round(calculate_side_stoarage_price * 100) / 100 ;
            // console.log("exactPriceAddexactPriceAdd",post_data['building'].utility_price)
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].utility_price);
            post_data['building'].utility_length = (params.cB_addStorage_check_left==true)?params.cB_addStorage_left:params.cB_addStorage_right;
            post_data['building'].has_utility = true;
            post_data['building'].utility_name = (params.cB_addStorage_check_left==true)?"left":"right";
            post_data['building'].utility_vertical = (params.p_v_w)?true:false;
            post_data['building'].utility_on_centers = (const_var.DistanceArr[params.p_b_t][params.p_r_s]==undefined)?5:const_var.DistanceArr[params.p_b_t][params.p_r_s];
            if(const_var.DistanceArr[params.p_b_t][params.p_r_s]==5)
            {
                var b_u_D_p_a = const_var.b_u_D_p_a5;
            }else{
                var b_u_D_p_a = const_var.b_u_D_p_a4;
            }
            post_data['building'].utility_length_list = b_u_D_p_a;
            CalCulateRoofUtilityEndPrice = parseFloat(post_data['building'].utility_price);
        }else
        {
            post_data['building'].has_utility = false;
            post_data['building'].utility_price = 0;
        }
        if ( params.isBreezeway && params.cB_addStorage_check_front && data.front_utility_side && data.front_utility_side.length>0 ) {
            post_data['building'].utility_front_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_utility_price_changed!=true)?const_var.UpdatedPriceData.utility_front_price:(params.p_v_w==true)?(((data.front_utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.front_utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2))):(((data.front_utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)));
            t_c = parseFloat(t_c) + parseFloat(post_data['building'].utility_front_price);
            post_data['building'].utility_front_length = params.cB_addStorage_front;
            post_data['building'].has_utility_front = true;
            post_data['building'].utility_front_name = "front";
            post_data['building'].utility_front_vertical = (params.p_v_w)?true:false;
            post_data['building'].utility_front_on_centers = (const_var.DistanceArr[params.p_b_t][params.p_r_s]==undefined)?5:const_var.DistanceArr[params.p_b_t][params.p_r_s];
            CalCulateRoofUtilityEndPrice = parseFloat(CalCulateRoofUtilityEndPrice) + parseFloat(post_data['building'].utility_front_price);
        } else {
            post_data['building'].has_utility_front = false;
            post_data['building'].utility_front_price = 0;
        }
        if ( params.isBreezeway ) {
            post_data['building'].breezeway_length = const_var.breezewayLength;
        }
        // post_data['building'].distance_On_Center = const_var.DistanceArr[params.p_b_t][params.p_r_s];

        // console.log(t_c,"t_ct_ct_c122333",const_var.b_r_p_a,params.b_r_p)
        if(params.b_r_p!="Select")
        {
            if(const_var.b_r_p_a.length > 0 && const_var.b_r_p_a[params.b_r_p]!=undefined)
            {            
                if(const_var.b_r_p_a[params.b_r_p].cost_type == "%")
                {
                    var splitVal = (const_var.b_r_p_a[params.b_r_p].percentage_of!=undefined && const_var.b_r_p_a[params.b_r_p].percentage_of!=0)?const_var.b_r_p_a[params.b_r_p].percentage_of.split(","):0;
                    var splval = 0;
                    if(splitVal!=0)
                    {
                        if(splitVal.includes("1")!=false)
                        {
                            splval = parseFloat(splval) + parseFloat(CalCulateRoofBasePrice);
                        }if(splitVal.includes("2")!=false)
                        {
                            if(CalCulateRoofUtilityEndPrice!=0) 
                            {
                                splval = parseFloat(splval) + parseFloat(CalCulateRoofUtilityEndPrice);
                            }
                            splval = parseFloat(splval) + parseFloat(CalCulateRoofEndClosePrice);
                        }if(splitVal.includes("3")!=false)
                        {
                            splval = parseFloat(splval) + parseFloat(CalCulateRoofEndGablePrice);
                        }
                    }else
                    {
                        splval = parseFloat(splval) + parseFloat(CalCulateRoofBasePrice);
                    }
                    
                    if(const_var.b_r_p_a[params.b_r_p].cost==0)
                    {
                        var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.roof_pitch_price_changed!=true)?const_var.UpdatedPriceData.roof_pitch_price:0;
                    }else
                    {
                        var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.roof_pitch_price_changed!=true)?const_var.UpdatedPriceData.roof_pitch_price:(parseFloat(splval) * parseFloat(const_var.b_r_p_a[params.b_r_p].cost) / 100);
                    }
                    if(finalCertPrice==undefined)
                    {
                        finalCertPrice = 0;
                    }
                    // console.log(const_var.b_r_p_a[params.b_r_p],splval,const_var.b_r_p_a[params.b_r_p].cost,(splval * const_var.b_r_p_a[params.b_r_p].cost / 100),"(splval * const_var.b_r_p_a[params.b_r_p].cost / 100)")
                    t_c = parseFloat(t_c) + convertToTwoDecimalNumber(finalCertPrice);
                    post_data['building'].roof_pitch = const_var.b_r_p_a[params.b_r_p].roof_pitch;
                    post_data['building'].roof_pitch_name = const_var.b_r_p_a[params.b_r_p].roof_pitch;
                    post_data['building'].roof_pitch_price = convertToTwoDecimalNumber(finalCertPrice);
                    
                }
                else
                {
                    // console.log(const_var.b_r_p_a[params.b_r_p],post_data['building'].roof_pitch_price,"const_var.b_r_p_a[params.b_r_p]")
                    post_data['building'].roof_pitch_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.roof_pitch_price_changed!=true)?const_var.UpdatedPriceData.roof_pitch_price:(const_var.b_r_p_a[params.b_r_p].cost);
                    if(post_data['building'].roof_pitch_price==undefined)
                    {
                        post_data['building'].roof_pitch_price = 0;
                    }
                    t_c =  parseFloat(t_c) + parseFloat(post_data['building'].roof_pitch_price);
                    post_data['building'].roof_pitch = const_var.b_r_p_a[params.b_r_p].roof_pitch;
                    post_data['building'].roof_pitch_name = const_var.b_r_p_a[params.b_r_p].roof_pitch;
                }
            }
            
        
    }else{
        post_data['building'].roof_pitch = "312";
        post_data['building'].roof_pitch_name = "312";
        post_data['building'].roof_pitch_price = 0;
    }
        
        post_data['building'].has_double_leg = params.p_e_l;
        post_data['building'].legstype = const_var.legstype;
        post_data['building'].distance_on_center = (const_var.DistanceArr[params.p_b_t][params.p_r_s]==undefined)?5:const_var.DistanceArr[params.p_b_t][params.p_r_s];
        post_data['building'].custom_distance_on_center = (params.oncenter_val_with_action!='')?params.oncenter_val_with_action:0;
        //console.log(params.oncenter_val_with_action,"oncenter_val_with_action")
        //t_c = (const_var.g_v=="12")?(data.gaugeHeight.length>0)?t_c +data.gaugeHeight[0].cost:t_c + 0 :t_c + 0 ;
        // console.log(t_c,"t_ct_ct_c12211")
        if(const_var.g_v==14)
        {
            if(heightFullData[0].double_leg_baserail_cost!=0 && params.p_e_l==true)
            {
                post_data['building'].height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.height_price_changed!=true)?const_var.UpdatedPriceData.height_price:((heightFullData[0].double_leg_baserail_cost!=0)?(heightFullData[0].double_leg_baserail_cost):(heightFullData[0].leg_height_cost));    
                t_c = parseFloat(t_c)+ parseFloat(post_data['building'].height_price);
                post_data['building'].has_double_leg_price = post_data['building'].height_price;
            }else{
                post_data['building'].height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.height_price_changed!=true)?const_var.UpdatedPriceData.height_price:(heightFullData[0].leg_height_cost);
                t_c = parseFloat(t_c )+ parseFloat(post_data['building'].height_price);
                //post_data['building'].height_price = data.side[0].leg_height_cost;
                post_data['building'].has_double_leg_price = post_data['building'].height_price;
            }
        }
        if(const_var.g_v==12)
        {
            if(params.p_e_l==true)
            {
                post_data['building'].height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.height_price_changed!=true)?const_var.UpdatedPriceData.height_price:((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].double_leg_baserail_cost));    
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].height_price);
                //post_data['building'].height_price =  (data.side[0].double_leg_baserail_cost_12!=0)?(data.side[0].double_leg_baserail_cost_12):(data.side[0].double_leg_baserail_cost);;
                post_data['building'].has_double_leg_price = post_data['building'].height_price;
            }else{
                post_data['building'].height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.height_price_changed!=true)?const_var.UpdatedPriceData.height_price:((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));
                t_c = parseFloat(t_c )+ parseFloat(post_data['building'].height_price);
                //post_data['building'].height_price = (data.side[0].leg_height_cost_12!=0)?(data.side[0].leg_height_cost_12):(data.side[0].leg_height_cost);
                post_data['building'].has_double_leg_price = post_data['building'].height_price;
            } 
        }
        // console.log(t_c,"t_ct_ct_c122")
        t_c = parseFloat(t_c_b) + parseFloat(t_c);
        if(params.p_i_o !=0 && const_var.isInsulaltionForOldQuotes) {
            let insulationPrice = 0;
            if(params.p_f_i){
                if(const_var.insulationPriceJson!=undefined && const_var.insulationPriceJson.length>0 && const_var.insulationPriceJson[params.p_i_o].end_cost!=undefined && const_var.insulationPriceJson[params.p_i_o].end_cost!=0 && const_var.insulationPriceJson[params.p_i_o].side_cost!=0) {
                    if(Object.keys(const_var.wallsData['center']).length>0) {
                        let sidePrice = 0, endPrice = 0, sideWallCount = parseFloat(const_var.wallsData['center'].closedSideWalls);
                        insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.insulationPriceJson[params.p_i_o].roof_insulation_cost);

                        if( params.p_u_c && const_var.insulationPriceJson[params.p_i_o].utility_side!=undefined && const_var.insulationPriceJson[params.p_i_o].utility_side!=0) {
                            endPrice =  parseFloat(endPrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].end_cost) * parseFloat(const_var.wallsData['center'].closedEndWalls);
                            if(params.p_l_w!='Open' || params.p_c_p_l) {
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].side_cost);
                            } else{
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].utility_side);
                            }
                            if(params.p_r_w!='Open'  || params.p_c_p_r) {
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].side_cost);
                            }else{
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].utility_side);
                            }
                            insulationPrice = parseFloat(insulationPrice) + parseFloat(sidePrice) + parseFloat(endPrice);

                        } else if((params.cB_addStorage_check_left || params.cB_addStorage_check_right) && const_var.insulationPriceJson[params.p_i_o].utility_end!=undefined && const_var.insulationPriceJson[params.p_i_o].utility_end!=0) {
                            if (const_var.insulationPriceJson[params.p_i_o].pitch_side != undefined && const_var.insulationPriceJson[params.p_i_o].pitch_side != 0){
                                sideWallCount = Number(sideWallCount) - 1; 
                                sidePrice =  parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].pitch_side) + parseFloat(const_var.insulationPriceJson[params.p_i_o].side_cost * Number(sideWallCount));
                            } else {
                                sidePrice =  parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].side_cost * Number(sideWallCount));
                            }
                            if(params.p_f_w != 'Open') {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].end_cost);
                            } else {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].utility_end);
                            }
                            if (params.p_b_w != 'Open') {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].end_cost);
                            } else {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].utility_end);
                            }
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(endPrice)+ parseFloat(sidePrice);
                        }else{
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.insulationPriceJson[params.p_i_o].end_cost) * parseFloat(const_var.wallsData['center'].closedEndWalls);
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.insulationPriceJson[params.p_i_o].side_cost) * parseFloat(sideWallCount);
                        }
                    }
                }else{
                    if (params.p_u_c || params.cB_addStorage_check_left || params.cB_addStorage_check_right || params.p_f_w != "Open" || params.p_l_w != "Open" || params.p_b_w != "Open" || params.p_r_w!= "Open" || params.p_c_p_l || params.p_c_p_r ) {
                        insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.insulationPriceJson[params.p_i_o].full_building_insulation_cost);
                    } else {
                        insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.insulationPriceJson[params.p_i_o].roof_insulation_cost);
                    }
                } 
            }
            if (params.p_r_o) {
                insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.insulationPriceJson[params.p_i_o].roof_insulation_cost);   
            }
            if(params.add_front_lean && const_var.leanGetDataFront!="" && const_var.insulationArrayForLeantoFront.length>0 && const_var.insulationArrayForLeantoFront[params.p_i_o] != undefined) {
                const insulationRes = utlis.calculateInsulation(const_var.insulationArrayForLeantoFront[params.p_i_o], params.p_f_i, params.p_r_o, 'frontLean', params.add_storage_check_front, params.p_b_c_b_f_l, params.p_b_c_b_f_f, params.p_b_c_b_f_b );
                insulationPrice = parseFloat(insulationPrice) + parseFloat(insulationRes.insulationPrice);
            } 
            if(params.add_left_lean && const_var.leanGetDataLeft!="" && const_var.insulationArrayForLeantoLeft.length>0 && const_var.insulationArrayForLeantoLeft[params.p_i_o] != undefined) {
                const insulationRes = utlis.calculateInsulation( const_var.insulationArrayForLeantoLeft[params.p_i_o], params.p_f_i, params.p_r_o, 'leftLean', params.add_storage_check, params.p_b_c_b_l, params.p_b_c_b_l_f, params.p_b_c_b_l_b);
                insulationPrice = parseFloat(insulationPrice) + parseFloat(insulationRes.insulationPrice);
            } 
            if(params.add_right_lean && const_var.leanGetDataRight!="" && const_var.insulationArrayForLeantoRight.length>0 && const_var.insulationArrayForLeantoRight[params.p_i_o] != undefined  ) {
                const insulationRes = utlis.calculateInsulation(const_var.insulationArrayForLeantoRight[params.p_i_o], params.p_f_i, params.p_r_o, 'rightLean', params.add_storage_check_right, params.p_b_c_b_r, params.p_b_c_b_r_f, params.p_b_c_b_r_b);
                insulationPrice = parseFloat(insulationPrice) + parseFloat(insulationRes.insulationPrice);   
            }
            if(params.add_back_lean && const_var.leanGetDataBack!="" && const_var.insulationArrayForLeantoBack.length>0 && const_var.insulationArrayForLeantoBack[params.p_i_o] != undefined) {
                const insulationRes = utlis.calculateInsulation(const_var.insulationArrayForLeantoBack[params.p_i_o], params.p_f_i, params.p_r_o, 'backLean', params.add_storage_check_back, params.p_b_c_b_b_l, params.p_b_c_b_b_f, params.p_b_c_b_b_b);
                insulationPrice = parseFloat(insulationPrice) + parseFloat(insulationRes.insulationPrice);
            }  
            
            post_data['building'].insulation = params.p_f_i ? "full": "roof_only";
            post_data['building'].insulation_price = (UpdatePriceRecord && const_var.UpdatedPriceData.insulation_price!=undefined && (const_var.UpdatedPriceData.height_price_changed!=true || const_var.UpdatedPriceData.roof_style_price_changed!=true || const_var.UpdatedPriceData.bothLeanto!=true))?const_var.UpdatedPriceData.insulation_price:convertToTwoDecimalNumber(insulationPrice);
            let chkForInsulationPrice = utlis.commonFunctionForInsulationCalculations(post_data['building'].insulation_price);
            if(chkForInsulationPrice!=true)
            {
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].insulation_price);
            }
            post_data['building'].insulation_type = const_var.insulationPriceJson[params.p_i_o];

        } else if(params.p_i_o !=0 && !const_var.isInsulaltionForOldQuotes) {
            if(params.p_f_i) {
              let insulationPrice = 0, finalPrice = 0; 

              if(const_var.insulationPriceJson!=undefined && const_var.insulationPriceJson.length>0 && const_var.insulationPriceJson[params.p_i_o].end_cost!=undefined && const_var.insulationPriceJson[params.p_i_o].end_cost!=0 && const_var.insulationPriceJson[params.p_i_o].side_cost!=0)
                {
                    if(Object.keys(const_var.wallsData['center']).length>0)
                    {
                        let sideWallCount = parseFloat(const_var.wallsData['center'].closedSideWalls);
                        let sidePrice = 0;
                        let endPrice = 0;
                        insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.insulationPriceJson[params.p_i_o].roof_insulation_cost);
                        if(params.p_u_c==true && const_var.insulationPriceJson[params.p_i_o].utility_side!=undefined && const_var.insulationPriceJson[params.p_i_o].utility_side!=0)
                        {   
                            if(params.p_l_w!='Open' || params.p_c_p_l)
                            {
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].side_cost);
                            } else{
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].utility_side);
                            }
                            if(params.p_r_w!='Open' || params.p_c_p_r)
                            {
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].side_cost);
                            }else{
                                sidePrice = parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].utility_side);
                            }
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.insulationPriceJson[params.p_i_o].end_cost) * parseFloat(const_var.wallsData['center'].closedEndWalls);
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(sidePrice);
                        }else if((params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true) && const_var.insulationPriceJson[params.p_i_o].utility_end!=undefined && const_var.insulationPriceJson[params.p_i_o].utility_end!=0)
                        {
                            if (const_var.insulationPriceJson[params.p_i_o].pitch_side != undefined && const_var.insulationPriceJson[params.p_i_o].pitch_side != 0){
                                sideWallCount = Number(sideWallCount) - 1; 
                                sidePrice =  parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].pitch_side) + parseFloat(const_var.insulationPriceJson[params.p_i_o].side_cost * Number(sideWallCount));
                            }else {
                                sidePrice =  parseFloat(sidePrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].side_cost * Number(sideWallCount));
                            }
                            if(params.p_f_w != 'Open') {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].end_cost);
                            } else {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].utility_end);
                            }
                            if(params.p_b_w != 'Open') {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].end_cost);
                            } else {
                                endPrice = parseFloat(endPrice) + parseFloat(const_var.insulationPriceJson[params.p_i_o].utility_end);
                            }
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(endPrice)+parseFloat(sidePrice);
                            
                        }else{
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.insulationPriceJson[params.p_i_o].end_cost) * parseFloat(const_var.wallsData['center'].closedEndWalls);
                            insulationPrice = parseFloat(insulationPrice)+ parseFloat(const_var.insulationPriceJson[params.p_i_o].side_cost) * parseFloat(sideWallCount);
                        }
                        
                    }
              } else{
                    if (params.p_u_c || params.cB_addStorage_check_left || params.cB_addStorage_check_right || params.p_f_w != "Open" || params.p_l_w != "Open" || params.p_b_w != "Open" || params.p_r_w!= "Open" || params.p_c_p_l || params.p_c_p_r ) {
                        insulationPrice = parseFloat(const_var.insulationPriceJson[params.p_i_o].full_building_insulation_cost);
                    } else {
                        insulationPrice = parseFloat(const_var.insulationPriceJson[params.p_i_o].roof_insulation_cost);
                    }
                }

                finalPrice = finalPrice + insulationPrice;
                
                post_data['building'].insulation = "full";
                post_data['building'].insulation_price = (UpdatePriceRecord && const_var.UpdatedPriceData.insulation_price!=undefined && (const_var.UpdatedPriceData.height_price_changed!=true || const_var.UpdatedPriceData.roof_style_price_changed!=true || const_var.UpdatedPriceData.bothLeanto!=true))?const_var.UpdatedPriceData.insulation_price:convertToTwoDecimalNumber(finalPrice);
                let chkForInsulationPrice = utlis.commonFunctionForInsulationCalculations(post_data['building'].insulation_price);
                if(chkForInsulationPrice!=true)
                {
                    t_c = parseFloat(t_c) + parseFloat(post_data['building'].insulation_price);
                }
                post_data['building'].insulation_type = const_var.insulationPriceJson[params.p_i_o];
            }

            if (params.p_r_o) {
                let insulationPrice = 0, finalPrice = 0; 
                insulationPrice = parseFloat(const_var.insulationPriceJson[params.p_i_o].roof_insulation_cost);
                finalPrice = finalPrice + insulationPrice;
                post_data['building'].insulation = "roof_only";
                post_data['building'].insulation_price = (UpdatePriceRecord && const_var.UpdatedPriceData.insulation_price!=undefined && (const_var.UpdatedPriceData.height_price_changed!=true || const_var.UpdatedPriceData.roof_style_price_changed!=true || const_var.UpdatedPriceData.bothLeanto!=true))?const_var.UpdatedPriceData.insulation_price:convertToTwoDecimalNumber(finalPrice);
                let chkForInsulationPrice = utlis.commonFunctionForInsulationCalculations(post_data['building'].insulation_price);
                if(chkForInsulationPrice!=true)
                {
                    t_c = parseFloat(t_c) + parseFloat(post_data['building'].insulation_price);
                }
                post_data['building'].insulation_type = const_var.insulationPriceJson[params.p_i_o];
            }
            
        } else {
            post_data['building'].insulation_price = 0;
        }

        if (!const_var.isInsulaltionForOldQuotes) post_data['building'].isInsulaltionForOldQuotes = false;
        if(const_var.inputs!=undefined && const_var.inputs.length>0)
        {
            const_var.inputs.map((val, index) => {
                if(val!=null)
                {
                    if(val.additional_quantity!=0 && val.additional_quantity!=null)
                    {
                        if(val.additional_name!=null && val.additional_quantity!=null)
                        {
                            let inputsPrice =  const_var.editAPIDataByResponse?.data?.request_data?.building?.extra_items.find((comp)=>comp.item_name == val.additional_name.toString())
                            extra_items.push({'item_name':val.additional_name,'item_quantity':parseInt(val.additional_quantity),'item_price':UpdatePriceRecord==true ?inputsPrice.item_price:0});
                            t_c = UpdatePriceRecord==true ?parseFloat(t_c) + parseFloat(inputsPrice.item_price):parseFloat(t_c) + 0;
                        }
                    }
                }
            
            });
            post_data['building'].inputs = const_var.inputs;
        }
        if(const_var.Componentinputs!=undefined && const_var.Componentinputs.length>0)
        {
            const_var.Componentinputs.map((val, index) => {
                if(val!=null)
                {
                    if(val.additional_name!=null && val.additional_quantity!=null)
                    {
                        if(val.additional_quantity!=0)
                        {
                            let componentinputsPrice =  const_var.editAPIDataByResponse?.data?.request_data?.building?.extra_items.find((comp)=>comp.item_name == val.additional_name.toString())
                            extra_items.push({'item_name':val.additional_name,'item_quantity':parseInt(val.additional_quantity),'item_price':(UpdatePriceRecord==true )?(componentinputsPrice.item_price):0});
                            t_c = (UpdatePriceRecord==true )?parseFloat(t_c) + parseFloat((componentinputsPrice.item_price)):parseFloat(t_c) + 0;
                            
                        }
                    }
                }
            
            });
            post_data['building'].Componentinputs = const_var.Componentinputs;
        }
        if(const_var.ExtraItemsFeaturesArray!=undefined && const_var.ExtraItemsFeaturesArray.length>0)
        {
            let checkCenterCost = false;
            const_var.ExtraItemsFeaturesArray.map((val, index) => {
                if(val!=null && val.name == undefined && val.sheet_name != undefined){
                    val['name']= 'overhang' 
                    val['label']= val.sheet_name
                }
                if(val!=null && val.is_checked==true)
                {
                    // console.log(val.name,val.is_checked,"item.name == val.name")
                    let leantoExtraItemCheckBoxCost = 0;

                    if(params.add_left_lean ==true && const_var.leanGetDataLeft){
                        const_var.leanGetDataLeft.extra_items[0].checkbox.map((item)=>{
                            if(val.name=='overhang')
                            {
                                if(const_var.leanGetDataLeft.overhang == undefined || (const_var.leanGetDataLeft.overhang != undefined && (const_var.leanGetDataLeft.overhang.end == undefined || const_var.leanGetDataLeft.overhang.end.length == 0) && (const_var.leanGetDataLeft.overhang.side == undefined || const_var.leanGetDataLeft.overhang.side.length == 0) && (const_var.leanGetDataLeft.overhang.both == undefined || const_var.leanGetDataLeft.overhang.both == '' || const_var.leanGetDataLeft.overhang.both == null))){
                                    if(item.name == val.name && item.label == val.label){
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                    }
                                }
                            }else{
                                if(item.name == val.name){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }
                        })
                        if(val.sheet_type != undefined && val.sheet_type == "end" && const_var.leanGetDataLeft.overhang != undefined && const_var.leanGetDataLeft.overhang.end != undefined && const_var.leanGetDataLeft.overhang.end.length > 0){
                            let sel = const_var.leanGetDataLeft.overhang.end.filter(obj => obj.sheet_name == const_var.isOverhang.end.selected);
                            let selCost = sel.length != 0 ? sel[0].cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(val.sheet_type != undefined && val.sheet_type == "side" && const_var.leanGetDataLeft.overhang != undefined && const_var.leanGetDataLeft.overhang.side != undefined && const_var.leanGetDataLeft.overhang.side.length > 0){
                            let sel = const_var.leanGetDataLeft.overhang.side.filter(obj => obj.sheet_name == const_var.isOverhang.side.selected);
                            let selCost = sel.length != 0 ? sel[0].cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(val.sheet_type != undefined && val.sheet_type == "both" && const_var.leanGetDataLeft.overhang != undefined && const_var.leanGetDataLeft.overhang.both != undefined && const_var.leanGetDataLeft.overhang.both != null && const_var.leanGetDataLeft.overhang.both != ''){
                            let selCost = const_var.leanGetDataLeft.overhang.both.cost != undefined ? const_var.leanGetDataLeft.overhang.both.cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }

                    }
                    // console.log(leantoExtraItemCheckBoxCost,"leantoExtraItemCheckBoxCost111")   
                    if(params.add_front_lean ==true && const_var.leanGetDataFront){
                        const_var.leanGetDataFront.extra_items[0].checkbox.map((item)=>{
                            if(val.name=='overhang')
                            {
                                if(const_var.leanGetDataFront.overhang == undefined || (const_var.leanGetDataFront.overhang != undefined && (const_var.leanGetDataFront.overhang.end == undefined || const_var.leanGetDataFront.overhang.end.length == 0) && (const_var.leanGetDataFront.overhang.side == undefined || const_var.leanGetDataFront.overhang.side.length == 0) && (const_var.leanGetDataFront.overhang.both == undefined || const_var.leanGetDataFront.overhang.both == '' || const_var.leanGetDataFront.overhang.both == null))){
                                    if(item.name == val.name && item.label == val.label){
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                    }
                                }
                            }else{
                                if(item.name == val.name){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }
                        })
                        if(val.sheet_type != undefined && val.sheet_type == "end" && const_var.leanGetDataFront.overhang != undefined && const_var.leanGetDataFront.overhang.end != undefined && const_var.leanGetDataFront.overhang.end.length > 0){
                            let sel = const_var.leanGetDataFront.overhang.end.filter(obj => obj.sheet_name == const_var.isOverhang.end.selected);
                            let selCost = sel.length != 0 ? sel[0].cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(val.sheet_type != undefined && val.sheet_type == "side" && const_var.leanGetDataFront.overhang != undefined && const_var.leanGetDataFront.overhang.side != undefined && const_var.leanGetDataFront.overhang.side.length > 0){
                            let sel = const_var.leanGetDataFront.overhang.side.filter(obj => obj.sheet_name == const_var.isOverhang.side.selected);
                            let selCost = sel.length != 0 ? sel[0].cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(val.sheet_type != undefined && val.sheet_type == "both" && const_var.leanGetDataFront.overhang != undefined && const_var.leanGetDataFront.overhang.both != undefined && const_var.leanGetDataFront.overhang.both != null && const_var.leanGetDataFront.overhang.both != ''){
                            let selCost = const_var.leanGetDataFront.overhang.both.cost != undefined ? const_var.leanGetDataFront.overhang.both.cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                    }
                    if(params.add_back_lean ==true && const_var.leanGetDataBack){
                        const_var.leanGetDataBack.extra_items[0].checkbox.map((item)=>{
                            if(val.name=='overhang')
                            {
                                if(const_var.leanGetDataBack.overhang == undefined || (const_var.leanGetDataBack.overhang != undefined && (const_var.leanGetDataBack.overhang.end == undefined || const_var.leanGetDataBack.overhang.end.length == 0) && (const_var.leanGetDataBack.overhang.side == undefined || const_var.leanGetDataBack.overhang.side.length == 0) && (const_var.leanGetDataBack.overhang.both == undefined || const_var.leanGetDataBack.overhang.both == '' || const_var.leanGetDataBack.overhang.both == null))){
                                    if(item.name == val.name && item.label == val.label){
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                    }
                                }
                            }else{
                                if(item.name == val.name){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }
                        })
                        if(val.sheet_type != undefined && val.sheet_type == "end" && const_var.leanGetDataBack.overhang != undefined && const_var.leanGetDataBack.overhang.end != undefined && const_var.leanGetDataBack.overhang.end.length > 0){
                            let sel = const_var.leanGetDataBack.overhang.end.filter(obj => obj.sheet_name == const_var.isOverhang.end.selected);
                            let selCost = sel.length != 0 ? sel[0].cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(val.sheet_type != undefined && val.sheet_type == "side" && const_var.leanGetDataBack.overhang != undefined && const_var.leanGetDataBack.overhang.side != undefined && const_var.leanGetDataBack.overhang.side.length > 0){
                            let sel = const_var.leanGetDataBack.overhang.side.filter(obj => obj.sheet_name == const_var.isOverhang.side.selected);
                            let selCost = sel.length != 0 ? sel[0].cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(val.sheet_type != undefined && val.sheet_type == "both" && const_var.leanGetDataBack.overhang != undefined && const_var.leanGetDataBack.overhang.both != undefined && const_var.leanGetDataBack.overhang.both != null && const_var.leanGetDataBack.overhang.both != ''){
                            let selCost = const_var.leanGetDataBack.overhang.both.cost != undefined ? const_var.leanGetDataBack.overhang.both.cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                    }
                    if(params.add_right_lean ==true && const_var.leanGetDataRight){
                        const_var.leanGetDataRight.extra_items[0].checkbox.map((item)=>{
                            if(val.name=='overhang')
                            {
                                if(const_var.leanGetDataRight.overhang == undefined || (const_var.leanGetDataRight.overhang != undefined && (const_var.leanGetDataRight.overhang.end == undefined || const_var.leanGetDataRight.overhang.end.length == 0) && (const_var.leanGetDataRight.overhang.side == undefined || const_var.leanGetDataRight.overhang.side.length == 0) && (const_var.leanGetDataRight.overhang.both == undefined || const_var.leanGetDataRight.overhang.both == '' || const_var.leanGetDataRight.overhang.both == null))){
                                    if(item.name == val.name && item.label == val.label){
                                        leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                    }                                    
                                }
                            }else{
                                if(item.name == val.name){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }
                        })
                        if(val.sheet_type != undefined && val.sheet_type == "end" && const_var.leanGetDataRight.overhang != undefined && const_var.leanGetDataRight.overhang.end != undefined && const_var.leanGetDataRight.overhang.end.length > 0){
                            let sel = const_var.leanGetDataRight.overhang.end.filter(obj => obj.sheet_name == const_var.isOverhang.end.selected);
                            let selCost = sel.length != 0 ? sel[0].cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(val.sheet_type != undefined && val.sheet_type == "side" && const_var.leanGetDataRight.overhang != undefined && const_var.leanGetDataRight.overhang.side != undefined && const_var.leanGetDataRight.overhang.side.length > 0){
                            let sel = const_var.leanGetDataRight.overhang.side.filter(obj => obj.sheet_name == const_var.isOverhang.side.selected);
                            let selCost = sel.length != 0 ? sel[0].cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(val.sheet_type != undefined && val.sheet_type == "both" && const_var.leanGetDataRight.overhang != undefined && const_var.leanGetDataRight.overhang.both != undefined && const_var.leanGetDataRight.overhang.both != null && const_var.leanGetDataRight.overhang.both != ''){
                            let selCost = const_var.leanGetDataRight.overhang.both.cost != undefined ? const_var.leanGetDataRight.overhang.both.cost :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                    }
                        if(val.name != 'fourth_center_cost' )
                        {
                            if(val.name == 'overhang'){

                                // lean to calculation
                                post_data['building'].leanto = const_var.leanto;
                                let leantoHeightPrice= 0 
                                let leantoBasicPrice= 0 
                                let leanToWallPrice = 0

                                let leanToPriceCalc = {} // leantoPriceCalculation
                                let leanCertificatePrice = 0
                                if(post_data['building'].leanto!=undefined && post_data['building'].leanto.length>0)
                                {
                                    for(var i=0;i<=post_data['building'].leanto.length-1;i++)
                                    {
                                        let porchLength = 0;
                                        post_data['building'].leanto[i].porch = undefined;
                                        if(post_data['building'].leanto[i].front_wall == 'close' && post_data['building'].leanto[i].front_wall_price != undefined){
                                            leanToWallPrice = parseFloat(leanToWallPrice) + post_data['building'].leanto[i].front_wall_price
                                        }
                                        if(post_data['building'].leanto[i].back_wall == 'close' && post_data['building'].leanto[i].back_wall_price != undefined){
                                            leanToWallPrice = parseFloat(leanToWallPrice) + post_data['building'].leanto[i].back_wall_price
                                        }
                                        if(post_data['building'].leanto[i].side_wall == 'close' && post_data['building'].leanto[i].side_wall_price != undefined){
                                            leanToWallPrice = parseFloat(leanToWallPrice) + post_data['building'].leanto[i].side_wall_price
                                        }

                                        if(post_data['building'].leanto[i].height_price != undefined){
                                            leantoHeightPrice = parseFloat(leantoHeightPrice) + post_data['building'].leanto[i].height_price
                                        }
                                        if(post_data['building'].leanto[i].basic_price != undefined){
                                            leantoBasicPrice = parseFloat(leantoBasicPrice) + post_data['building'].leanto[i].basic_price
                                        }



                                        if(post_data['building'].leanto[i].leanto_type==1)
                                        {
                                        post_data['building'].leanto[i].alignment = const_var.TypeAlingnment[params.leantoAlignmentLeft];
                                        post_data['building'].leanto[i].total_length = params.lean_p_d;  
                                        const_var.lengthData.leftLean.porchLength = 0;
                                        if(params.add_left_back_lean_porch==true)
                                        {
                                            post_data['building'].leanto[i].porch = {'type':'left','length':params.lean_p_d+params.leanB_p_w,'cost':parseInt(post_data['building'].connection_fee_left_back),'wrap_with':['back']}
                                            post_data['building'].leanto[i].total_length = params.lean_p_d+params.leanB_p_w;
                                            const_var.lengthData.leftLean.porchLength = params.leanB_p_w;
                                        }if(params.add_left_front_lean_porch==true)
                                        {
                                            post_data['building'].leanto[i].porch = {'type':'left','length':params.lean_p_d+params.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_left_front),'wrap_with':['front']}
                                            post_data['building'].leanto[i].total_length = params.lean_p_d+params.leanF_p_w;
                                            const_var.lengthData.leftLean.porchLength = params.leanF_p_w;
                                        }if(params.add_left_back_lean_porch==true && params.add_left_front_lean_porch==true)
                                        {
                                            post_data['building'].leanto[i].porch = {'type':'left','length':params.lean_p_d+params.leanB_p_w+params.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_left_front)+parseInt(post_data['building'].connection_fee_left_back),'wrap_with':['front','back']}
                                            post_data['building'].leanto[i].total_length = params.lean_p_d+params.leanF_p_w+params.leanB_p_w;  
                                            const_var.lengthData.leftLean.porchLength = params.leanF_p_w+params.leanB_p_w;  
                                        }
                                        if(params.p_e_i!='other' && params.p_e_i!="Select" && params.p_e_i!="")
                                        {
                                            if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0 && post_data['building'].leanto[i].certificate.name == const_var.c_f_aCer[params.p_e_i].name)
                                            {
                                                    leanCertificatePrice = parseFloat(leanCertificatePrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                                            }
                                        }
                                        }if(post_data['building'].leanto[i].leanto_type==2)
                                        {
                                        post_data['building'].leanto[i].alignment = const_var.TypeAlingnment[params.leantoAlignmentRight];
                                        post_data['building'].leanto[i].total_length = params.leanR_p_d;  
                                        const_var.lengthData.rightLean.porchLength = 0;
                                        if(params.add_right_back_lean_porch==true)
                                        {
                                            post_data['building'].leanto[i].porch = {'type':'right','length':params.leanR_p_d+params.leanB_p_w,'cost':parseInt(post_data['building'].connection_fee_right_back),'wrap_with':['back']}
                                            post_data['building'].leanto[i].total_length = params.leanR_p_d+params.leanB_p_w;        
                                            const_var.lengthData.rightLean.porchLength = params.leanB_p_w;
                                        }if(params.add_right_front_lean_porch==true)
                                        {
                                            post_data['building'].leanto[i].porch = {'type':'right','length':params.leanR_p_d+params.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_right_front),'wrap_with':['front']}
                                            post_data['building'].leanto[i].total_length = params.leanR_p_d+params.leanF_p_w;   
                                            const_var.lengthData.rightLean.porchLength = params.leanF_p_w;
                                        }if(params.add_right_back_lean_porch==true && params.add_right_front_lean_porch==true)
                                        {
                                            post_data['building'].leanto[i].porch = {'type':'right','length':params.leanR_p_d+params.leanB_p_w+params.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_right_front)+parseInt(post_data['building'].connection_fee_right_back),'wrap_with':['front','back']}
                                            post_data['building'].leanto[i].total_length = params.leanR_p_d+params.leanF_p_w+params.leanB_p_w;  
                                            const_var.lengthData.rightLean.porchLength = params.leanF_p_w+params.leanB_p_w;
                                        }
                                        if(params.p_e_i!='other' && params.p_e_i!="Select" && params.p_e_i!="")
                                        {
                                            if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0 && post_data['building'].leanto[i].certificate.name == const_var.c_f_aCer[params.p_e_i].name)
                                            {
                                                    leanCertificatePrice = parseFloat(leanCertificatePrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                                            }
                                        }
                                        }
                                        if(post_data['building'].leanto[i].leanto_type==3)
                                        {
                                        post_data['building'].leanto[i].alignment = const_var.endLeanAlingnmentType[params.leantoAlignmentFront];
                                        post_data['building'].leanto[i].total_length = post_data['building'].leanto[i].length;   
                                        if(post_data['building'].leanto[i].porch!=undefined)
                                        {
                                            if(params.add_left_front_lean_porch==true)
                                            {
                                            post_data['building'].leanto[i].porch.wrap_with = ['left'];
                                            }
                                            if(params.add_right_front_lean_porch==true)
                                            {
                                                post_data['building'].leanto[i].porch.wrap_with = ['right'];
                                            }
                                            if(params.add_left_front_lean_porch==true && params.add_right_front_lean_porch==true)
                                            {
                                            post_data['building'].leanto[i].porch.wrap_with = ['left','right'];
                                            }
                                        }
                                        if(params.p_e_i!='other' && params.p_e_i!="Select" && params.p_e_i!="")
                                        {
                                            if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0 && post_data['building'].leanto[i].certificate.name == const_var.c_f_aCer[params.p_e_i].name)
                                            {
                                                    leanCertificatePrice = parseFloat(leanCertificatePrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                                            }
                                        }
                                        }if(post_data['building'].leanto[i].leanto_type==4)
                                        {
                                        post_data['building'].leanto[i].alignment = const_var.endLeanAlingnmentType[params.leantoAlignmentBack];
                                        post_data['building'].leanto[i].total_length = post_data['building'].leanto[i].length;    
                                        if(post_data['building'].leanto[i].porch!=undefined)
                                        {
                                            if(params.add_left_back_lean_porch==true)
                                            {
                                            post_data['building'].leanto[i].porch.wrap_with = ['left'];
                                            }
                                            if(params.add_right_back_lean_porch==true)
                                            {
                                                post_data['building'].leanto[i].porch.wrap_with = ['right'];
                                            }
                                            if(params.add_left_back_lean_porch==true && params.add_right_back_lean_porch==true)
                                            {
                                            post_data['building'].leanto[i].porch.wrap_with = ['left','right'];
                                            }
                                        }
                                        if(params.p_e_i!='other' && params.p_e_i!="Select" && params.p_e_i!="")
                                        {
                                            if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0 && post_data['building'].leanto[i].certificate.name == const_var.c_f_aCer[params.p_e_i].name)
                                            {
                                                    leanCertificatePrice = parseFloat(leanCertificatePrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                                            }
                                        }
                                        }
                                        if(post_data['building'].leanto[i].leanto_type!=2 && post_data['building'].leanto[i].leanto_type!=1)
                                        {
                                        if(post_data['building'].leanto[i].porch!=undefined)
                                        {
                                            post_data['building'].leanto[i].porch.cost = 0;
                                        }
                                        }
                        
                                        leanToPriceCalc.totalLeanPrice =(leanToPriceCalc.totalLeanPrice == undefined)? parseFloat(post_data['building'].leanto[i].t_c_b) :parseFloat(leanToPriceCalc.totalLeanPrice)+parseFloat(post_data['building'].leanto[i].t_c_b);
                                        leanToPriceCalc.totalBasePrice = (leanToPriceCalc.totalBasePrice == undefined)? parseFloat(post_data['building'].leanto[i].basic_price) :parseFloat(leanToPriceCalc.totalBasePrice)+parseFloat(post_data['building'].leanto[i].basic_price); 
                                        leanToPriceCalc.totalWallPrice = (leanToPriceCalc.totalWallPrice == undefined)? parseFloat(post_data['building'].leanto[i].front_wall_price)+parseFloat(post_data['building'].leanto[i].back_wall_price)+parseFloat(post_data['building'].leanto[i].side_wall_price) :parseFloat(leanToPriceCalc.totalWallPrice)+parseFloat(post_data['building'].leanto[i].front_wall_price)+parseFloat(post_data['building'].leanto[i].back_wall_price)+parseFloat(post_data['building'].leanto[i].side_wall_price);
                                        // console.log(post_data['building'].leanto[i].pricing_data,"post_data['building'].leanto[i].pricing_data")
                                        // leanToPriceCalc.totalAdditionalFeaturePrice = (post_data['building'].leanto[i].pricing_data.additional_features!=undefined )?post_data['building'].leanto[i].pricing_data.additional_features:[];
                        
                                        // calculate total side wall price and total end wall price individually 
                                        leanToPriceCalc.totalSideWallPrice = leanToPriceCalc.totalSideWallPrice == undefined ? parseFloat(post_data['building'].leanto[i].side_wall_price) : parseFloat(leanToPriceCalc.totalSideWallPrice) + parseFloat(post_data['building'].leanto[i].side_wall_price)
                                        leanToPriceCalc.totalEndWallPrice = leanToPriceCalc.totalEndWallPrice == undefined ? parseFloat(post_data['building'].leanto[i].front_wall_price) + parseFloat(post_data['building'].leanto[i].back_wall_price) : parseFloat(leanToPriceCalc.totalEndWallPrice) + parseFloat(post_data['building'].leanto[i].front_wall_price) + parseFloat(post_data['building'].leanto[i].back_wall_price)

                                        if(post_data['building'].leanto[i].utility_price!=undefined && post_data['building'].leanto[i].utility_price!=0)
                                        {
                                            leanToPriceCalc.totalWallPrice =  parseFloat(leanToPriceCalc.totalWallPrice) + parseFloat(post_data['building'].leanto[i].utility_price);
                                        }
                                    leanToPriceCalc.totalHeightPrice = (leanToPriceCalc.totalHeightPrice == undefined) ? parseFloat(post_data['building'].leanto[i].height_price):parseFloat(leanToPriceCalc.totalHeightPrice) + parseFloat(post_data['building'].leanto[i].height_price);
                                    leanToPriceCalc.totalDimension = (leanToPriceCalc.totalDimension!=undefined)?parseFloat(leanToPriceCalc.totalDimension) + parseFloat(post_data['building'].leanto[i].width * post_data['building'].leanto[i].total_length): parseFloat(post_data['building'].leanto[i].width * post_data['building'].leanto[i].total_length);
                                    }
                                }
                                else{
                                    leanToPriceCalc.totalLeanPrice = 0;
                                    leanToPriceCalc.totalBasePrice = 0;
                                    leanToPriceCalc.totalWallPrice = 0;
                                    leanToPriceCalc.totalHeightPrice = 0;
                                    leanToPriceCalc.totalDimension = 0;
                                    leanToPriceCalc.totalSideWallPrice = 0;
                                    leanToPriceCalc.totalEndWallPrice = 0;
                                }



                                if(val.cost_type=="%"){
                                    var splitVal = val.price_of != undefined && val.price_of.length > 0 ? val.price_of : 0;
                                    var splval = 0;
                                    if(splitVal!=0)
                                    {
                                        if(splitVal.includes("full_building_price")!=false)
                                        {
                                            
                                                splval = parseFloat(splval) + parseFloat(t_c) + parseFloat(leanToPriceCalc.totalLeanPrice);
                                        }
                                        if(splitVal.includes("base_price")!=false)
                                        {
                                            splval = parseFloat(splval) + parseFloat(post_data['building'].roof_style_price) + parseFloat(leanToPriceCalc.totalBasePrice);
                                        }
                                        if(splitVal.includes("wall_price")!=false)
                                        {
                                            if(val.label.toLowerCase().includes('end')){
                                                if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leanToPriceCalc.totalEndWallPrice) ;
                                                    // + parseFloat(leanToPriceCalc.totalWallPrice);
                                                }else
                                                {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leanToPriceCalc.totalEndWallPrice) ;
                                                    // + parseFloat(leanToPriceCalc.totalWallPrice);
                                                }
                                                if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                                }
                                            }
                                            else if(val.label.toLowerCase().includes('side')){
                                                if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price)  + parseFloat(leanToPriceCalc.totalSideWallPrice) ;
                                                    // + parseFloat(leanToPriceCalc.totalWallPrice);
                                                }else
                                                {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leanToPriceCalc.totalSideWallPrice) ;
                                                    //  + parseFloat(leanToPriceCalc.totalWallPrice);
                                                }
                                                if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                                }
                                            }
                                            else{
                                                if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                                {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price)+ parseFloat(post_data['building'].back_wall_price) + parseFloat(leanToPriceCalc.totalWallPrice);
                                                }else
                                                {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].front_wall_price) +parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leanToPriceCalc.totalWallPrice);
                                                }
                                                if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                                }
                                            }
                                        }
                                        if(splitVal.includes("height_price")!=false)
                                        {
                                        splval = parseFloat(splval) + parseFloat(post_data['building'].height_price) + parseFloat(leanToPriceCalc.totalHeightPrice);
                                        
                                        }

                                        
                                    }
                                                                        let finalCost  = (splval * val.cost) / 100;
                                    let additionalFeatureCost =  (finalCost % 1 == 0) ? finalCost : finalCost.toFixed(2)
            
                                    t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price):((parseFloat(t_c) + parseFloat(additionalFeatureCost) + parseFloat(leantoExtraItemCheckBoxCost)));
                                    extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price:(parseFloat(additionalFeatureCost) + parseFloat(leantoExtraItemCheckBoxCost))});
                                    
                                }
                                else if(val.cost_type=="sqft"){
                                    let sideWallsCount = const_var.cbClosedSideWalls + const_var.flClosedSideWalls + const_var.llClosedSideWalls + const_var.rlClosedSideWalls + const_var.blClosedSideWalls;
                                    let endWallsCount = const_var.cbClosedEndWalls + const_var.flClosedEndWalls + const_var.llClosedEndWalls + const_var.rlClosedEndWalls + const_var.blClosedEndWalls;
                                    
                                    let roofPrice =  0;
                                    let sidePrice = 0;
                                    let endPrice = 0;
                                    let endCount = 0;
                                    let sideCount = 0;
                                    // console.log(const_var.wallsData,"const_var.wallsData")
                                    if(Object.keys(const_var.wallsData['center']).length>0)
                                    {
                                        sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['center'].closedSideWalls);
                                        endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['center'].closedEndWalls);
                                        roofPrice =  parseFloat(roofPrice) + parseFloat(((params.p_w+1) * (params.p_d) * (val.cost)));
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_d) * (params.p_h) * (val.cost )* sideCount)); 
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+1) * (params.p_w) *(val.cost)* endCount));
                                    }if(Object.keys(const_var.wallsData['frontLean']).length>0 && params.add_front_lean==true)
                                    {
                                        if(const_var.wallsData['frontLean'].closedSideWalls!=0)
                                        {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['frontLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_d) * (params.leanF_p_h) * (val.cost )* sideCount)); 
                                        }
                                        if(const_var.wallsData['frontLean'].closedEndWalls!=0)
                                        {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['frontLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((params.leanF_p_h+1) * (params.leanF_p_w) *(val.cost)* endCount));
                                        }
                                        
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanF_p_w+1) * (params.leanF_p_d) * (val.cost)));
                                        
                                    }if(Object.keys(const_var.wallsData['backLean']).length>0 && params.add_back_lean==true)
                                    {
                                        if(const_var.wallsData['backLean'].closedSideWalls!=0)
                                        {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['backLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_d) * (params.leanB_p_h) * (val.cost )* sideCount)); 
                                        }
                                        if(const_var.wallsData['backLean'].closedEndWalls!=0)
                                        {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['backLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((params.leanB_p_h+1) * (params.leanB_p_w) *(val.cost)* endCount));
                                        }
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanB_p_w+1) * (params.leanB_p_d) * (val.cost)));
                                    }if(Object.keys(const_var.wallsData['leftLean']).length>0 && params.add_left_lean==true)
                                    {
                                        if(const_var.wallsData['leftLean'].closedSideWalls!=0)
                                        {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['leftLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.lean_p_d) * (params.lean_p_h) * (val.cost )* sideCount)); 
                                        }
                                        if(const_var.wallsData['leftLean'].closedEndWalls!=0)
                                        {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['leftLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((params.lean_p_h+1) * (params.lean_p_w) *(val.cost)* endCount));
                                        }
                                        
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((params.lean_p_w+1) * (params.lean_p_d) * (val.cost)));
                                        
                                    }if(Object.keys(const_var.wallsData['rightLean']).length>0 && params.add_right_lean==true)
                                    {
                                        if(const_var.wallsData['rightLean'].closedSideWalls!=0)
                                        {
                                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['rightLean'].closedSideWalls);
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanR_p_d) * (params.leanR_p_h) * (val.cost )* sideCount)); 
                                        }
                                        if(const_var.wallsData['rightLean'].closedEndWalls!=0)
                                        {
                                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['rightLean'].closedEndWalls);
                                            endPrice = parseFloat(endPrice) + parseFloat(((params.leanR_p_h+1) * (params.leanR_p_w) *(val.cost)* endCount));
                                        }
                                        roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanR_p_w+1) * (params.leanR_p_d) * (val.cost)));
                                    }
                                    if(const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && (const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==undefined || const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==false))
                                    {
                                        let FullCalculatedPrice = parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
                                        var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leanToPriceCalc.totalDimension);
                                        t_c = parseFloat(t_c) + parseFloat(((FullCalculatedPrice)));


                                        extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':  parseFloat(FullCalculatedPrice)})
                                        
                                    }else
                                    {
                                        let FullCalculatedPrice = parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
                                        var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leanToPriceCalc.totalDimension);

                                        t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price):((parseFloat(t_c) + parseFloat(FullCalculatedPrice) + parseFloat(leantoExtraItemCheckBoxCost)));
                                        extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price:(parseFloat(FullCalculatedPrice) + parseFloat(leantoExtraItemCheckBoxCost))});
                                    }
                                    
                                }
                                else{
                                    t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price):((parseFloat(t_c) + parseFloat(val.cost) + parseFloat(leantoExtraItemCheckBoxCost)));
                                    extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price:(parseFloat(val.cost) + parseFloat(leantoExtraItemCheckBoxCost))});
                                }
                            }

                            else{
                                t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price):((parseFloat(t_c) + parseFloat(val.cost) + parseFloat(leantoExtraItemCheckBoxCost)));
                                extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price:(parseFloat(val.cost) + parseFloat(leantoExtraItemCheckBoxCost))});    
                            }
                        }
                    }
            });
            post_data['building'].ExtraItemsFeaturesArray = const_var.ExtraItemsFeaturesArray;
        }
        if(const_var.ExtraItemsFeaturesQuantityArray!=undefined && const_var.ExtraItemsFeaturesQuantityArray.length>0)
        {
            const_var.ExtraItemsFeaturesQuantityArray.map((val, index) => {
                if(val!=null && val.is_checked==true)
                {
                    let leantoExtraItemCheckBoxQuantityCost = 0, legsPrice = 0;
                    if(params.add_left_lean && const_var.leanGetDataLeft){
                        const_var.leanGetDataLeft.extra_items[0].checkbox_quantity.map((item)=>{
                            if(item.name == val.name){
                                leantoExtraItemCheckBoxQuantityCost = leantoExtraItemCheckBoxQuantityCost + item.cost;

                                if (params.lean_p_e_l && const_var.leanLegstype.includes("double") && item.double_leg != undefined  && item.name == "bows" && item.double_leg !=0) {
                                    legsPrice = legsPrice + item.double_leg;
                                }else if (params.lean_p_e_l && const_var.leanLegstype.includes("ladder") && item.ladder_leg != undefined  && item.name == "bows" && item.ladder_leg != 0) {
                                    legsPrice = legsPrice + item.ladder_leg;
                                } else {
                                    legsPrice = legsPrice + item.cost
                                }
                            }
                        })
                    }if(params.add_front_lean && const_var.leanGetDataFront){
                        const_var.leanGetDataFront.extra_items[0].checkbox_quantity.map((item)=>{
                            if(item.name == val.name){
                                leantoExtraItemCheckBoxQuantityCost = leantoExtraItemCheckBoxQuantityCost + item.cost;

                                if (params.leanF_p_e_l && const_var.leanFLegstype.includes("double") && item.double_leg != undefined  && item.name == "bows" && item.double_leg != 0) {
                                    legsPrice = legsPrice + item.double_leg;
                                } else if (params.leanF_p_e_l && const_var.leanFLegstype.includes("ladder") && item.ladder_leg != undefined  && item.name == "bows" && item.ladder_leg != 0) {
                                    legsPrice = legsPrice + item.ladder_leg;
                                } else {
                                    legsPrice = legsPrice + item.cost
                                }
                            }
                        })
                    }if(params.add_back_lean && const_var.leanGetDataBack){
                        const_var.leanGetDataBack.extra_items[0].checkbox_quantity.map((item)=>{
                            if(item.name == val.name){
                                leantoExtraItemCheckBoxQuantityCost = leantoExtraItemCheckBoxQuantityCost + item.cost;

                                if (params.leanB_p_e_l && const_var.leanBLegstype.includes("double") && item.double_leg != undefined  && item.name == "bows" && item.double_leg != 0) {
                                    legsPrice = legsPrice + item.double_leg;
                                } else if (params.leanB_p_e_l && const_var.leanBLegstype.includes("ladder") && item.ladder_leg != undefined  && item.name == "bows" && item.ladder_leg != 0) {
                                    legsPrice = legsPrice + item.ladder_leg;
                                } else {
                                    legsPrice = legsPrice + item.cost
                                }
                            }
                        })
                    }
                    if(params.add_right_lean && const_var.leanGetDataRight){
                        const_var.leanGetDataRight.extra_items[0].checkbox_quantity.map((item)=>{
                            if(item.name == val.name){
                                leantoExtraItemCheckBoxQuantityCost = leantoExtraItemCheckBoxQuantityCost + item.cost;

                                if (params.leanR_p_e_l && const_var.leanRLegstype.includes("double") && item.double_leg != undefined  && item.name == "bows" && item.double_leg != 0) {
                                    legsPrice = legsPrice + item.double_leg;
                                } else if (params.leanR_p_e_l && const_var.leanRLegstype.includes("ladder") && item.ladder_leg != undefined  && item.name == "bows" && item.ladder_leg != 0) {
                                    legsPrice = legsPrice + item.ladder_leg;
                                } else {
                                    legsPrice = legsPrice + item.cost
                                }
                            }
                        })
                    }
                    if (params.p_e_l && const_var.legstype.includes("double") && val.double_leg != undefined  && val.name == "bows" && val.double_leg !=0) {
                        legsPrice = legsPrice + val.double_leg;
                    } else if (params.p_e_l && const_var.legstype.includes("ladder") && val.ladder_leg != undefined  && val.name == "bows" && val.ladder_leg !=0) {
                        legsPrice = legsPrice + val.ladder_leg;
                    } else {
                        legsPrice = legsPrice + val.cost;
                    }
                    legsPrice = convertToTwoDecimalNumber(legsPrice);

                    if(val.cost==0 && val.double_leg==0 && val.ladder_leg==0 && val.name=="bows")
                    {
                        legsPrice = 0;
                    }

                    // t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price):(parseFloat(t_c) + (parseFloat(val.quantity * val.cost)) + parseFloat(val.quantity  * leantoExtraItemCheckBoxQuantityCost));
                    // extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price:(parseInt((val.quantity * val.cost)) + parseInt((val.quantity * leantoExtraItemCheckBoxQuantityCost)))});

                    t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price): (val.name == "bows") ? (parseFloat(t_c)  + parseFloat(val.quantity  * legsPrice)) : (parseFloat(t_c)  + parseFloat(val.quantity  * val.cost) + parseFloat(val.quantity  * leantoExtraItemCheckBoxQuantityCost));
                    if(val.is_disabled==true)
                    {
                        extra_items.push({'is_disabled':val.is_disabled,'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price: (val.name == "bows") ? (parseFloat(val.quantity  * legsPrice)): (parseFloat(val.quantity  * val.cost) + parseFloat(val.quantity  * leantoExtraItemCheckBoxQuantityCost)) });
                    }else{
                        extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price: (val.name == "bows") ? (parseFloat(val.quantity  * legsPrice)): (parseFloat(val.quantity  * val.cost) + parseFloat(val.quantity  * leantoExtraItemCheckBoxQuantityCost)) });
                    }
                    
                }
            });
            post_data['building'].ExtraItemsFeaturesQuantityArray = const_var.ExtraItemsFeaturesQuantityArray;
        }
    //    console.log(t_c,"t_ct_ct_c")
        if(params.p_j_t_end==true  && data.jtrim.length>0 )
        {
            let isJtrimEnd = false;
            let isJtrimEndPriceCenter = false;
            let isJtrimEndPriceLeftLean = false;
            let isJtrimEndPriceRightLean = false;    
            let isJtrimEndPriceFrontLean = false;
            let isJtrimEndPriceBackLean = false;
            let centerBuildingNumber = 1;
            let leftBuildingNumber = 1;
            let rightBuildingNumber = 1;
            let frontBuildingNumber = 1;
            let backBuildingNumber = 1;
             if(params.p_f_w!=="Close" && params.p_f_w!=="Open" )
              {
                    isJtrimEnd = true;
                    isJtrimEndPriceCenter = true;
                    centerBuildingNumber = (params.p_b_w!=="Close" && params.p_b_w!=="Open" )?2:1;
              }else
              {
                centerBuildingNumber = 1;
              }
              if(params.p_b_w!=="Close" && params.p_b_w!=="Open" )
              {
                    isJtrimEnd = true;
                    isJtrimEndPriceCenter = true;
                    centerBuildingNumber = (params.p_f_w!=="Close" && params.p_f_w!=="Open" )?2:1;
              }else
              {
                centerBuildingNumber = 1;
              }
              if(params.p_b_c_b_l_f!="Open" && params.p_b_c_b_l_f!="Close")
              {
                 isJtrimEnd = true;
                 isJtrimEndPriceLeftLean = true;
                 leftBuildingNumber = (params.p_b_c_b_l_b!="Open" && params.p_b_c_b_l_b!="Close")?2:1;
              }else
              {
                leftBuildingNumber = 1;
              }
              if(params.p_b_c_b_l_b!="Open" && params.p_b_c_b_l_b!="Close")
              {
                isJtrimEnd = true;
                isJtrimEndPriceLeftLean = true;
                leftBuildingNumber = (params.p_b_c_b_l_f!="Gable" && params.p_b_c_b_l_f!="Close")?2:1;
              }
              else
              {
                leftBuildingNumber = 1;
              }
              
              if(params.p_b_c_b_f_f!="Open" && params.p_b_c_b_f_f!="Close")
              {
                 isJtrimEnd = true;
                 isJtrimEndPriceFrontLean = true;
                 frontBuildingNumber = (params.p_b_c_b_f_f!="Open" && params.p_b_c_b_f_f!="Close")?2:1;
              }
              else
              {
                frontBuildingNumber = 1;
              }
              if(params.p_b_c_b_f_b!="Open" && params.p_b_c_b_f_b!="Close")
              {
                isJtrimEnd = true;
                isJtrimEndPriceFrontLean = true;
                frontBuildingNumber = (params.p_b_c_b_f_b!="Open" && params.p_b_c_b_f_b!="Close")?2:1;
              }
              else
              {
                frontBuildingNumber = 1;
              }
              
              if(params.p_b_c_b_b_f!="Open" && params.p_b_c_b_b_f=="Close")
              {
                 isJtrimEnd = true;
                 isJtrimEndPriceBackLean = true;
                 backBuildingNumber = (params.p_b_c_b_b_f!="Open" && params.p_b_c_b_b_f!="Close")?2:1;
              }
              else
              {
                backBuildingNumber = 1;
              }
              
              if(params.p_b_c_b_b_b!="Open" && params.p_b_c_b_b_b!="Close")
              {
                isJtrimEnd = true;
                isJtrimEndPriceBackLean = true;
                backBuildingNumber = (params.p_b_c_b_b_b!="Open" && params.p_b_c_b_b_b!="Close")?2:1;
              }
              else
              {
                backBuildingNumber = 1;
              }
              
              if(params.p_b_c_b_r_f!="Open"  && params.p_b_c_b_r_f!="Close" )
              {
                    isJtrimEnd = true;
                    isJtrimEndPriceRightLean = true;
                    rightBuildingNumber = (params.p_b_c_b_r_b!="Open" && params.p_b_c_b_r_b!="Close")?2:1;
              }else
              {
                rightBuildingNumber = 1;
              }if(params.p_b_c_b_r_b!="Open" && params.p_b_c_b_r_b!="Close")
              {
                    isJtrimEnd = true;
                    isJtrimEndPriceRightLean = true;
                    rightBuildingNumber = (params.p_b_c_b_r_f!="Open" && params.p_b_c_b_r_f!="Close")?2:1;
              }else
              {
                rightBuildingNumber = 1;
              }
              var jtrimPrice = 0;

              //let centerJtrim = data.jtrim.filter(data=>data.type=="end");
              let centerJtrim = data.jtrim.find(data=>data.type=="end");
            if(params.p_j_t_end==true && centerJtrim)
            {
                if(isJtrimEndPriceCenter==true)
                {
                    jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(centerJtrim.cost) * parseFloat(centerBuildingNumber));
                }else
                {
                    jtrimPrice = parseFloat(jtrimPrice) + 0;
                }

                let rightJtrim = (const_var.leanGetDataRight!="" && const_var.leanGetDataRight.jtrim.length>0)?const_var.leanGetDataRight.jtrim.find(data=>data.type=="end"):undefined;
                let frontJtrim = (const_var.leanGetDataFront!="" && const_var.leanGetDataFront.jtrim.length>0)?const_var.leanGetDataFront.jtrim.find(data=>data.type=="end"):undefined;
                let backJtrim = (const_var.leanGetDataBack!="" && const_var.leanGetDataBack.jtrim.length>0)?const_var.leanGetDataBack.jtrim.find(data=>data.type=="end"):undefined;
                let leftJtrim = (const_var.leanGetDataLeft!="" && const_var.leanGetDataLeft.jtrim.length>0)?const_var.leanGetDataLeft.jtrim.find(data=>data.type=="end"):undefined;
               
               if(
                (rightJtrim!=undefined && params.add_right_lean==true && const_var.leanGetDataRight!="" &&const_var.leanGetDataRight.jtrim.length>0 && isJtrimEndPriceRightLean==true) && 
                (leftJtrim!=undefined && params.add_left_lean==true && const_var.leanGetDataLeft!="" && const_var.leanGetDataLeft.jtrim.length>0 && isJtrimEndPriceLeftLean==true)
                 && (frontJtrim!=undefined && params.add_front_lean==true && const_var.leanGetDataFront!="" && const_var.leanGetDataFront.jtrim.length>0 && isJtrimEndPriceFrontLean==true) && 
                 (backJtrim!=undefined && params.add_back_lean==true && const_var.leanGetDataBack!="" && const_var.leanGetDataBack.jtrim.length>0 && isJtrimEndPriceBackLean==true))
               {
                    if(isJtrimEndPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(leftJtrim.cost)* parseFloat(leftBuildingNumber))  + (parseFloat(rightJtrim.cost)* parseFloat(rightBuildingNumber)) + (parseFloat(frontJtrim.cost)* parseFloat(frontBuildingNumber)) + (parseFloat(backJtrim.cost)* parseFloat(backBuildingNumber));
                    }else
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(leftJtrim.cost)* parseFloat(leftBuildingNumber))  + (parseFloat(rightJtrim.cost)* parseFloat(rightBuildingNumber)) + (parseFloat(frontJtrim.cost)* parseFloat(frontBuildingNumber)) + (parseFloat(backJtrim.cost)* parseFloat(backBuildingNumber));
                    }
                    
                    //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':jtrimPrice});
               }if(rightJtrim!=undefined && params.add_right_lean==true && const_var.leanGetDataRight!="" && const_var.leanGetDataRight.jtrim.length>0 && isJtrimEndPriceRightLean==true)
               {
                    if(isJtrimEndPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(rightJtrim.cost)* parseFloat(rightBuildingNumber));
                    }else{
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(rightJtrim.cost) * parseFloat(rightBuildingNumber));
                    }
                    //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':jtrimPrice});
               }if(frontJtrim!=undefined && params.add_front_lean==true && const_var.leanGetDataFront!="" && const_var.leanGetDataFront.jtrim.length>0 && isJtrimEndPriceFrontLean==true)
               {
                    if(isJtrimEndPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(frontJtrim.cost)* parseFloat(frontBuildingNumber));
                    }else{
                        jtrimPrice = parseFloat(jtrimPrice) +(parseFloat(frontJtrim.cost)* parseFloat(frontBuildingNumber));
                    }
                    //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':jtrimPrice});
               }if(backJtrim!=undefined && params.add_back_lean==true && const_var.leanGetDataBack!="" && const_var.leanGetDataBack.jtrim.length>0 && isJtrimEndPriceBackLean==true)
               {
                    if(isJtrimEndPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(backJtrim.cost)* parseFloat(backBuildingNumber));
                    }else{
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(backJtrim.cost)* parseFloat(backBuildingNumber));
                    }
                    //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':jtrimPrice});
               }if(leftJtrim!=undefined && params.add_left_lean==true && const_var.leanGetDataLeft!="" && const_var.leanGetDataLeft.jtrim.length>0 && isJtrimEndPriceLeftLean==true)
               {
                    if(isJtrimEndPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + (parseFloat(leftJtrim.cost) * parseFloat(leftBuildingNumber));
                    }else{
                        jtrimPrice = parseFloat(jtrimPrice) +  (parseFloat(leftJtrim.cost) * parseFloat(leftBuildingNumber));
                    }
                    //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':jtrimPrice});
               }


               extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements']['End Jtrim']!=undefined && const_var.UpdatedPriceData['elements']['End Jtrim'].is_edit!=undefined )?const_var.UpdatedPriceData['elements']['End Jtrim'].is_edit:false,'item_name':'End Jtrim','item_quantity':(params.p_j_t_end==true)?1:0,'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements']['End Jtrim']!=undefined && const_var.UpdatedPriceData['elements']['End Jtrim'].is_edit==true )?const_var.UpdatedPriceData['elements']['End Jtrim'].item_price: convertToTwoDecimalNumber(jtrimPrice)});
               t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements']['End Jtrim']!=undefined && const_var.UpdatedPriceData['elements']['End Jtrim'].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements']['End Jtrim'].item_price):parseFloat(t_c) + parseFloat(jtrimPrice);

           }
        }
        if(params.p_j_t==true  && data.jtrim.length>0 )
        {
            let isJtrim = false;
            let isJtrimPriceCenter = false;
            let isJtrimPriceLeftLean = false;
            let isJtrimPriceFrontLean = false;
            let isJtrimPriceBackLean = false;
            let isJtrimPriceRightLean = false;
            let centerBuildingNumber = 1;
            let checkWallPanelActiveLeft = 1;
            let checkWallPanelActiveRight = 1;
            let SideWallLeft = 0;  
            let SideWallRight = 0;  
              if(params.p_l_w!=="Close" && params.p_l_w!=="Open" )
              {
                    isJtrim = true;
                    isJtrimPriceCenter = true;
                    centerBuildingNumber = (params.p_r_w!=="Close" && params.p_r_w!=="Open" )?2:1;
                    checkWallPanelActiveLeft = centerBuildingNumber;
                    SideWallLeft = 1;
              }else
              {
                centerBuildingNumber = 1;
                checkWallPanelActiveLeft = 1;
                SideWallLeft = 0;
              }
              
              if(params.p_r_w!=="Close" && params.p_r_w!=="Open" )
              {
                    isJtrim = true;
                    isJtrimPriceCenter = true;
                    centerBuildingNumber = (params.p_l_w!=="Close" && params.p_l_w!=="Open" )?2:1;
                    checkWallPanelActiveRight = centerBuildingNumber;
                    SideWallRight = 1;
              }else
              {
                centerBuildingNumber = 1;
                checkWallPanelActiveRight = 1;
                SideWallRight = 0
              }
              if(params.p_c_p_l==true && params.p_l_w=="Open")
              {
                    isJtrim = true;
                    isJtrimPriceCenter = true;
                    centerBuildingNumber =(params.p_c_p_r==true || (params.p_r_w!=="Close" && params.p_r_w!=="Open" ))? 2:centerBuildingNumber;
                    SideWallLeft = (SideWallLeft!=0)?SideWallLeft+1:1;
              }if(params.p_c_p_l==true && (params.p_l_w!=="Close" && params.p_l_w!=="Open" ))
              {
                    SideWallLeft = (SideWallLeft!=0)?SideWallLeft+1:1;
              }
              if(params.p_c_p_r==true && params.p_r_w=="Open")
              {
                    isJtrim = true;
                    isJtrimPriceCenter = true;
                    centerBuildingNumber =(params.p_c_p_l==true || (params.p_l_w!=="Close" && params.p_l_w!=="Open" ))? 2:centerBuildingNumber;
                    SideWallRight = (SideWallRight!=0)?SideWallRight+1:1;
              }if(params.p_c_p_r==true && (params.p_r_w!=="Close" && params.p_r_w!=="Open" ))
              {
                    SideWallRight = (SideWallRight!=0)?SideWallRight+1:1;
              }
            //   console.log(centerBuildingNumber,"centerBuildingNumber",params.p_c_p_r,params.p_c_p_l)
              
              if(params.p_b_c_b_l!=="Close" && params.p_b_c_b_l!=="Open"  )
              {
                 isJtrim = true;
                 isJtrimPriceLeftLean = true;
              }
              if(params.p_b_c_b_f_l!=="Close" && params.p_b_c_b_f_l!=="Open" )
              {
                 isJtrim = true;
                 isJtrimPriceFrontLean = true;
              }if(params.p_b_c_b_b_l!=="Close" && params.p_b_c_b_b_l!=="Open" )
              {
                 isJtrim = true;
                 isJtrimPriceBackLean = true;
              }
              if(params.p_b_c_b_r!=="Close" && params.p_b_c_b_r!=="Open"  )
              {
                 isJtrim = true;
                 isJtrimPriceRightLean = true;
              }

              if(isJtrim!=true)
              {
                params.p_j_t = false;
              }
            var jtrimPrice = 0;
            
            let JtrimVal = 0;
            if(params.p_j_t==true)
            {
                JtrimVal = 1;
            }
            if(params.p_j_t==true)
            {
                let sideJtrimP = data.jtrim.find(data=>data.type=="side");
                let centerJtrimPriceL = 0;
                let centerJtrimPriceR = 0;
                if(isJtrimPriceCenter==true && sideJtrimP)
                {   
                    let newCutPanelJtrim_Price = 0;
                    if(params.p_c_p_l==true || params.p_c_p_r ==true)
                    {
                        newCutPanelJtrim_Price = (sideJtrimP.cut_panel_jtrim!=undefined)?sideJtrimP.cut_panel_jtrim:0;
                    }
                    if(sideJtrimP.is_cut_panel_jtrim!=undefined && SideWallLeft==2)
                    {
                        centerJtrimPriceL = (sideJtrimP.is_cut_panel_jtrim=="included" || sideJtrimP.is_panel_jtrim=="included")?0:parseFloat(sideJtrimP.cost)+parseFloat(sideJtrimP.cut_panel_jtrim);
                    }else{
                        if(SideWallLeft==1)
                        {
                            if(params.p_c_p_l==true)
                            {
                                centerJtrimPriceL = (sideJtrimP.is_cut_panel_jtrim=="included" || sideJtrimP.is_cut_panel_jtrim=="no")?0:(parseFloat(sideJtrimP.cut_panel_jtrim)==0)?parseFloat(sideJtrimP.cost):parseFloat(sideJtrimP.cut_panel_jtrim);
                            }else{
                                centerJtrimPriceL = (sideJtrimP.is_panel_jtrim=="included" || sideJtrimP.is_panel_jtrim=="no")?0:parseFloat(sideJtrimP.cost);
                            }
                        }
                    }
                    if(sideJtrimP.is_cut_panel_jtrim!=undefined && SideWallRight==2)
                    {
                        centerJtrimPriceR = (sideJtrimP.is_cut_panel_jtrim=="included" || sideJtrimP.is_panel_jtrim=="included")?0:parseFloat(sideJtrimP.cost)+parseFloat(sideJtrimP.cut_panel_jtrim);
                    }else{
                        if(SideWallRight==1)
                        {
                            if(params.p_c_p_r==true)
                            {
                                centerJtrimPriceR = (sideJtrimP.is_cut_panel_jtrim=="included" || sideJtrimP.is_cut_panel_jtrim=="no")?0:(parseFloat(sideJtrimP.cut_panel_jtrim)==0)?parseFloat(sideJtrimP.cost):parseFloat(sideJtrimP.cut_panel_jtrim);
                            }else{
                                centerJtrimPriceR = (sideJtrimP.is_panel_jtrim=="included" || sideJtrimP.is_panel_jtrim=="no")?0:parseFloat(sideJtrimP.cost);
                            }
                        }
                    }
                    if(sideJtrimP.is_panel_jtrim!=undefined)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + ((parseFloat(centerJtrimPriceL)+ (parseFloat(centerJtrimPriceR))));
                    }else{
                        jtrimPrice = parseFloat(jtrimPrice) + ((parseFloat(sideJtrimP.cost))* parseFloat(centerBuildingNumber));
                    }
                }else
                {
                    jtrimPrice = parseFloat(jtrimPrice) + 0;
                }
               if((params.add_right_lean==true && const_var.leanGetDataRight!="" && const_var.leanGetDataRight.jtrim.length>0 && isJtrimPriceRightLean==true) && (params.add_left_lean==true && const_var.leanGetDataLeft!="" && const_var.leanGetDataLeft.jtrim.length>0 && isJtrimPriceLeftLean==true) && (params.add_fron_lean==true && const_var.leanGetDataFront!="" && const_var.leanGetDataFront.jtrim.length>0 && isJtrimPriceFrontLean==true) && (params.add_back_lean==true && const_var.leanGetDataBack!="" && const_var.leanGetDataBack.jtrim.length>0 && isJtrimPriceBackLean==true))
               {
                    if(isJtrimPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + parseFloat(const_var.leanGetDataLeft.jtrim[0].cost) + parseFloat(const_var.leanGetDataRight.jtrim[0].cost) + parseFloat(const_var.leanGetDataFront.jtrim[0].cost) + parseFloat(const_var.leanGetDataBack.jtrim[0].cost);
                    }else{
                        jtrimPrice = parseFloat(jtrimPrice) + parseFloat(const_var.leanGetDataLeft.jtrim[0].cost) + parseFloat(const_var.leanGetDataRight.jtrim[0].cost)+ parseFloat(const_var.leanGetDataFront.jtrim[0].cost) + parseFloat(const_var.leanGetDataBack.jtrim[0].cost);
                    }
                    //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':jtrimPrice});
               }if(params.add_front_lean==true && const_var.leanGetDataFront!="" && const_var.leanGetDataFront.jtrim.length>0 && isJtrimPriceFrontLean==true)
               {
                    if(isJtrimPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) +  parseFloat(const_var.leanGetDataFront.jtrim[0].cost);
                    }else
                    {
                        jtrimPrice = parseFloat(jtrimPrice) +  parseFloat(const_var.leanGetDataFront.jtrim[0].cost);
                    }
                    //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':jtrimPrice});
               }if(params.add_back_lean==true && const_var.leanGetDataBack!="" && const_var.leanGetDataBack.jtrim.length>0 && isJtrimPriceBackLean==true)
               {
                    if(isJtrimPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + parseFloat(const_var.leanGetDataBack.jtrim[0].cost);
                    }else
                    {
                        jtrimPrice = parseFloat(jtrimPrice) +  parseFloat(const_var.leanGetDataBack.jtrim[0].cost);
                    }
                    //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':jtrimPrice});
               }if(params.add_right_lean==true && const_var.leanGetDataRight!="" && const_var.leanGetDataRight.jtrim.length>0 && isJtrimPriceRightLean==true)
               {
                    if(isJtrimPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + parseFloat(const_var.leanGetDataRight.jtrim[0].cost);
                    }else
                    {
                        jtrimPrice = parseFloat(jtrimPrice) +  parseFloat(const_var.leanGetDataRight.jtrim[0].cost);
                    }
                    //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':jtrimPrice});
               }if(params.add_left_lean==true && const_var.leanGetDataLeft!="" && const_var.leanGetDataLeft.jtrim.length>0 && isJtrimPriceLeftLean==true)
               {
                    if(isJtrimPriceCenter==true)
                    {
                        jtrimPrice = parseFloat(jtrimPrice) + parseFloat(const_var.leanGetDataLeft.jtrim[0].cost);
                    }else
                    {
                        jtrimPrice = parseFloat(jtrimPrice)  + parseFloat(const_var.leanGetDataLeft.jtrim[0].cost);
                    }
                    //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':jtrimPrice});
               }
                
                //t_c = ((parseFloat(t_c) + parseFloat(val.cost) + parseFloat(leantoExtraItemCheckBoxCost)).toFixed(2));
                
               extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements']['Jtrim']!=undefined && const_var.UpdatedPriceData['elements']['Jtrim'].is_edit!=undefined )?const_var.UpdatedPriceData['elements']['Jtrim'].is_edit:false,'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements']['Jtrim']!=undefined && const_var.UpdatedPriceData['elements']['Jtrim'].is_edit==true )?const_var.UpdatedPriceData['elements']['Jtrim'].item_price:convertToTwoDecimalNumber(jtrimPrice)});
               t_c =  (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements']['Jtrim']!=undefined && const_var.UpdatedPriceData['elements']['Jtrim'].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements']['Jtrim'].item_price):parseFloat(t_c) + parseFloat(jtrimPrice);
           }
            //extra_items.push({'item_name':'Jtrim','item_quantity':(params.p_j_t==true)?1:0,'item_price':(data.jtrim[0].cost)});
        }
        if(params.p_e_b!=0)
        {
          var bowsPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_width_changed!=true || const_var.UpdatedPriceData.common_height_changed!=true))?const_var.UpdatedPriceData['elements']['Extra Bows'].item_price:((data.bows[0].cost * params.p_e_b));  
          extra_items.push({'item_name':'Extra Bows','item_quantity':parseInt(params.p_e_b),'item_price':bowsPrice});
          t_c = parseFloat(t_c) + parseFloat(bowsPrice);
        }
        // if(params.fourth_center_cost==true)
        // {
        //     var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_length_changed!=true))?const_var.UpdatedPriceData['elements']['Four Feet Center'].item_price:data.addons[0].fourth_center_cost; 
        //     extra_items.push({'item_name':'Four Feet Center','item_quantity':(params.fourth_center_cost==true)?1:0,'item_price':extPrice});
        //     t_c = t_c + extPrice;
        // }
        if(params.risk_cost==true)
        {
            var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_length_changed!=true))?const_var.UpdatedPriceData['elements']['Risk Cost'].item_price:(data.addons[0].risk_cost); 
            extra_items.push({'item_name':'Risk Cost','item_quantity':(params.risk_cost==true)?1:0,'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(params.p_s_c_b==true)
        {
            if(const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements']['Side Cross Bracing'] == undefined)
            {
                const_var.UpdatedPriceData.common_length_changed = true;
            }
            var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_length_changed!=true  && ((const_var.UpdatedPriceData['elements']['Side Cross Bracing'] != undefined && const_var.UpdatedPriceData.height_price_changed != true))))?const_var.UpdatedPriceData['elements']['Side Cross Bracing'].item_price:(data.side_cross_bracing[0].cost);  
            extra_items.push({'item_name':'Side Cross Bracing','item_quantity':(params.p_s_c_b==true)?1:0,'item_price':extPrice});
            t_c = parseFloat(t_c) + parseFloat(extPrice);
        }
        if(params.p_e_c_b==true)
        {
            if((data.addons_width) && data.addons_width.length>0 && data.addons_width[0].end_cross_bracing!=undefined && data.addons_width[0].end_cross_bracing!=0)
            {
                var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined  && (const_var.UpdatedPriceData.common_width_changed!=true && (const_var.UpdatedPriceData['elements']['End Cross Bracing'] != undefined && const_var.UpdatedPriceData.height_price_changed != true)))?const_var.UpdatedPriceData['elements']['End Cross Bracing'].item_price:(data.addons_width[0].end_cross_bracing);  
                extra_items.push({'item_name':'End Cross Bracing','item_quantity':(params.p_e_c_b==true)?1:0,'item_price':extPrice});
                t_c = parseFloat(t_c) + parseFloat(extPrice);
            }if((data.end_cross_bracing!=undefined) && data.end_cross_bracing.length>0)
            {
                if(const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements']['End Cross Bracing'] == undefined)
                {
                    const_var.UpdatedPriceData.common_width_changed = true;
                }
                var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_width_changed!=true && (const_var.UpdatedPriceData['elements']['End Cross Bracing'] != undefined && const_var.UpdatedPriceData.height_price_changed != true)))?const_var.UpdatedPriceData['elements']['End Cross Bracing'].item_price:(data.end_cross_bracing[0].cost);  
                extra_items.push({'item_name':'End Cross Bracing','item_quantity':(params.p_e_c_b==true)?1:0,'item_price':extPrice});
                t_c = parseFloat(t_c) + parseFloat(extPrice);
            }
            
        }
        if(params.p_g_c==true)
        {
            var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_length_changed!=true))?const_var.UpdatedPriceData['elements']['Ground Certification'].item_price:(data.addons[0].ground_certificate); 
            extra_items.push({'item_name':'Ground Certification','item_quantity':(params.p_g_c==true)?1:0,'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(params.p_o_p==true)
        {
            var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_length_changed!=true))?const_var.UpdatedPriceData['elements']['Overhang'].item_price:(data.addons[0].overhang); 
            extra_items.push({'item_name':'Overhang','item_quantity':(params.p_o_p==true)?1:0,'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(params.p_p_b!=0)
        {
            var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_width_changed!=true))?const_var.UpdatedPriceData['elements']['Peak Braces'].item_price:((data.addons_width[0].peak_braces*parseInt(params.p_p_b)));  
            extra_items.push({'item_name':'Peak Braces','item_quantity':parseInt(params.p_p_b),'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(params.cert_pac_cost==true)
        {
            var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_length_changed!=true))?const_var.UpdatedPriceData['elements']['Certificate Cost'].item_price:(data.addons[0].cert_pac_cost); 
            extra_items.push({'item_name':'Certificate Cost','item_quantity':(params.cert_pac_cost==true)?1:0,'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(params.p_e_t!=0)
        {
            var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_height_changed!=true))?const_var.UpdatedPriceData['elements']['Extra Truss'].item_price:((data.trusses[0].cost * params.p_e_t)); 
            extra_items.push({'item_name':'Extra Truss','item_quantity':params.p_e_t,'item_price':extPrice});
            t_c = t_c + extPrice;
        }if(params.p_t_u!=0)
        {
            var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_width_changed!=true || const_var.UpdatedPriceData.common_length_changed!=true))?const_var.UpdatedPriceData['elements']['Truss Upgrade'].item_price:params.p_t_u; 
            extra_items.push({'item_name':'Truss Upgrade','item_quantity':1,'item_price':(params.p_t_u!=0)?(params.p_t_u):0});
            t_c = t_c + extPrice;
        }if(params.p_b_p==true)
        {
            var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_length_changed!=true))?const_var.UpdatedPriceData['elements']['Bracing Price'].item_price:(data.braces[0].cost); 
            extra_items.push({'item_name':'Bracing Price','item_quantity':(params.p_b_p==true)?1:0,'item_price':extPrice});
            t_c = t_c + extPrice;
        }if(params.p_b_p_feet!="Select")
        {
            var extPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && (const_var.UpdatedPriceData.common_length_changed!=true))?const_var.UpdatedPriceData['elements']['Addition Bracing Price'].item_price:(params.p_b_p_feet * params.p_b_p_feetVal); 
            extra_items.push({'item_name':'Addition Bracing Price','item_quantity':params.p_b_p_feetVal,'item_price':extPrice});
            t_c = t_c + extPrice;
        }
        if(data.delux_two_tone.length>0 && Math.abs(data.delux_two_tone[0].cost)==0 && params.p_w_c_n==true)
        {
            // console.log(data,"delux_two_tone");
            
                var waniscotPrice = 0;
                // console.log(waniscotPrice,"delux_two_tone 000");
                var conditionPrice = "";
                var leanwaniscotPriceL = "";
                var leanwaniscotPriceF = "";
                var leanwaniscotPriceB = "";
                var leanwaniscotPriceR = "";
                let sideWall = 2;
                let endWall = 2;

                let utilityleanwaniscotPriceL,utilityleanwaniscotPriceR,utilityleanwaniscotPriceF,utilityleanwaniscotPriceB = 0;
                
                if(params.add_right_lean==true && const_var.leanGetDataRight!="")
                {
                    leanwaniscotPriceR = const_var.leanGetDataRight.delux_two_tone[0];
                    if (params.add_storage_check_right) {
                        utilityleanwaniscotPriceR = (const_var.leanGetDataRight.utility_delux_two_tone!=undefined)?const_var.leanGetDataRight.utility_delux_two_tone[0]:const_var.leanGetDataRight.delux_two_tone[0];
                    }
                    
                }if(params.add_left_lean==true && const_var.leanGetDataLeft!="")
                {
                    leanwaniscotPriceL = const_var.leanGetDataLeft.delux_two_tone[0];
                    if (params.add_storage_check) {
                        utilityleanwaniscotPriceL = (const_var.leanGetDataLeft.utility_delux_two_tone!=undefined)?const_var.leanGetDataLeft.utility_delux_two_tone[0]:const_var.leanGetDataLeft.delux_two_tone;
                    }
                }
                if(params.add_front_lean==true && const_var.leanGetDataFront!="")
                {
                    leanwaniscotPriceF = const_var.leanGetDataFront.delux_two_tone[0];
                    if (params.add_storage_check_front) {
                        utilityleanwaniscotPriceF = (const_var.leanGetDataFront.utility_delux_two_tone)?const_var.leanGetDataFront.utility_delux_two_tone[0]:const_var.leanGetDataFront.delux_two_tone[0];
                    }
                }
                if(params.add_back_lean==true && const_var.leanGetDataBack!="")
                {
                    leanwaniscotPriceB = const_var.leanGetDataBack.delux_two_tone[0];
                    if (params.add_storage_check_back) {
                        utilityleanwaniscotPriceB = (const_var.leanGetDataBack.utility_delux_two_tone!=undefined)?const_var.leanGetDataBack.utility_delux_two_tone[0]:const_var.leanGetDataBack.delux_two_tone[0];
                    }
                }
                if(data.delux_two_tone.length > 0)
                {
                    conditionPrice = data.delux_two_tone[0];
                }else{
                    conditionPrice = data.delux_two_tone[0];
                }
                let utilityConditionPrice = 0,frontUtlityData =[];
                if(params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true)
                {
                    utilityConditionPrice = (data.utility_delux_two_tone!=undefined && data.utility_delux_two_tone.length>0)?data.utility_delux_two_tone[0]:data.delux_two_tone[0];
                }
                if (params.cB_addStorage_check_front){
                    frontUtlityData = (data.front_utility_delux_two_tone!=undefined && data.front_utility_delux_two_tone.length>0)?data.front_utility_delux_two_tone[0]:data.delux_two_tone[0];
                }
                if(params.add_left_lean==true)
                {
                    if(params.p_b_c_b_l_f =="Close" && params.p_w_c_n == true)
                    {
                        waniscotPrice = ((params.p_v_w==true))?waniscotPrice +Math.abs(leanwaniscotPriceL.on_end_vertical):waniscotPrice +Math.abs(leanwaniscotPriceL.on_end_horizontal);
                    }
                    if(params.p_b_c_b_l_b =="Close" && params.p_w_c_n == true && params.add_storage_check==false)
                    {
                        waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceL.on_end_vertical):waniscotPrice + Math.abs(leanwaniscotPriceL.on_end_horizontal);
                    }
                    if(params.p_b_c_b_l =="Close" && params.p_w_c_n == true)
                    {
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceL.on_side_vertical):waniscotPrice + Math.abs(leanwaniscotPriceL.on_side_horizontal);
                    }
                    if(utilityleanwaniscotPriceL!=undefined && params.add_storage_check ==true && params.p_w_c_n == true && params.p_b_c_b_l !="Close")
                    {
                        //console.log(utilityleanwaniscotPriceL,"utilityleanwaniscotPriceL")
                     waniscotPrice = ((params.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceL.on_side_vertical))+Math.abs((utilityleanwaniscotPriceL.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceL.on_side_horizontal))+Math.abs((utilityleanwaniscotPriceL.on_end_horizontal *2)));
                    }if(utilityleanwaniscotPriceL!=undefined && params.add_storage_check ==true && params.p_w_c_n == true && params.p_b_c_b_l =="Close")
                    {
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceL.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceL.on_end_horizontal *2)));
                    }
                    
                }if(params.add_front_lean==true)
                {
                    if(params.p_b_c_b_f_f =="Close" && params.p_w_c_n == true)
                    {
                        waniscotPrice = ((params.p_v_w==true))?waniscotPrice +Math.abs(leanwaniscotPriceF.on_end_vertical):waniscotPrice +Math.abs(leanwaniscotPriceF.on_end_horizontal);
                    }
                    if(params.p_b_c_b_f_b =="Close" && params.p_w_c_n == true && params.add_storage_check_front==false)
                    {
                        waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceF.on_end_vertical):waniscotPrice + Math.abs(leanwaniscotPriceF.on_end_horizontal);
                    }
                    if(params.p_b_c_b_f_l =="Close" && params.p_w_c_n == true)
                    {
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceF.on_side_vertical):waniscotPrice + Math.abs(leanwaniscotPriceF.on_side_horizontal);
                    }
                    if(utilityleanwaniscotPriceF!=undefined && params.add_storage_check_front ==true && params.p_w_c_n == true && params.p_b_c_b_f_l!="Close")
                    {
                     waniscotPrice = ((params.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceF.on_side_vertical))+Math.abs((utilityleanwaniscotPriceF.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceF.on_side_horizontal))+Math.abs((utilityleanwaniscotPriceF.on_end_horizontal *2)));
                    }if(utilityleanwaniscotPriceF!=undefined && params.add_storage_check_front ==true && params.p_w_c_n == true && params.p_b_c_b_f_l =="Close")
                    {
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceF.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceF.on_end_horizontal *2)));
                    }
                    
                }if(params.add_back_lean==true)
                {
                    if(params.p_b_c_b_b_f =="Close" && params.p_w_c_n == true)
                    {
                        waniscotPrice = ((params.p_v_w==true))?waniscotPrice +Math.abs(leanwaniscotPriceB.on_end_vertical):waniscotPrice +Math.abs(leanwaniscotPriceB.on_end_horizontal);
                    }
                    if(params.p_b_c_b_b_b =="Close" && params.p_w_c_n == true && params.add_storage_check_back==false)
                    {
                        waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceB.on_end_vertical):waniscotPrice + Math.abs(leanwaniscotPriceB.on_end_horizontal);
                    }
                    if(params.p_b_c_b_b_l =="Close" && params.p_w_c_n == true)
                    {
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceB.on_side_vertical):waniscotPrice + Math.abs(leanwaniscotPriceB.on_side_horizontal);
                    }
                    if(utilityleanwaniscotPriceB!=undefined && params.add_storage_check_back ==true && params.p_w_c_n == true && params.p_b_c_b_b_l !="Close") 
                    {
                     waniscotPrice = ((params.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceB.on_side_vertical))+Math.abs((utilityleanwaniscotPriceB.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceB.on_side_horizontal))+Math.abs((utilityleanwaniscotPriceB.on_end_horizontal *2)));
                    }if(utilityleanwaniscotPriceB!=undefined && params.add_storage_check_back ==true && params.p_w_c_n == true && params.p_b_c_b_b_l =="Close")
                    {
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceB.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceB.on_end_horizontal *2)));
                    }
                    
                }if(params.add_right_lean==true)
                {
                    if(params.p_b_c_b_r_f =="Close" && params.p_w_c_n == true)
                    {
                        waniscotPrice = ((params.p_v_w==true))?waniscotPrice +Math.abs(leanwaniscotPriceR.on_end_vertical):waniscotPrice +Math.abs(leanwaniscotPriceR.on_end_horizontal);
                    }
                    if(params.p_b_c_b_r_b =="Close" && params.p_w_c_n == true && params.add_storage_check_right==false)
                    {
                        waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceR.on_end_vertical):waniscotPrice + Math.abs(leanwaniscotPriceR.on_end_horizontal);
                    }
                    if(params.p_b_c_b_r =="Close" && params.p_w_c_n == true)
                    {
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(leanwaniscotPriceR.on_side_vertical):waniscotPrice + Math.abs(leanwaniscotPriceR.on_side_horizontal);
                    }
                    if(utilityleanwaniscotPriceR!=undefined && params.add_storage_check_right ==true && params.p_w_c_n == true && params.p_b_c_b_r !="Close")
                    {
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceR.on_side_vertical))+Math.abs((utilityleanwaniscotPriceR.on_end_vertical*2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceR.on_side_horizontal))+Math.abs((utilityleanwaniscotPriceR.on_end_horizontal *2)));
                    }
                    if(utilityleanwaniscotPriceR!=undefined && params.add_storage_check_right ==true && params.p_w_c_n == true && params.p_b_c_b_r =="Close")
                    {
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + (Math.abs((utilityleanwaniscotPriceR.on_end_vertical *2))):waniscotPrice + (Math.abs((utilityleanwaniscotPriceR.on_end_horizontal *2)));
                    }
                }
                    if(data.delux_two_tone.length > 0)
                    {
                        conditionPrice = data.delux_two_tone[0];
                    }else{
                        conditionPrice = data.delux_two_tone[0];
                    }
                    if(params.p_b_w =="Close" && params.p_w_c_n == true && params.p_u_c==false)
                    {
                      endWall = 1;  
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(conditionPrice.on_end_vertical):waniscotPrice + Math.abs(conditionPrice.on_end_horizontal);
                    }
                    if(params.p_f_w =="Close" && params.p_w_c_n == true && !params.cB_addStorage_check_front)
                    {
                        endWall = 1;
                        waniscotPrice =  ((params.p_v_w==true))?waniscotPrice + Math.abs(conditionPrice.on_end_vertical):waniscotPrice + Math.abs(conditionPrice.on_end_horizontal);
                    }
                    if(params.p_f_w=="Close" && params.p_u_c==true && !params.cB_addStorage_check_front)
                    {
                        endWall = 2;
                    }
                    if(params.p_f_w=="Close" && params.p_b_w=="Close" && params.p_u_c!=true)
                    {
                        endWall = 0;
                    }
                    

                    if(params.p_r_w =="Close" && params.p_w_c_n == true && params.cB_addStorage_check_right==false)
                    {
                      sideWall = 1;  
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(conditionPrice.on_side_vertical):waniscotPrice + Math.abs(conditionPrice.on_side_horizontal);
                    }
                    if(params.p_l_w =="Close" && params.p_w_c_n == true && params.cB_addStorage_check_left==false)
                    {
                      sideWall = 1;  
                      waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(conditionPrice.on_side_vertical):waniscotPrice + Math.abs(conditionPrice.on_side_horizontal);
                    }
                    if(params.p_l_w=="Close" && params.p_r_w=="Close" && (params.cB_addStorage_check_right!=true || params.cB_addStorage_check_left!=true))
                    {
                        sideWall = 0;
                    }
                    if(params.p_r_w=="Close" && params.cB_addStorage_check_left==true)
                    {
                        sideWall = 2;
                    }
                    if(params.p_l_w=="Close" && params.cB_addStorage_check_right==true)
                    {
                        sideWall = 2;
                    }
                    
                
                if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                {
                    if(sideWall!=0)
                    {
                        waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(utilityConditionPrice.on_side_vertical * sideWall):waniscotPrice + Math.abs(utilityConditionPrice.on_side_horizontal * sideWall);
                    }
                    if(endWall!=0)
                    {
                        waniscotPrice = ((params.p_v_w==true))?waniscotPrice + Math.abs(utilityConditionPrice.on_end_vertical * endWall):waniscotPrice + Math.abs(utilityConditionPrice.on_end_horizontal * endWall);
                    }
                }
                if (params.cB_addStorage_check_front){
                    waniscotPrice = (params.p_v_w==true) ? waniscotPrice + parseFloat(frontUtlityData.on_end_vertical * 2 ) + parseFloat(frontUtlityData.on_side_vertical*2) : waniscotPrice  + parseFloat(frontUtlityData.on_end_horizontal *2) + parseFloat(frontUtlityData.on_side_horizontal * 2);
                }
                post_data['building'].wainscot_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.wainscot_price_changed!=true)?const_var.UpdatedPriceData.wainscot_price:(waniscotPrice % 1 == 0) ? waniscotPrice : waniscotPrice.toFixed(2);
                t_c = parseFloat(t_c) + parseFloat(post_data['building'].wainscot_price);
        }else{
            t_c = (params.p_w_c_n==true && (params.p_v_w==true ) && ((params.p_b_w=="Close" && params.p_l_w=="Close" && params.p_r_w=="Close" && params.p_f_w=="Close") || (params.p_u_c==true)))?(data.delux_two_tone.length>0 && data.delux_two_tone!=undefined)?parseFloat(t_c) + parseFloat(data.delux_two_tone[0].cost):parseFloat(t_c) +0:parseFloat(t_c) + 0;
            post_data['building'].wainscot_price = (params.p_w_c_n==true && (params.p_v_w==true ) && ((params.p_b_w=="Close" && params.p_l_w=="Close" && params.p_r_w=="Close" && params.p_f_w=="Close") || (params.p_u_c==true)))?(data.delux_two_tone.length>0 && data.delux_two_tone!=undefined)?(data.delux_two_tone[0].cost):0: 0;
        }
        if(params.p_w_c_n)
        {    
            
            post_data['building'].wainscot_type ="full-building";
            post_data['building'].wainscot_side = "both";
            post_data['building'].wainscot_end = "both";
            post_data['building'].wainscot = const_var.c_m_a_Colors[params.p_w_c_c_id];
            
        }
        if(const_var.showWallColorJSX==true)
        {
            post_data['building'].wall_color = const_var.c_m_a_Colors[params.p_w_c_id];
        }else{
            post_data['building'].wall_color = {};
        }
        post_data['building'].roof_color = const_var.c_m_a_Colors[params.p_r_c_id];
        post_data['building'].trim_color = const_var.c_m_a_Colors[params.p_t_c_id];
        post_data['building'].garageDoorColor = const_var.garageDoorColor[params.g_d_c_id];

        post_data['building'].roof_color_price = 0;
        post_data['building'].wall_color_price = 0;
        post_data['building'].trim_color_price = 0;
        post_data['building'].wainscot_color_price = 0;
        //post_data['building'].garageDoor_color_price = 0;
        //console.log(const_var.entry_points.length,"const_var.entry_points.length",componentVal);
        // console.log(componentVal,"componentValcomponentVal",componentIndex,const_var.entry_points[componentIndex])
        // if(componentVal==undefined)
        // {
        //     if(componentIndex!=undefined && const_var.entry_points[componentIndex]!=undefined)
        //     {
        //         t_c = parseFloat(t_c)+ parseFloat(calculateDoorComponentPrice(true,componentIndex));
        //     }else{
        //         if(isNaN(parseFloat(const_var.BuildingPriceArrar['Component_total']))==true)
        //         {
        //             const_var.BuildingPriceArrar['Component_total'] = 0;
        //         }
        //         t_c = (const_var.BuildingPriceArrar['Component_total']!=undefined)?parseFloat(t_c)+ parseFloat(const_var.BuildingPriceArrar['Component_total']):parseFloat(t_c) + 0;
        //     }
        // }else{
        //         if(isNaN(parseFloat(const_var.BuildingPriceArrar['Component_total']))==true)
        //         {
        //             const_var.BuildingPriceArrar['Component_total'] = 0;
        //         }
        //         t_c = (componentVal==true)? parseFloat(t_c) + parseFloat(const_var.BuildingPriceArrar['Component_total']) :parseFloat(t_c) + parseFloat(componentVal);
        // }
         if(const_var.entry_points.length>0)
        {
            let dataPriceC = 0;
            let dataPriceCoverHead = 0;
            const_var.entry_points.map((value,key)=>{
                dataPriceCoverHead = 0;
                dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_price);
                dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(value.entry_price);
                // console.log(t_c,"dataPriceC",dataPriceC)
                if(value.entry_header_seal==true)
                {
                    dataPriceC =  (value.entry_header_seal_price!=undefined)?parseFloat(dataPriceC) + parseFloat(value.entry_header_seal_price):parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = (value.entry_header_seal_price!=undefined)?parseFloat(dataPriceCoverHead) + parseFloat(value.entry_header_seal_price):parseFloat(dataPriceCoverHead) + parseFloat(0);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(0);
                }

                if(value.entry_trim_kit==true)
                {
                    dataPriceC =  (value.entry_trim_kit_price!=undefined)?parseFloat(dataPriceC) + parseFloat(value.entry_trim_kit_price):parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = (value.entry_trim_kit_price!=undefined)?parseFloat(dataPriceCoverHead) + parseFloat(value.entry_trim_kit_price):parseFloat(dataPriceCoverHead) + parseFloat(0);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(0);
                }

                if(value.entry_chain_hoist==true)
                {
                    dataPriceC =  (value.entry_chain_hoist_price!=undefined)?parseFloat(dataPriceC) + parseFloat(value.entry_chain_hoist_price):parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = (value.entry_chain_hoist_price!=undefined)?parseFloat(dataPriceCoverHead) + parseFloat(value.entry_chain_hoist_price):parseFloat(dataPriceCoverHead) + parseFloat(0);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(0);
                }                

                Object.keys(value).map((e) => {
                    if (e.includes("add_on_options") && !e.includes("_price")) {
                        if (value[e] === true) {

                                dataPriceC = (value[e + "_price"]!=undefined)?parseFloat(dataPriceC) + parseFloat(value[e + "_price"]):parseFloat(dataPriceC) + parseFloat(0);
                                dataPriceCoverHead = (value[e + "_price"]!=undefined && e != 'entry_frame_out_add_on_options')?parseFloat(dataPriceCoverHead) + parseFloat(value[e + "_price"]):parseFloat(dataPriceCoverHead) + parseFloat(0);
                        } else {
                            dataPriceC = parseFloat(dataPriceC) + parseFloat(0);
                            dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(0);
                        }
                    }
                })

                if (value.component_name.includes("overhead_door_door")) {
                    let doorname = value.component_name.replace(/\d/g, '').replace("overhead_door_door_", '');
                    if (value.entry_size.door_add_ons && value.entry_size.door_add_ons.length) {
                        let woption = value.entry_size.door_add_ons.find( e => e.door == "window_option");
                        let door = woption?.category?.find((e) => e.category.replace(' ', '_').toLowerCase() == doorname);
                        if (door) {
                            dataPriceC = parseFloat(dataPriceC) + parseFloat(door.cost);
                            dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(door.cost);
                        };
                    }

                }

                if (value.entry_motor == true) {
                    dataPriceC =  (value.entry_motor_price!=undefined)?parseFloat(dataPriceC) + parseFloat(value.entry_motor_price):parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = (value.entry_motor_price!=undefined)?parseFloat(dataPriceCoverHead) + parseFloat(value.entry_motor_price):parseFloat(dataPriceCoverHead) + parseFloat(0);        
                } else {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(0);
                }


                if(value.entry_automatic_openers==true)
                {
                    dataPriceC =  (value.entry_automatic_openers_price!=undefined)?parseFloat(dataPriceC) + parseFloat(value.entry_automatic_openers_price):parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = (value.entry_automatic_openers_price!=undefined)?parseFloat(dataPriceCoverHead) + parseFloat(value.entry_automatic_openers_price):parseFloat(dataPriceCoverHead) + parseFloat(0);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead =  parseFloat(dataPriceCoverHead) + parseFloat(0);
                }
                let currentObjData = '';
                if(const_var.newComponentArray[value.parent_array_key][value.child_array_key]!=undefined && const_var.newComponentArray[value.parent_array_key][value.child_array_key][value.nested_array_key]!=undefined )
                {
                    currentObjData = (const_var.newComponentArray[value.parent_array_key][value.child_array_key][value.nested_array_key]["Size"][value.name]!=undefined)?const_var.newComponentArray[value.parent_array_key][value.child_array_key][value.nested_array_key]["Size"][value.name]:'';
                }
                if(value.installation_is_end_wall!= undefined && currentObjData!='')
                {
                    if(currentObjData!=undefined && currentObjData.installation_is_end_wall==undefined)
                    {
                        delete value.installation_is_end_wall;
                        delete value.installation_end_wall_fee;
                    }
                }
                if(value.installation_is_side_wall!= undefined && currentObjData!='')
                {
                    if(currentObjData!=undefined && currentObjData.installation_is_side_wall==undefined)
                    {
                        delete value.installation_is_side_wall;
                        delete value.installation_side_wall_fee;
                    }
                }
                if(value.installation_is_end_wall!= undefined && value.installation_is_end_wall=="yes")
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.installation_end_wall_fee);
                    dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(value.installation_end_wall_fee);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(0);
                }

                if(value.installation_is_side_wall!= undefined && value.installation_is_side_wall=="yes")
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.installation_side_wall_fee);
                    dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(value.installation_side_wall_fee);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                    dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat(0);
                }
                dataPriceC =  parseFloat(dataPriceC) + parseFloat((value.entry_garageDoor_color_price==undefined)?0:Number(value.entry_garageDoor_color_price));
                dataPriceCoverHead = parseFloat(dataPriceCoverHead) + parseFloat((value.entry_garageDoor_color_price==undefined)?0:Number(value.entry_garageDoor_color_price));
                const_var.entry_points[key].overheadDoorSum = parseFloat(dataPriceCoverHead);
                
            })
            t_c = parseFloat(t_c) + parseFloat(dataPriceC);
        }else{
            t_c = parseFloat(t_c) + parseFloat(0);
        }
        
        if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].length>0)
        {
            let AddPriceCalculation = false;
            for(var i=0;i<const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].length;i++)
            {
                if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category!=undefined || const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category!=null)
                {      
                    if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component=="garage_doors")
                    {
                        if(const_var.entry_points.length>0)
                            {
                                const sumOfEvens = const_var.entry_points.reduce((accumulator, currentValue) => {
                                  if (currentValue.overheadDoorSum!=undefined && currentValue.child_array_key === const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category) {
                                    if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].sub_category == null || (const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].sub_category != null && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].sub_category.length > 0 && currentValue.nested_array_key != undefined && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].sub_category.indexOf(currentValue.nested_array_key) != -1)){
                                        
                                        return parseFloat(accumulator) + parseFloat(currentValue.overheadDoorSum || 0) ;
                                    }
                                    else{
                                        return parseFloat(accumulator);
                                    }
                                  } else {
                                    return parseFloat(accumulator);
                                  }
                                }, 0);
                                if(sumOfEvens!=0)
                                {   
                                    if(sumOfEvens>= parseInt(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].from) && sumOfEvens <=parseInt(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].to) )
                                    {
                                        if(AddPriceCalculation==false)
                                        {
                                            const_var.UpdatedPriceData.custom_overhead_down_payment_rate = undefined;
                                            t_c = parseFloat(t_c) - parseFloat(sumOfEvens);
                                            AddPriceCalculation = true;
                                        }
                                    }else{
                                        const_var.UpdatedPriceData.custom_overhead_down_payment_rate = undefined;
                                    }
                                }
                            }
                        
                    }
                }
            }
        }
        t_c = (params.p_t_u!=0)?parseFloat(t_c) + Number(params.p_t_u):parseFloat(t_c) + parseFloat(0);
        
        let calCulatePriceByDis = "";
        
         post_data['building'].leanto = const_var.leanto;
        var leantoPriceCalculation = {};
        let leanCertPrice = 0;
        let leanToTotalInsultaionPrice = 0
        let WrapLength_for_liniear_feet_left = 0;
        let WrapLength_for_liniear_feet_right = 0;
        let WrapLength_for_liniear_feet_front = 0;
        let WrapLength_for_liniear_feet_back = 0;
        if(post_data['building'].leanto.length>0)
        {
            for(var i=0;i<=post_data['building'].leanto.length-1;i++)
            {
                let porchLength = 0;
                post_data['building'].leanto[i].porch = undefined;
                if(post_data['building'].leanto[i].leanto_type==1)
                {
                  post_data['building'].leanto[i].alignment = const_var.TypeAlingnment[params.leantoAlignmentLeft];
                  post_data['building'].leanto[i].total_length = params.lean_p_d;  
                  const_var.lengthData.leftLean.porchLength = 0;
                  if(params.add_left_back_lean_porch==true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'left','length':params.lean_p_d+params.leanB_p_w,'cost':parseInt(post_data['building'].connection_fee_left_back),'wrap_with':['back']}
                      post_data['building'].leanto[i].total_length = params.lean_p_d+params.leanB_p_w;
                      const_var.lengthData.leftLean.porchLength = params.leanB_p_w;
                  }if(params.add_left_front_lean_porch==true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'left','length':params.lean_p_d+params.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_left_front),'wrap_with':['front']}
                      post_data['building'].leanto[i].total_length = params.lean_p_d+params.leanF_p_w;
                      const_var.lengthData.leftLean.porchLength = params.leanF_p_w;
                  }if(params.add_left_back_lean_porch==true && params.add_left_front_lean_porch==true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'left','length':params.lean_p_d+params.leanB_p_w+params.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_left_front)+parseInt(post_data['building'].connection_fee_left_back),'wrap_with':['front','back']}
                      post_data['building'].leanto[i].total_length = params.lean_p_d+params.leanF_p_w+params.leanB_p_w;  
                      const_var.lengthData.leftLean.porchLength = params.leanF_p_w+params.leanB_p_w;  
                  }
                  if(params.p_e_i!='other' && params.p_e_i!="Select" && params.p_e_i!="")
                  {
                      if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0 && post_data['building'].leanto[i].certificate.name == const_var.c_f_aCer[params.p_e_i].name)
                      {
                            leanCertPrice = parseFloat(leanCertPrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                      }
                  }
                }if(post_data['building'].leanto[i].leanto_type==2)
                {
                  post_data['building'].leanto[i].alignment = const_var.TypeAlingnment[params.leantoAlignmentRight];
                  post_data['building'].leanto[i].total_length = params.leanR_p_d;  
                  const_var.lengthData.rightLean.porchLength = 0;
                  if(params.add_right_back_lean_porch==true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'right','length':params.leanR_p_d+params.leanB_p_w,'cost':parseInt(post_data['building'].connection_fee_right_back),'wrap_with':['back']}
                      post_data['building'].leanto[i].total_length = params.leanR_p_d+params.leanB_p_w;        
                      const_var.lengthData.rightLean.porchLength = params.leanB_p_w;
                  }if(params.add_right_front_lean_porch==true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'right','length':params.leanR_p_d+params.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_right_front),'wrap_with':['front']}
                      post_data['building'].leanto[i].total_length = params.leanR_p_d+params.leanF_p_w;   
                      const_var.lengthData.rightLean.porchLength = params.leanF_p_w;
                  }if(params.add_right_back_lean_porch==true && params.add_right_front_lean_porch==true)
                  {
                      post_data['building'].leanto[i].porch = {'type':'right','length':params.leanR_p_d+params.leanB_p_w+params.leanF_p_w,'cost':parseInt(post_data['building'].connection_fee_right_front)+parseInt(post_data['building'].connection_fee_right_back),'wrap_with':['front','back']}
                      post_data['building'].leanto[i].total_length = params.leanR_p_d+params.leanF_p_w+params.leanB_p_w;  
                      const_var.lengthData.rightLean.porchLength = params.leanF_p_w+params.leanB_p_w;
                  }
                  if(params.p_e_i!='other' && params.p_e_i!="Select" && params.p_e_i!="")
                  {
                      if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0 && post_data['building'].leanto[i].certificate.name == const_var.c_f_aCer[params.p_e_i].name)
                      {
                            leanCertPrice = parseFloat(leanCertPrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                      }
                  }
                }
                if(post_data['building'].leanto[i].leanto_type==3)
                {
                  post_data['building'].leanto[i].alignment = const_var.endLeanAlingnmentType[params.leantoAlignmentFront];
                  post_data['building'].leanto[i].total_length = post_data['building'].leanto[i].length;   
                  if(post_data['building'].leanto[i].porch!=undefined)
                  {
                    if(params.add_left_front_lean_porch==true)
                    {
                       post_data['building'].leanto[i].porch.wrap_with = ['left'];
                    }
                    if(params.add_right_front_lean_porch==true)
                    {
                        post_data['building'].leanto[i].porch.wrap_with = ['right'];
                    }
                    if(params.add_left_front_lean_porch==true && params.add_right_front_lean_porch==true)
                    {
                       post_data['building'].leanto[i].porch.wrap_with = ['left','right'];
                    }
                  }
                  if(params.p_e_i!='other' && params.p_e_i!="Select" && params.p_e_i!="")
                  {
                      if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0 && post_data['building'].leanto[i].certificate.name == const_var.c_f_aCer[params.p_e_i].name)
                      {
                            leanCertPrice = parseFloat(leanCertPrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                      }
                  }
                }if(post_data['building'].leanto[i].leanto_type==4)
                {
                  post_data['building'].leanto[i].alignment = const_var.endLeanAlingnmentType[params.leantoAlignmentBack];
                  post_data['building'].leanto[i].total_length = post_data['building'].leanto[i].length;    
                  if(post_data['building'].leanto[i].porch!=undefined)
                  {
                    if(params.add_left_back_lean_porch==true)
                    {
                       post_data['building'].leanto[i].porch.wrap_with = ['left'];
                    }
                    if(params.add_right_back_lean_porch==true)
                    {
                        post_data['building'].leanto[i].porch.wrap_with = ['right'];
                    }
                    if(params.add_left_back_lean_porch==true && params.add_right_back_lean_porch==true)
                    {
                       post_data['building'].leanto[i].porch.wrap_with = ['left','right'];
                    }
                  }
                  if(params.p_e_i!='other' && params.p_e_i!="Select" && params.p_e_i!="")
                  {
                      if(post_data['building'].leanto[i].certificate_price!=undefined && post_data['building'].leanto[i].certificate_price!=0 && post_data['building'].leanto[i].certificate.name == const_var.c_f_aCer[params.p_e_i].name)
                      {
                            leanCertPrice = parseFloat(leanCertPrice) + parseFloat(post_data['building'].leanto[i].certificate_price);
                      }
                  }
                }

                /*Code For Fetch Lenght and Width For Wrap Buildings*/

                if(post_data['building'].leanto[i].leanto_type == 1)
                {
                    WrapLength_for_liniear_feet_left = (post_data['building'].leanto[i].porch!=undefined)?parseFloat(WrapLength_for_liniear_feet_left) + parseFloat(post_data['building'].leanto[i].porch.length):parseFloat(WrapLength_for_liniear_feet_left);
                }
                if(post_data['building'].leanto[i].leanto_type == 2)
                {
                    WrapLength_for_liniear_feet_right = (post_data['building'].leanto[i].porch!=undefined)?parseFloat(WrapLength_for_liniear_feet_right) + parseFloat(post_data['building'].leanto[i].porch.length):parseFloat(WrapLength_for_liniear_feet_right);
                }
                if(post_data['building'].leanto[i].leanto_type == 3)
                {
                    WrapLength_for_liniear_feet_front = (post_data['building'].leanto[i].wrappedLength!=undefined)?parseFloat(WrapLength_for_liniear_feet_front) + parseFloat(post_data['building'].leanto[i].wrappedLength):parseFloat(WrapLength_for_liniear_feet_front);
                }
                if(post_data['building'].leanto[i].leanto_type == 4)
                {
                    WrapLength_for_liniear_feet_back = (post_data['building'].leanto[i].wrappedLength!=undefined)?parseFloat(WrapLength_for_liniear_feet_back) + parseFloat(post_data['building'].leanto[i].wrappedLength):parseFloat(WrapLength_for_liniear_feet_back);
                }
                /*End Code*/

                if(post_data['building'].leanto[i].leanto_type!=2 && post_data['building'].leanto[i].leanto_type!=1)
                {
                  if(post_data['building'].leanto[i].porch!=undefined)
                  {
                    post_data['building'].leanto[i].porch.cost = 0;
                  }
                }

                leantoPriceCalculation.totalLeanPrice =(leantoPriceCalculation.totalLeanPrice == undefined)? parseFloat(post_data['building'].leanto[i].t_c_b) :parseFloat(leantoPriceCalculation.totalLeanPrice)+parseFloat(post_data['building'].leanto[i].t_c_b);
                leantoPriceCalculation.totalBasePrice = (leantoPriceCalculation.totalBasePrice == undefined)? parseFloat(post_data['building'].leanto[i].basic_price) :parseFloat(leantoPriceCalculation.totalBasePrice)+parseFloat(post_data['building'].leanto[i].basic_price);
                leantoPriceCalculation.totalWallPrice = (leantoPriceCalculation.totalWallPrice == undefined)? parseFloat(post_data['building'].leanto[i].front_wall_price)+parseFloat(post_data['building'].leanto[i].back_wall_price)+parseFloat(post_data['building'].leanto[i].side_wall_price) :parseFloat(leantoPriceCalculation.totalWallPrice)+parseFloat(post_data['building'].leanto[i].front_wall_price)+parseFloat(post_data['building'].leanto[i].back_wall_price)+parseFloat(post_data['building'].leanto[i].side_wall_price);
                // console.log(post_data['building'].leanto[i].pricing_data,"post_data['building'].leanto[i].pricing_data")
                // leantoPriceCalculation.totalAdditionalFeaturePrice = (post_data['building'].leanto[i].pricing_data.additional_features!=undefined )?post_data['building'].leanto[i].pricing_data.additional_features:[];

                // calculate total side wall price and total end wall price individually 
                leantoPriceCalculation.totalSideWallPrice = leantoPriceCalculation.totalSideWallPrice == undefined ? parseFloat(post_data['building'].leanto[i].side_wall_price) : parseFloat(leantoPriceCalculation.totalSideWallPrice) + parseFloat(post_data['building'].leanto[i].side_wall_price)
                leantoPriceCalculation.totalEndWallPrice = leantoPriceCalculation.totalEndWallPrice == undefined ? parseFloat(post_data['building'].leanto[i].front_wall_price) + parseFloat(post_data['building'].leanto[i].back_wall_price) : parseFloat(leantoPriceCalculation.totalEndWallPrice) + parseFloat(post_data['building'].leanto[i].front_wall_price) + parseFloat(post_data['building'].leanto[i].back_wall_price)

                
                if(post_data['building'].leanto[i].utility_price!=undefined && post_data['building'].leanto[i].utility_price!=0)
                {
                    leantoPriceCalculation.totalWallPrice =  parseFloat(leantoPriceCalculation.totalWallPrice) + parseFloat(post_data['building'].leanto[i].utility_price);
                }
              leantoPriceCalculation.totalHeightPrice = (leantoPriceCalculation.totalHeightPrice == undefined) ? parseFloat(post_data['building'].leanto[i].height_price):parseFloat(leantoPriceCalculation.totalHeightPrice) + parseFloat(post_data['building'].leanto[i].height_price);
              leantoPriceCalculation.totalDimension = (leantoPriceCalculation.totalDimension!=undefined)?parseFloat(leantoPriceCalculation.totalDimension) + parseFloat(post_data['building'].leanto[i].width * post_data['building'].leanto[i].total_length): parseFloat(post_data['building'].leanto[i].width * post_data['building'].leanto[i].total_length);


              // calcuate total insulation price for lean to
              if(post_data['building'].leanto[i].insulation_price != undefined){
                  leanToTotalInsultaionPrice = parseFloat(leanToTotalInsultaionPrice) + parseFloat(post_data['building'].leanto[i].insulation_price);
              }
            //   console.log(const_var.post_data['building'].leanto[i],"const_var.post_data['building'].leanto[i]",const_var.TypeAlingnment,params.leantoAlignmentLeft );
                // if(const_var.post_data['building'].leanto[i].leanto_type==1)
                // {
                //     console.log(post_data['building'].leanto[i].leanto_type ,"leanto_type 22");
                //     const_var.post_data['building'].leanto[i].alignment = const_var.TypeAlingnment[params.leantoAlignmentLeft];
                // }
                // if(const_var.post_data['building'].leanto[i].leanto_type==2)
                // {
                //     const_var.post_data['building'].leanto[i].alignment = const_var.TypeAlingnment[params.leantoAlignmentRight];
                // }
                // if(const_var.post_data['building'].leanto[i].leanto_type==3)
                // {
                //     const_var.post_data['building'].leanto[i].alignment = const_var.endLeanAlingnmentType[params.leantoAlignmentFront];
                // }
                // if(const_var.post_data['building'].leanto[i].leanto_type==4)
                // {
                //     const_var.post_data['building'].leanto[i].alignment = const_var.endLeanAlingnmentType[params.leantoAlignmentBack];
                // }
                    
            
            }
            if(isNaN(parseFloat(leantoPriceCalculation.totalBasePrice))==true)
            {
                leantoPriceCalculation.totalBasePrice = 0;
            }
            
            
        }else
        {
            leantoPriceCalculation.totalLeanPrice = 0;
            leantoPriceCalculation.totalBasePrice = 0;
            leantoPriceCalculation.totalWallPrice = 0;
            leantoPriceCalculation.totalHeightPrice = 0;
            leantoPriceCalculation.totalDimension = 0;
            leantoPriceCalculation.totalEndWallPrice = 0;
            leantoPriceCalculation.totalSideWallPrice = 0;
        }

        // to calculate extra item cost when cost type is %/sqft when lean to is active
        if(const_var.a_p_d_a != undefined && const_var.a_p_d_a.length > 0 && const_var.ExtraItemsFeaturesArray!=undefined && const_var.ExtraItemsFeaturesArray.length>0)
        {
            let checkCenterCost = false;
            const_var.ExtraItemsFeaturesArray.map((val, index) => {
                if(val!=null && val.name == undefined && val.sheet_name != undefined){
                    val['name']= 'overhang' 
                    val['label']= val.sheet_name
                }
                if(val!=null && val.is_checked==true)
                {
                    // console.log(val.name,val.is_checked,"item.name == val.name")
                    let leantoExtraItemCheckBoxCost = 0;

                    if(params.add_left_lean ==true && const_var.leanGetDataLeft){
                        if(const_var.leanGetDataLeft.overhang != undefined && const_var.leanGetDataLeft.overhang.end != undefined && const_var.leanGetDataLeft.overhang.end.length > 0){
                            let sel = const_var.leanGetDataLeft.overhang.end.filter(obj => obj.sheet_name == const_var.isOverhang.end.selected);
                            // let selCost = sel.length != 0 ? sel[0].cost :0;
                            let selCost = sel.length != 0 ? calcPriceWithCostType(sel[0], leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(const_var.leanGetDataLeft.overhang != undefined && const_var.leanGetDataLeft.overhang.side != undefined && const_var.leanGetDataLeft.overhang.side.length > 0){
                            let sel = const_var.leanGetDataLeft.overhang.side.filter(obj => obj.sheet_name == const_var.isOverhang.side.selected);
                            // let selCost = sel.length != 0 ? sel[0].cost :0;
                            let selCost = sel.length != 0 ? calcPriceWithCostType(sel[0], leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(const_var.leanGetDataLeft.overhang != undefined && const_var.leanGetDataLeft.overhang.both != undefined && const_var.leanGetDataLeft.overhang.both != null && const_var.leanGetDataLeft.overhang.both != ''){
                            // let selCost = const_var.leanGetDataLeft.overhang.both.cost != undefined ? const_var.leanGetDataLeft.overhang.both.cost :0;
                            let selCost = const_var.leanGetDataLeft.overhang.both.cost != undefined ? calcPriceWithCostType(const_var.leanGetDataLeft.overhang.both, leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }

                    }
                    // console.log(leantoExtraItemCheckBoxCost,"leantoExtraItemCheckBoxCost111")   
                    if(params.add_front_lean ==true && const_var.leanGetDataFront){
                        if(const_var.leanGetDataFront.overhang != undefined && const_var.leanGetDataFront.overhang.end != undefined && const_var.leanGetDataFront.overhang.end.length > 0){
                            let sel = const_var.leanGetDataFront.overhang.end.filter(obj => obj.sheet_name == const_var.isOverhang.end.selected);
                            // let selCost = sel.length != 0 ? sel[0].cost :0;
                            let selCost = sel.length != 0 ? calcPriceWithCostType(sel[0], leantoPriceCalculation)  :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(const_var.leanGetDataFront.overhang != undefined && const_var.leanGetDataFront.overhang.side != undefined && const_var.leanGetDataFront.overhang.side.length > 0){
                            let sel = const_var.leanGetDataFront.overhang.side.filter(obj => obj.sheet_name == const_var.isOverhang.side.selected);
                            // let selCost = sel.length != 0 ? sel[0].cost :0;
                            let selCost = sel.length != 0 ? calcPriceWithCostType(sel[0], leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(const_var.leanGetDataFront.overhang != undefined && const_var.leanGetDataFront.overhang.both != undefined && const_var.leanGetDataFront.overhang.both != null && const_var.leanGetDataFront.overhang.both != ''){
                            // let selCost = const_var.leanGetDataFront.overhang.both.cost != undefined ? const_var.leanGetDataFront.overhang.both.cost :0;
                            let selCost = const_var.leanGetDataFront.overhang.both.cost != undefined ? calcPriceWithCostType(const_var.leanGetDataFront.overhang.both, leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                    }
                    if(params.add_back_lean ==true && const_var.leanGetDataBack){
                        if(const_var.leanGetDataBack.overhang != undefined && const_var.leanGetDataBack.overhang.end != undefined && const_var.leanGetDataBack.overhang.end.length > 0){
                            let sel = const_var.leanGetDataBack.overhang.end.filter(obj => obj.sheet_name == const_var.isOverhang.end.selected);
                            // let selCost = sel.length != 0 ? sel[0].cost :0;
                            let selCost = sel.length != 0 ? calcPriceWithCostType(sel[0], leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(const_var.leanGetDataBack.overhang != undefined && const_var.leanGetDataBack.overhang.side != undefined && const_var.leanGetDataBack.overhang.side.length > 0){
                            let sel = const_var.leanGetDataBack.overhang.side.filter(obj => obj.sheet_name == const_var.isOverhang.side.selected);
                            // let selCost = sel.length != 0 ? sel[0].cost :0;
                            let selCost = sel.length != 0 ? calcPriceWithCostType(sel[0], leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(const_var.leanGetDataBack.overhang != undefined && const_var.leanGetDataBack.overhang.both != undefined && const_var.leanGetDataBack.overhang.both != null && const_var.leanGetDataBack.overhang.both != ''){
                            // let selCost = const_var.leanGetDataBack.overhang.both.cost != undefined ? const_var.leanGetDataBack.overhang.both.cost :0;
                            let selCost = const_var.leanGetDataBack.overhang.both.cost != undefined ? calcPriceWithCostType(const_var.leanGetDataBack.overhang.both, leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                    }
                    if(params.add_right_lean ==true && const_var.leanGetDataRight){
                        if(const_var.leanGetDataRight.overhang != undefined && const_var.leanGetDataRight.overhang.end != undefined && const_var.leanGetDataRight.overhang.end.length > 0){
                            let sel = const_var.leanGetDataRight.overhang.end.filter(obj => obj.sheet_name == const_var.isOverhang.end.selected);
                            // let selCost = sel.length != 0 ? sel[0].cost :0;
                            let selCost = sel.length != 0 ? calcPriceWithCostType(sel[0], leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(const_var.leanGetDataRight.overhang != undefined && const_var.leanGetDataRight.overhang.side != undefined && const_var.leanGetDataRight.overhang.side.length > 0){
                            let sel = const_var.leanGetDataRight.overhang.side.filter(obj => obj.sheet_name == const_var.isOverhang.side.selected);
                            // let selCost = sel.length != 0 ? sel[0].cost :0;
                            let selCost = sel.length != 0 ? calcPriceWithCostType(sel[0], leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                        if(const_var.leanGetDataRight.overhang != undefined && const_var.leanGetDataRight.overhang.both != undefined && const_var.leanGetDataRight.overhang.both != null && const_var.leanGetDataRight.overhang.both != ''){
                            // let selCost = const_var.leanGetDataRight.overhang.both.cost != undefined ? const_var.leanGetDataRight.overhang.both.cost :0;
                            let selCost = const_var.leanGetDataRight.overhang.both.cost != undefined ? calcPriceWithCostType(const_var.leanGetDataRight.overhang.both, leantoPriceCalculation) :0;
                            leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + selCost;
                        }
                    }
                        if(val.name != 'fourth_center_cost' )
                        {
                            if(val.cost_type=="%"){
                                var splitVal = val.price_of != undefined && val.price_of.length > 0 ? val.price_of : 0;
                                var splval = 0;
                                if(splitVal!=0)
                                {
                                    if(splitVal.includes("full_building_price")!=false)
                                    {
                                        // if(chk_is_cumulative==0)
                                        // {
                                        //     splval = parseFloat(splval) + parseFloat(totalPriceWithoutAdditionalItem) + parseFloat(leanToPriceCalc.totalLeanPrice);
                                        // }else{
                                            splval = parseFloat(splval) + parseFloat(t_c) + parseFloat(leantoPriceCalculation.totalLeanPrice);
                                        // }
                                        //splval = parseFloat(splval) + parseFloat(t_c) + parseFloat(leanToPriceCalc.totalLeanPrice);
                                    }
                                    if(splitVal.includes("base_price")!=false)
                                    {
                                        splval = parseFloat(splval) + parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice);
                                    }
                                    if(splitVal.includes("wall_price")!=false)
                                    {
                                        if(val.label.toLowerCase().includes('end')){
                                            if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                            {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalEndWallPrice);
                                                // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                            }else
                                            {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalEndWallPrice);
                                                // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                            }
                                            if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                            }
                                        }
                                        else if(val.label.toLowerCase().includes('side')){
                                            if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                            {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leantoPriceCalculation.totalSideWallPrice)
                                                // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                            }else
                                            {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(leantoPriceCalculation.totalSideWallPrice)
                                                // + parseFloat(leantoPriceCalculation.totalWallPrice);
                                            }
                                            if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                            }
                                        }
                                        else{
                                            if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                            {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price)+ parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalWallPrice);
                                            }else
                                            {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].front_wall_price) +parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalWallPrice);
                                            }
                                            if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                                splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                            }
                                        }
                                    }
                                    if(splitVal.includes("height_price")!=false)
                                    {
                                      splval = parseFloat(splval) + parseFloat(post_data['building'].height_price) + parseFloat(leantoPriceCalculation.totalHeightPrice);
                                      
                                    }
                                    
                                }else
                                {
                                    splval = parseFloat(splval) + parseFloat(totalPriceWithoutAdditionalItem);
                                }
                                let finalCost  = (splval * val.cost) / 100;
                                let additionalFeatureCost =  (finalCost % 1 == 0) ? finalCost : finalCost.toFixed(2)
        
                                t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price):((parseFloat(t_c) + parseFloat(additionalFeatureCost) + parseFloat(leantoExtraItemCheckBoxCost)));
                                extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price:(parseFloat(additionalFeatureCost) + parseFloat(leantoExtraItemCheckBoxCost))});
                                
                            }
                            else if(val.cost_type=="sqft"){
                                let sideWallsCount = const_var.cbClosedSideWalls + const_var.flClosedSideWalls + const_var.llClosedSideWalls + const_var.rlClosedSideWalls + const_var.blClosedSideWalls;
                                let endWallsCount = const_var.cbClosedEndWalls + const_var.flClosedEndWalls + const_var.llClosedEndWalls + const_var.rlClosedEndWalls + const_var.blClosedEndWalls;
                                
                                let roofPrice =  0;
                                let sidePrice = 0;
                                let endPrice = 0;
                                let endCount = 0;
                                let sideCount = 0;
                                // console.log(const_var.wallsData,"const_var.wallsData")
                                if(Object.keys(const_var.wallsData['center']).length>0)
                                {
                                    sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['center'].closedSideWalls);
                                    endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['center'].closedEndWalls);
                                    roofPrice =  parseFloat(roofPrice) + parseFloat(((params.p_w+1) * (params.p_d) * (val.cost)));
                                    sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_d) * (params.p_h) * (val.cost )* sideCount)); 
                                    endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+1) * (params.p_w) *(val.cost)* endCount));
                                }if(Object.keys(const_var.wallsData['frontLean']).length>0 && params.add_front_lean==true)
                                {
                                    if(const_var.wallsData['frontLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['frontLean'].closedSideWalls);
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_d) * (params.leanF_p_h) * (val.cost )* sideCount)); 
                                    }
                                    if(const_var.wallsData['frontLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['frontLean'].closedEndWalls);
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.leanF_p_h+1) * (params.leanF_p_w) *(val.cost)* endCount));
                                    }
                                    
                                    roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanF_p_w+1) * (params.leanF_p_d) * (val.cost)));
                                    
                                }if(Object.keys(const_var.wallsData['backLean']).length>0 && params.add_back_lean==true)
                                {
                                    if(const_var.wallsData['backLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['backLean'].closedSideWalls);
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_d) * (params.leanB_p_h) * (val.cost )* sideCount)); 
                                    }
                                    if(const_var.wallsData['backLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['backLean'].closedEndWalls);
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.leanB_p_h+1) * (params.leanB_p_w) *(val.cost)* endCount));
                                    }
                                    roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanB_p_w+1) * (params.leanB_p_d) * (val.cost)));
                                }if(Object.keys(const_var.wallsData['leftLean']).length>0 && params.add_left_lean==true)
                                {
                                    if(const_var.wallsData['leftLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['leftLean'].closedSideWalls);
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.lean_p_d) * (params.lean_p_h) * (val.cost )* sideCount)); 
                                    }
                                    if(const_var.wallsData['leftLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['leftLean'].closedEndWalls);
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.lean_p_h+1) * (params.lean_p_w) *(val.cost)* endCount));
                                    }
                                    
                                    roofPrice = parseFloat(roofPrice) + parseFloat(((params.lean_p_w+1) * (params.lean_p_d) * (val.cost)));
                                    
                                }if(Object.keys(const_var.wallsData['rightLean']).length>0 && params.add_right_lean==true)
                                {
                                    if(const_var.wallsData['rightLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['rightLean'].closedSideWalls);
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanR_p_d) * (params.leanR_p_h) * (val.cost )* sideCount)); 
                                    }
                                    if(const_var.wallsData['rightLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['rightLean'].closedEndWalls);
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.leanR_p_h+1) * (params.leanR_p_w) *(val.cost)* endCount));
                                    }
                                    roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanR_p_w+1) * (params.leanR_p_d) * (val.cost)));
                                }
                                if(const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && (const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==undefined || const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==false))
                                {
                                    let FullCalculatedPrice = parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
                                    var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leantoPriceCalculation.totalDimension);
                                    t_c = parseFloat(t_c) + parseFloat(((FullCalculatedPrice)));


                                    extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':  parseFloat(FullCalculatedPrice)})
                                    
                                }else
                                {
                                    let FullCalculatedPrice = parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
                                    var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leantoPriceCalculation.totalDimension);

                                    t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price):((parseFloat(t_c) + parseFloat(FullCalculatedPrice) + parseFloat(leantoExtraItemCheckBoxCost)));
                                    extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price:(parseFloat(FullCalculatedPrice) + parseFloat(leantoExtraItemCheckBoxCost))});
                                }
                                
                            }
                            else{
                                t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price):((parseFloat(t_c) + parseFloat(val.cost) + parseFloat(leantoExtraItemCheckBoxCost)));
                                extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price:(parseFloat(val.cost) + parseFloat(leantoExtraItemCheckBoxCost))});
                            }
                        }
                    }

            });
            post_data['building'].ExtraItemsFeaturesArray = const_var.ExtraItemsFeaturesArray;
        }


        //console.log(leanCertPrice,"leanCertPrice",const_var.UpdatedPriceData.certificate_price_changed)
        var certVal = 1;
        if(params.p_e_i!="other" && params.p_e_i!="Select")
        {
            // console.log(const_var.UpdatedPriceData.certificate_price,"const_var.UpdatedPriceData.certificate_price")

            if(const_var.UpdatedPriceData.certificate_price==undefined)
            {
                const_var.UpdatedPriceData.certificate_price = 0;
            }
            if(const_var.c_f_a_per[params.p_e_i]!=0)
            {
                // console.log(const_var.c_f_aCer,"const_var.c_f_aCer")
                if(const_var.c_f_aCer[params.p_e_i]!=undefined && const_var.c_f_aCer[params.p_e_i].percentage_of!=undefined && const_var.c_f_aCer[params.p_e_i].percentage_of=="building_amount")
                {
                    
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?const_var.UpdatedPriceData.certificate_price:(const_var.c_f_a_per[params.p_e_i])?(parseFloat(t_c * const_var.c_f_a_per[params.p_e_i] / 100)+parseFloat(leanCertPrice)):0;
                    post_data['building'].certificate_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?const_var.UpdatedPriceData.certificate_price:(const_var.c_f_a_per[params.p_e_i])?convertToTwoDecimalNumber(parseFloat(t_c * const_var.c_f_a_per[params.p_e_i] / 100)+parseFloat(leanCertPrice)):0;;//(VUEData!='' && VUEData.certificate_price!=0)?VUEData.certificate_price:finalCertPrice;
                    t_c =  parseFloat(t_c) + parseFloat(finalCertPrice);//(const_var.c_f_a_per[params.p_e_i])?t_c + (t_c * const_var.c_f_a_per[params.p_e_i] / 100):t_c + 0;
                }else
                {
                    
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?const_var.UpdatedPriceData.certificate_price:(const_var.c_f_a_per[params.p_e_i])?(parseFloat(post_data['building'].roof_style_price * const_var.c_f_a_per[params.p_e_i] / 100)+parseFloat(leanCertPrice)):0;
                    post_data['building'].certificate_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?const_var.UpdatedPriceData.certificate_price:(const_var.c_f_a_per[params.p_e_i])?(parseFloat(post_data['building'].roof_style_price * const_var.c_f_a_per[params.p_e_i] / 100)+parseFloat(leanCertPrice)):0;;//(VUEData!='' && VUEData.certificate_price!=0)?VUEData.certificate_price:finalCertPrice;
                    t_c =  parseFloat(t_c) + parseFloat(finalCertPrice);//(const_var.c_f_a_per[params.p_e_i])?t_c + (t_c * const_var.c_f_a_per[params.p_e_i] / 100):t_c + 0;
                }
                
            }else
            {
                if(params.p_i_s==1 && const_var.c_f_i_a[params.p_e_i]!=0)
                {
                    
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?const_var.UpdatedPriceData.certificate_price:(const_var.c_f_i_a[params.p_e_i])?( parseFloat(const_var.c_f_i_a[params.p_e_i])+parseFloat(leanCertPrice)):0;//(const_var.c_f_a[params.p_e_i])?const_var.c_f_a[params.p_e_i]:0;
                    t_c =  parseFloat(t_c) + parseFloat(finalCertPrice);
                    post_data['building'].certificate_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?const_var.UpdatedPriceData.certificate_price:(const_var.c_f_i_a[params.p_e_i])?( parseFloat(const_var.c_f_i_a[params.p_e_i])+parseFloat(leanCertPrice)):0;//(VUEData!='' && VUEData.certificate_price!=0)?VUEData.certificate_price:finalCertPrice;
                }else
                {
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?const_var.UpdatedPriceData.certificate_price:(const_var.c_f_a[params.p_e_i]!=undefined)?( parseFloat(const_var.c_f_a[params.p_e_i])+parseFloat(leanCertPrice)):0;//(const_var.c_f_a[params.p_e_i])?const_var.c_f_a[params.p_e_i]:0;
                    t_c =  parseFloat(t_c) + parseFloat(finalCertPrice);
                    post_data['building'].certificate_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?const_var.UpdatedPriceData.certificate_price:(const_var.c_f_a[params.p_e_i]!=undefined)?( parseFloat(const_var.c_f_a[params.p_e_i])+parseFloat(leanCertPrice)):0;//(VUEData!='' && VUEData.certificate_price!=0)?VUEData.certificate_price:finalCertPrice;
                }
            }
            //post_data['building'].certificate_price = post_data['building'].certificate_price % 1 != 0 ? post_data['building'].certificate_price.toFixed(2):post_data['building'].certificate_price;
        }
        if(params.p_e_i=="other")
        {
            post_data['building'].certificate = {'gauge': 0,'certified': 1,'has_double_leg': 0,'has_ladder_leg': 0,'has_other_leg': 0,'height': 0,'id': -1,'cost':0,'is_default': "no",'length': 0,'map_id': 0,'name': "Other"};
            post_data['building'].certificate_name = (params.p_e_i_other!='')?params.p_e_i_other:'Other';
            var finalCertPrice  = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?const_var.UpdatedPriceData.certificate_price:0;
            t_c = parseFloat(t_c) + parseFloat(finalCertPrice);
            post_data['building'].certificate_price  = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?const_var.UpdatedPriceData.certificate_price:0;
        
        }
        if (params.p_e_i == "Select"){
            post_data['building'].certificate = "unCertified"
            post_data['building'].certificate_name = "unCertified"
            post_data['building'].certificate_price = 0
        }
        let totalPriceWithoutAdditionalItem = parseFloat(t_c);
        let chk_is_cumulative = 0;
        // console.log(post_data['building'].leanto,"const_var.leanto")

        // console.log(const_var.additionalFeaturesArray,"const_var.additionalFeaturesArray",const_var.wallsData)
        //  console.log(const_var.wallsData['center'],const_var.wallsData['backLean'],Object.keys(const_var.wallsData['backLean']).length,"const_var.wallsData['backLean']") 
        if(const_var.ExtraItemsFeaturesArray!=undefined && const_var.ExtraItemsFeaturesArray.length>0)
        {
            let checkCenterCost = false;
            const_var.ExtraItemsFeaturesArray.map((val, index) => {
                if(val!=null && val.is_checked==true)
                {
                    // console.log(val.name,val.is_checked,"item.name == val.name")
                    let leantoExtraItemCheckBoxCost = 0;

                    if(params.add_left_lean ==true && const_var.leanGetDataLeft){
                        const_var.leanGetDataLeft.extra_items[0].checkbox.map((item)=>{
                            if(val.name=='overhang')
                            {
                                if(item.name == val.name && item.label == val.label){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }else{
                                if(item.name == val.name){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }
                        })
                    }
                    // console.log(leantoExtraItemCheckBoxCost,"leantoExtraItemCheckBoxCost111")   
                    if(params.add_front_lean ==true && const_var.leanGetDataFront){
                        const_var.leanGetDataFront.extra_items[0].checkbox.map((item)=>{
                            if(val.name=='overhang')
                            {
                                if(item.name == val.name && item.label == val.label){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }else{
                                if(item.name == val.name){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }
                        })
                    }
                    if(params.add_back_lean ==true && const_var.leanGetDataBack){
                        const_var.leanGetDataBack.extra_items[0].checkbox.map((item)=>{
                            if(val.name=='overhang')
                            {
                                if(item.name == val.name && item.label == val.label){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }else{
                                if(item.name == val.name){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }
                        })
                    }
                    if(params.add_right_lean ==true && const_var.leanGetDataRight){
                        const_var.leanGetDataRight.extra_items[0].checkbox.map((item)=>{
                            if(val.name=='overhang')
                            {
                                if(item.name == val.name && item.label == val.label){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }else{
                                if(item.name == val.name){
                                    leantoExtraItemCheckBoxCost = leantoExtraItemCheckBoxCost + item.cost;
                                }
                            }
                        })
                    }
                        if(val.name == 'fourth_center_cost')
                        {
                            if(( params.m_s_n == 93 || params.m_s_n == 13 || params.m_s_n == 145 || (params.p_s_n==8 && params.m_s_n==34) || (params.p_s_n==8 && params.m_s_n==27)) && checkCenterCost==false)
                            {
                                let arrForMSN = 0;
                                if(const_var.a_p_d_a.extra_items!=undefined && const_var.a_p_d_a.extra_items.length>0)
                                {
                                    arrForMSN = const_var.a_p_d_a.extra_items[0].checkbox.filter(data=>data.name=="fourth_center_cost")[0].cost;
                                }
                                let newTc = 0;
                                if(val.cost==0 && val.is_checked==true && params.fourth_center_cost==true)
                                {
                                    newTc = 0;
                                }else
                                {
                                    newTc = ((parseFloat(totalPriceWithoutAdditionalItem) + parseFloat(leantoPriceCalculation.totalLeanPrice))* parseFloat((arrForMSN!=0)?arrForMSN:val.cost))/100;
                                }
                                let fourthCenterCost =(newTc % 1 == 0) ? newTc : newTc.toFixed(2); 
                                val.cost = parseFloat(fourthCenterCost);
                                t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price):((parseFloat(t_c)) + parseFloat(fourthCenterCost));
                                extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price:parseFloat(fourthCenterCost)});
                                checkCenterCost = true;
                            }else
                            {
                                let newTc = 0;
                                if(val.cost==0 && val.is_checked==true && params.fourth_center_cost==true)
                                {
                                    newTc = 0;
                                }else
                                {
                                    newTc = parseFloat(val.cost) + parseFloat(leantoExtraItemCheckBoxCost);
                                }
                                t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.label.toString()].item_price):((parseFloat(t_c) + parseFloat(newTc)));
                                extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit:false,'item_name':val.label,'other_item_name':val.name,'item_quantity':parseInt(val.quantity),'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.label.toString()].item_price:(parseFloat(newTc))});
                            }
                        }
                    }

            });
            post_data['building'].ExtraItemsFeaturesArray = const_var.ExtraItemsFeaturesArray;
        }
        if(const_var.additionalFeaturesArray!=undefined && const_var.additionalFeaturesArray.length>0)
        {
            if(isNaN(parseFloat(leantoPriceCalculation.totalWallPrice))==true)
            {
                leantoPriceCalculation.totalWallPrice = 0;
            }if(isNaN(parseFloat(leantoPriceCalculation.totalBasePrice))==true)
            {
                leantoPriceCalculation.totalBasePrice = 0;
            }if(isNaN(parseFloat(leantoPriceCalculation.totalLeanPrice))==true)
            {
                leantoPriceCalculation.totalLeanPrice = 0;
            }if(isNaN(parseFloat(leantoPriceCalculation.totalHeightPrice))==true)
            {
                leantoPriceCalculation.totalHeightPrice = 0;
            }
            if(isNaN(parseFloat(leantoPriceCalculation.totalDimension))==true)
            {
                leantoPriceCalculation.totalDimension = 0;
            }
            const_var.additionalFeaturesArrayWithPosition.map((exactVal,index)=>{
                if(exactVal==null)
                {
                    return;
                }
                //const_var.additionalFeaturesArray.filter(data=>{console.log(data,"dataaaaa")});    
                // const_var.additionalFeaturesArray.map((val,key)=>{

                // })
                let val = const_var.additionalFeaturesArray.filter(data=>(data!=null)?data.additional_feature == exactVal.additional_feature:null)[0];
                if(val == null)
                {
                    return;
                }
                if(val.is_checked==true)
                {
                    // console.log(const_var.UpdatedPriceData['elements'][val.additional_feature.toString()],"additionalFeaturesArray PR");
                    // const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]=undefined;
                    if(val.is_cumulative!=undefined)
                    {
                        chk_is_cumulative = (val.is_cumulative!=undefined && val.is_cumulative==1)?1:0;
                    }
                    if(val.cost_type=="%")
                    {
                        var splitVal = 0;
                        if(val.percentage_of!=undefined && val.percentage_of!="")
                        {
                            splitVal =val.percentage_of.split(",");
                        }else
                        {
                            splitVal =val.percentage_of.split(",");
                        }
                        var splval = 0;
                        if(splitVal!=0)
                        {
                            if(splitVal.includes("1")!=false)
                            {
                                if(chk_is_cumulative==0)
                                {
                                    splval = parseFloat(splval) + parseFloat(totalPriceWithoutAdditionalItem) + parseFloat(leantoPriceCalculation.totalLeanPrice);
                                }else{
                                    splval = parseFloat(splval) + parseFloat(t_c) + parseFloat(leantoPriceCalculation.totalLeanPrice);
                                }
                            }if(splitVal.includes("2")!=false)
                            {
                                splval = parseFloat(splval) + parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice);
                            }if(splitVal.includes("3")!=false)
                            {
                                if((params.p_u_c==true || params.cB_addStorage_check_left==true || params.cB_addStorage_check_right==true))
                                {
                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_price) + parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price)+ parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalWallPrice);
                                }else
                                {
                                    splval = parseFloat(splval) + parseFloat(post_data['building'].front_wall_price) +parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(leantoPriceCalculation.totalWallPrice);
                                }
                                if (post_data['building'].utility_front_price != undefined && params.isBreezeway && params.cB_addStorage_check_front ) {
                                    splval = parseFloat(splval) + parseFloat(post_data['building'].utility_front_price);
                                }
                            }if(splitVal.includes("4")!=false)
                            {
                              splval = parseFloat(splval) + parseFloat(post_data['building'].height_price) + parseFloat(leantoPriceCalculation.totalHeightPrice);
                              
                            }
                            
                        }else
                        {
                            if(chk_is_cumulative==0)
                            {
                                splval = parseFloat(splval) + parseFloat(totalPriceWithoutAdditionalItem);
                            }else{
                                splval = parseFloat(splval) + parseFloat(t_c);
                            }
                        }
                        let finalCost  = (splval * val.cost) / 100;
                        let additionalFeatureCost =  (finalCost % 1 == 0) ? finalCost : finalCost.toFixed(2)


                        // console.log(const_var.UpdatedPriceData['elements'],"const_var.UpdatedPriceData['elements']");
                        //t_c = (parseFloat(((splval * val.cost) / 100)) % 1 == 0) ? parseFloat(t_c) + parseFloat(((splval * val.cost) / 100)) : (parseFloat(t_c) + parseFloat(((splval * val.cost) / 100))).toFixed(2) ;
                        //extra_items.push({'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':(parseFloat(((splval * val.cost) / 100)) %1 ==0)?parseFloat(((splval * val.cost) / 100)):parseFloat(((splval * val.cost) / 100)).toFixed(2)});
                        // console.log(const_var.UpdatedPriceData['elements'],"const_var.UpdatedPriceData['elements']");
                        t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].item_price):parseFloat(t_c) + parseFloat(additionalFeatureCost);
                        extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit:false,'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].item_price:parseFloat(additionalFeatureCost)});
                        
                    }else if(val.cost_type=="ft")
                    {
                        const CHKCalculation = utlis.checkAdditionalFeaturesValue(val);
                        var total_FT = 0;
                        if(CHKCalculation.width==true){
                            total_FT = parseFloat(total_FT) + parseFloat(params.p_w*2);
                        }if(CHKCalculation.length==true){
                            total_FT = parseFloat(total_FT) + parseFloat(params.p_d*2);
                        }if(CHKCalculation.height==true){
                            if(params.singleSlope)
                            {
                                total_FT = parseFloat(total_FT) + parseFloat(params.p_h*2)+ parseFloat(Math.round(params.p_h-((params.p_w * params.p_r_p) / 12))*2)
                            }else{
                                total_FT = parseFloat(total_FT) + parseFloat(params.p_h*4);
                            }
                        }
                        
                        if(params.add_front_lean==true)
                        {
                            if(CHKCalculation.width==true){
                                total_FT = (WrapLength_for_liniear_feet_front!=0)?parseFloat(total_FT) + parseFloat(params.leanF_p_w * 2):parseFloat(total_FT) + parseFloat(params.leanF_p_w * 2);
                            }if(CHKCalculation.length==true){
                                total_FT = (WrapLength_for_liniear_feet_front!=0)?parseFloat(total_FT) + parseFloat(WrapLength_for_liniear_feet_front):parseFloat(total_FT) + parseFloat(params.leanF_p_d);
                            }
                            if(CHKCalculation.height==true){
                                total_FT = parseFloat(total_FT) + parseFloat(params.leanF_p_h *2);
                            }
                        }
                        if(params.add_back_lean==true)
                        {
                            if(CHKCalculation.width==true){
                                total_FT = (WrapLength_for_liniear_feet_back!=0)?parseFloat(total_FT) + parseFloat(params.leanB_p_w * 2):parseFloat(total_FT) + parseFloat(params.leanB_p_w * 2);
                            }if(CHKCalculation.length==true){
                                total_FT = (WrapLength_for_liniear_feet_back!=0)?parseFloat(total_FT) + parseFloat(WrapLength_for_liniear_feet_back):parseFloat(total_FT) + parseFloat(params.leanB_p_d);
                            }
                            if(CHKCalculation.height==true){
                                total_FT = parseFloat(total_FT) + parseFloat(params.leanB_p_h *2);
                            }
                        }
                        if(params.add_left_lean==true)
                        {
                            if(CHKCalculation.width==true){
                                total_FT = (WrapLength_for_liniear_feet_left!=0)?parseFloat(total_FT) + parseFloat(params.lean_p_w * 2):parseFloat(total_FT) + parseFloat(params.lean_p_w * 2);
                            }if(CHKCalculation.length==true){
                                total_FT = (WrapLength_for_liniear_feet_left!=0)?parseFloat(total_FT) + parseFloat(WrapLength_for_liniear_feet_left):parseFloat(total_FT) + parseFloat(params.lean_p_d);
                            }
                            if(CHKCalculation.height==true){
                                total_FT = parseFloat(total_FT) + parseFloat(params.lean_p_h *2);
                            }
                        }
                        if(params.add_right_lean==true)
                        {
                            if(CHKCalculation.width==true){
                                total_FT = (WrapLength_for_liniear_feet_right!=0)?parseFloat(total_FT) + parseFloat(params.leanR_p_w * 2):parseFloat(total_FT) + parseFloat(params.leanR_p_w * 2);
                            }if(CHKCalculation.length==true){
                                total_FT = (WrapLength_for_liniear_feet_right!=0)?parseFloat(total_FT) + parseFloat(WrapLength_for_liniear_feet_right):parseFloat(total_FT) + parseFloat(params.leanR_p_d);
                            }
                            if(CHKCalculation.height==true){
                                total_FT = parseFloat(total_FT) + parseFloat(params.leanR_p_h *2);
                            }
                        }
                        
                        let finalCost  = (total_FT * val.cost);
                        let additionalFeatureCost =  (finalCost % 1 == 0) ? finalCost : finalCost.toFixed(2)
                        t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].item_price):parseFloat(t_c) + parseFloat(additionalFeatureCost);
                        extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit:false,'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].item_price:parseFloat(additionalFeatureCost)});
                    
                    } else if(val.cost_type=="sqft") {

                        let sideWallsCount = const_var.cbClosedSideWalls + const_var.flClosedSideWalls + const_var.llClosedSideWalls + const_var.rlClosedSideWalls + const_var.blClosedSideWalls;
                        let endWallsCount = const_var.cbClosedEndWalls + const_var.flClosedEndWalls + const_var.llClosedEndWalls + const_var.rlClosedEndWalls + const_var.blClosedEndWalls;
                        
                        let roofPrice =  0;
                        let sidePrice = 0;
                        let endPrice = 0;
                        let endCount = 0;
                        let sideCount = 0;

                        let gaugeName = (val.additional_feature).toLowerCase()
                        if((params.m_s_n == 93 || params.m_s_n == 145 )&& gaugeName.includes("26 ga panel")) {
                            var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leantoPriceCalculation.totalDimension);

                            let finalCost  = (splval * val.cost) / 100;
                            let additionalFeatureCost =  (finalCost % 1 == 0) ? finalCost : finalCost.toFixed(2)

                            if(Object.keys(const_var.wallsData['center']).length>0 && params.singleSlope) {
                                let slopeHeight = (const_var.c_m_a[params.p_b_t]!=undefined && const_var.c_m_a[params.p_b_t].fixed_new_leg_width!=undefined && const_var.c_m_a[params.p_b_t].fixed_new_leg_width.length>0 ? Math.floor((params.p_h  - (Number(params.p_r_p)/12) * (params.p_w)).toFixed(2)) : Math.round((params.p_h  - (Number(params.p_r_p)/12) * (params.p_w)).toFixed(2)))

                                sideCount =  parseFloat(const_var.wallsData['center'].closedSideWalls);
                                endCount =  parseFloat(const_var.wallsData['center'].closedEndWalls);                            

                                roofPrice =  parseFloat(roofPrice) + parseFloat((params.p_w+2) * ((params.p_d)) * (val.cost));

                                if(sideCount != 0) {
                                    let slopeHeightPrice = 0;
                                    let higherHeightPrice = 0;
                                    if(params.p_l_w != "Open") {
                                        slopeHeightPrice = parseFloat(((params.p_d) * (slopeHeight) * (val.cost)));
                                    }

                                    if(params.p_r_w != "Open") {
                                        higherHeightPrice = parseFloat(((params.p_d) * (params.p_h) * (val.cost)));
                                    }
                                    // let slopeHeightPrice = parseFloat(((params.p_d) * (slopeHeight) * (val.cost)));
                                    // let higherHeightPrice = parseFloat(((params.p_d) * (params.p_h) * (val.cost)));
                                    sidePrice = slopeHeightPrice + higherHeightPrice;                          
                                }
                                
                                endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.p_w) *(val.cost) *endCount)));

                                if(params.p_u_c == true) {
                                   let pitchHeight = parseInt(Math.round(params.p_h-params.p_r_p)+(Math.ceil(((params.p_r_p/(params.p_w))*params.p_u_t))))

                                   let slopeHeightSidePrice = parseFloat(((params.p_u_t) * (slopeHeight) * (val.cost)));
                                   let higherHeightSidePrice = parseFloat(((params.p_u_t) * (params.p_h) * (val.cost)));
                                   sidePrice = slopeHeightSidePrice + higherHeightSidePrice

                                   endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.p_w) *(val.cost))) * 2)
                                   
                                }

                                if(params.cB_addStorage_check_left == true) {
                                    let pitchHeight = parseInt(Math.round(params.p_h-params.p_r_p)+(Math.ceil(((params.p_r_p/(params.p_w))*params.cB_addStorage_left))))

                                    let slopeHeightSidePrice = parseFloat(((params.cB_addStorage_left) * (slopeHeight) * (val.cost)));
                                    let pitchHeightSidePrice = parseFloat(((params.cB_addStorage_left) * (pitchHeight) * (val.cost)));
                                    sidePrice = slopeHeightSidePrice + pitchHeightSidePrice

                                    endPrice = parseFloat(endPrice) + parseFloat(((pitchHeight+2) * ((params.cB_addStorage_left) *(val.cost)))*2)
                                }

                                if(params.cB_addStorage_check_right == true) {
                                    let pitchHeight = parseInt(Math.round(params.p_h-params.p_r_p)+(Math.ceil(((params.p_r_p/(params.p_w))*params.cB_addStorage_right))))

                                    let higherHeightSidePrice = parseFloat(((params.cB_addStorage_right) * (params.p_h) * (val.cost)));
                                    let pitchHeightSidePrice = parseFloat(((params.cB_addStorage_right) * (pitchHeight) * (val.cost)));

                                    sidePrice = pitchHeightSidePrice + higherHeightSidePrice;

                                    endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.cB_addStorage_right) *(val.cost)))*2)

                                }
                            
                            } else {

                                if(params.p_u_c == true) {

                                    roofPrice =  parseFloat(roofPrice) + parseFloat((params.p_w+2) * ((params.p_d)) * (val.cost));
                                    endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.p_w) *(val.cost) *parseFloat(const_var.wallsData['center'].closedEndWalls))));

                                    if(params.p_l_w != "Open" && params.p_r_w == "Open") {
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_d) * (params.p_h) * (val.cost))); 
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_u_t) * (params.p_h) * (val.cost))); 
                                    } 
                                    else if( params.p_r_w != "Open" && params.p_l_w == "Open") {
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_d) * (params.p_h) * (val.cost))); 
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_u_t) * (params.p_h) * (val.cost))); 
                                    } 
                                    else if(params.p_r_w == "Open" && params.p_r_w == "Open") {
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_u_t) * (params.p_h) * (val.cost) *2)); 
                                    }
                                    else {
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_d) * (params.p_h) * (val.cost) * 2)); 

                                    }  
                                    
                                    
                                }
                                else if(params.cB_addStorage_check_left == true) {
                                    roofPrice =  parseFloat(roofPrice) + parseFloat((params.p_w+2) * ((params.p_d)) * (val.cost));
                                    sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_d) *(params.p_h) *(val.cost) *parseFloat(const_var.wallsData['center'].closedSideWalls)));

                                    if(params.p_f_w != "Open") {
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.cB_addStorage_left) *(val.cost))));
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.p_w) *(val.cost))));
                                        
                                    } 
                                    else if(params.p_b_w != "Open") {
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.cB_addStorage_left) *(val.cost))));
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.p_w) *(val.cost))));
                                      
                                    } else if(params.p_r_w == "Open" && params.p_r_w == "Open") {
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.cB_addStorage_left) *(val.cost) *2)));
                                    }
                                    else {
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.p_w) *(val.cost) *2)));
                                      
                                    }                              
                                   
                                }
                                else if(params.cB_addStorage_check_right == true) {
                                    roofPrice =  parseFloat(roofPrice) + parseFloat((params.p_w+2) * ((params.p_d)) * (val.cost));
                                    sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_d) * ((params.p_h) *(val.cost) *parseFloat(const_var.wallsData['center'].closedSideWalls))));

                                    if(params.p_f_w != "Open") {
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.cB_addStorage_right) *(val.cost))));
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.p_w) *(val.cost))));
                                    } 

                                    else if(params.p_b_w != "Open") {
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.cB_addStorage_right) *(val.cost))));
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.p_w) *(val.cost))));
                                    } else if(params.p_r_w == "Open" && params.p_r_w == "Open") {
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.cB_addStorage_right) *(val.cost) *2)));
                                    }
                                    else {
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.p_w) *(val.cost) *2)));
                                    }                              
                            
                                }
                                
                                else {
                                    sideCount =  parseFloat(const_var.wallsData['center'].closedSideWalls);
                                    endCount =  parseFloat(const_var.wallsData['center'].closedEndWalls);
                                    roofPrice =  parseFloat(roofPrice) + parseFloat((params.p_w+2) * ((params.p_d)) * (val.cost));
                                    sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_d) * (params.p_h) * (val.cost) *parseFloat(const_var.wallsData['center'].closedSideWalls))); 
                                    endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+2) * ((params.p_w) *(val.cost) *parseFloat(const_var.wallsData['center'].closedEndWalls))));
                                    
                                }
                            
                            }
                            if(Object.keys(const_var.wallsData['frontLean']).length>0 && params.add_front_lean==true)
                            {
                                if(params.add_storage_check_front == true) {

                                    if(const_var.wallsData['frontLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(const_var.wallsData['frontLean'].closedEndWalls);
                                        
                                        endPrice = parseFloat(endPrice) + parseFloat((params.leanF_p_h+2) * (params.leanF_p_w) *(val.cost) *endCount);
                                    }

                                    if(const_var.wallsData['frontLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(const_var.wallsData['frontLean'].closedSideWalls);
                                        
                                      if(params.p_f_w != "Open") {
                                        sideCount = 1;
                                      } else {
                                        sideCount = sideCount
                                      }

                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.add_storage_front) * (params.leanF_p_h) * (val.cost ) *sideCount));
                                        
    
                                        if(params.add_left_front_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_w) * (params.leanF_p_h) * (val.cost ))); 
                                        }
            
                                        if(params.add_right_front_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_w) * (params.leanF_p_h) * (val.cost ))); 
                                        }
                                    }

                                } else {
                                    if(const_var.wallsData['frontLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(const_var.wallsData['frontLean'].closedSideWalls);
                                      
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_d) * (params.leanF_p_h) * (val.cost ) *sideCount)); 
    
                                        if(params.add_left_front_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_w) * (params.leanF_p_h) * (val.cost ))); 
                                        }
            
                                        if(params.add_right_front_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_w) * (params.leanF_p_h) * (val.cost ))); 
                                        }
                                    }
                                    if(const_var.wallsData['frontLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(const_var.wallsData['frontLean'].closedEndWalls);
                                        
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.leanF_p_h+2) * ((params.leanF_p_w) *(val.cost) *endCount)));
                                    }
                                }
          
                                roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanF_p_w+2) * ((params.leanF_p_d) * (val.cost))));
                                
                            }if(Object.keys(const_var.wallsData['backLean']).length>0 && params.add_back_lean==true)
                            {

                                if(params.add_storage_check_back == true) {

                                    if(const_var.wallsData['backLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(const_var.wallsData['backLean'].closedEndWalls);
                                        
                                        endPrice = parseFloat(endPrice) + parseFloat((params.leanF_p_h+2) * (params.leanF_p_w) *(val.cost) *endCount);
                                    }

                                    if(const_var.wallsData['backLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(const_var.wallsData['backLean'].closedSideWalls);

                                        if(params.p_b_w != "Open") {
                                            sideCount = 1;
                                        } else {
                                            sideCount = sideCount
                                        }
                                      
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.add_storage_back) * (params.leanB_p_h) * (val.cost ) *sideCount));
                                        
                                        if(params.add_left_front_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_w) * (params.leanB_p_h) * (val.cost ))); 
                                        }
            
                                        if(params.add_right_front_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_w) * (params.leanB_p_h) * (val.cost ))); 
                                        }
                                    }

                                } else {

                                    if(const_var.wallsData['backLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(const_var.wallsData['backLean'].closedSideWalls);
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_d) * (params.leanB_p_h) * (val.cost) *sideCount)); 
    
                                        if(params.add_left_back_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_w) * (params.leanB_p_h) * (val.cost ))); 
                                        }
            
                                        if(params.add_right_back_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_w) * (params.leanB_p_h) * (val.cost ))); 
                                        }
                                    }
                                    if(const_var.wallsData['backLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(const_var.wallsData['backLean'].closedEndWalls);
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.leanB_p_h+2) * ((params.leanB_p_w) *(val.cost) *endCount)));
                                    }

                                }
                         
                                roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanB_p_w+2) * ((params.leanB_p_d) * (val.cost))));
                            }
                            
                            if(Object.keys(const_var.wallsData['leftLean']).length>0 && params.add_left_lean==true)
                            {

                                if(params.add_storage_check == true) {
                                    if(const_var.wallsData['leftLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(const_var.wallsData['leftLean'].closedSideWalls);
    
                                        if(params.p_l_w != "Open") {
                                            sideCount = 1;
                                          } else {
                                            sideCount = sideCount
                                          }
                                   
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.add_storage) * (params.lean_p_h) * (val.cost ) *sideCount)); 
    
                                        if(params.add_left_back_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_w) * (params.leanB_p_h) * (val.cost ))); 
                                        }
            
                                        if(params.add_left_front_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_w) * (params.leanF_p_h) * (val.cost ))); 
                                        }
                                       
                                    }
                                    if(const_var.wallsData['leftLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(const_var.wallsData['leftLean'].closedEndWalls);
                                    
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.lean_p_h+2)  * ((params.lean_p_w) *(val.cost) *endCount)));
                                    }

                                 } else {
                                    if(const_var.wallsData['leftLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(const_var.wallsData['leftLean'].closedSideWalls);
                                   
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.lean_p_d) * (params.lean_p_h) * (val.cost ) *sideCount)); 
    
                                        if(params.add_left_back_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_w) * (params.leanB_p_h) * (val.cost ))); 
                                        }
            
                                        if(params.add_left_front_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_w) * (params.leanF_p_h) * (val.cost ))); 
                                        }
                                       
    
                                    }
                                    if(const_var.wallsData['leftLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(const_var.wallsData['leftLean'].closedEndWalls);
                                    
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.lean_p_h+2)  * ((params.lean_p_w) *(val.cost) *endCount)));
                                    }
                                }

                                roofPrice = parseFloat(roofPrice) + parseFloat(((params.lean_p_w+2) * ((params.lean_p_d) * (val.cost))));
                                
                            }if(Object.keys(const_var.wallsData['rightLean']).length>0 && params.add_right_lean==true)
                            {

                                if(params.add_storage_check_right == true) {

                                    if(const_var.wallsData['rightLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(const_var.wallsData['rightLean'].closedSideWalls);

                                        if(params.p_r_w != "Open") {
                                            sideCount = 1;
                                          } else {
                                            sideCount = sideCount
                                          }

                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.add_storage_right) * (params.leanR_p_h) * (val.cost ) *sideCount));
                                        
                                        if(params.add_right_back_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_w) * (params.leanB_p_h) * (val.cost ))); 
                                        }
            
                                        if(params.add_right_front_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_w) * (params.leanB_p_h) * (val.cost ))); 
                                        }
                                    }
                                    if(const_var.wallsData['rightLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(const_var.wallsData['rightLean'].closedEndWalls);
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.leanR_p_h+2) * ((params.leanR_p_w) *(val.cost) *endCount)));
                                    }
                                    
                                    

                                } else {
                                    if(const_var.wallsData['rightLean'].closedSideWalls!=0)
                                    {
                                        sideCount = parseFloat(const_var.wallsData['rightLean'].closedSideWalls);
                                        sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanR_p_d) * (params.leanR_p_h) * (val.cost ) *sideCount));
                                        
                                        if(params.add_right_back_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_w) * (params.leanB_p_h) * (val.cost ))); 
                                        }
            
                                        if(params.add_right_front_lean_porch == true) {
                                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_w) * (params.leanB_p_h) * (val.cost ))); 
                                        }
                                    }
                                    if(const_var.wallsData['rightLean'].closedEndWalls!=0)
                                    {
                                        endCount = parseFloat(const_var.wallsData['rightLean'].closedEndWalls);
                                        endPrice = parseFloat(endPrice) + parseFloat(((params.leanR_p_h+2) * ((params.leanR_p_w) *(val.cost) *endCount)));
                                    }
                                }
                         
                                roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanR_p_w+2) * ((params.leanR_p_d) * (val.cost))));
                            }
                            if(params.add_left_front_lean_porch == true) {
                                roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanF_p_w+2) * ((params.leanF_p_w) * (val.cost))))*2; 
                            }
                            if(params.add_right_front_lean_porch == true) {
                                roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanF_p_w+2) * ((params.leanF_p_w) * (val.cost))))*2; 
                            }
                            if(params.add_left_back_lean_porch == true) {
                                roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanB_p_w+2) * ((params.leanB_p_w) * (val.cost))))*2; 
                            }
                            if(params.add_right_back_lean_porch == true) {
                                roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanB_p_w+2) * ((params.leanB_p_w) * (val.cost))))*2; 
                            }

                            if(const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && (const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==undefined || const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==false))
                            {
                                // Full Building :- Roof + (Side x No.of walls closed) + (Ends x No.of walls closed)
                                let FullCalculatedPrice = parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
                                var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leantoPriceCalculation.totalDimension);
                                t_c = parseFloat(t_c) + parseFloat(FullCalculatedPrice);
                                extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit:false,'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':Number(parseFloat(((FullCalculatedPrice))).toFixed(2))});
                            
                                
                            } else
                            {
                                let FullCalculatedPrice = parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
                                var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leantoPriceCalculation.totalDimension);
                                t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].item_price):parseFloat(t_c) + parseFloat(((FullCalculatedPrice)));
                                extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit:false,'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].item_price:Number(parseFloat(((FullCalculatedPrice))).toFixed(2))});
                       
                            }

                        } else {
                        // console.log(const_var.wallsData,"const_var.wallsData")
                        if(Object.keys(const_var.wallsData['center']).length>0)
                        {
                            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['center'].closedSideWalls);
                            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['center'].closedEndWalls);
                            roofPrice =  parseFloat(roofPrice) + parseFloat(((params.p_w+1) * (params.p_d) * (val.cost)));
                            sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_d) * (params.p_h) * (val.cost )* sideCount)); 
                            endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+1) * (params.p_w) *(val.cost)* endCount));
                        }if(Object.keys(const_var.wallsData['frontLean']).length>0 && params.add_front_lean==true)
                        {
                            if(const_var.wallsData['frontLean'].closedSideWalls!=0)
                            {
                                sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['frontLean'].closedSideWalls);                          
                                sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_d) * (params.leanF_p_h) * (val.cost )* sideCount)); 
                            }
                            if(const_var.wallsData['frontLean'].closedEndWalls!=0)
                            {
                                endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['frontLean'].closedEndWalls);
                                endPrice = parseFloat(endPrice) + parseFloat(((params.leanF_p_h+1) * (params.leanF_p_w) *(val.cost)* endCount));
                            }
                            
                            roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanF_p_w+1) * (params.leanF_p_d) * (val.cost)));
                            
                        }if(Object.keys(const_var.wallsData['backLean']).length>0 && params.add_back_lean==true)
                        {
                            if(const_var.wallsData['backLean'].closedSideWalls!=0)
                            {
                                sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['backLean'].closedSideWalls);
                                sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_d) * (params.leanB_p_h) * (val.cost )* sideCount)); 
                            }
                            if(const_var.wallsData['backLean'].closedEndWalls!=0)
                            {
                                endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['backLean'].closedEndWalls);
                                endPrice = parseFloat(endPrice) + parseFloat(((params.leanB_p_h+1) * (params.leanB_p_w) *(val.cost)* endCount));
                            }
                            roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanB_p_w+1) * (params.leanB_p_d) * (val.cost)));
                        }if(Object.keys(const_var.wallsData['leftLean']).length>0 && params.add_left_lean==true)
                        {
                            if(const_var.wallsData['leftLean'].closedSideWalls!=0)
                            {
                                sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['leftLean'].closedSideWalls);
                                sidePrice = parseFloat(sidePrice) + parseFloat(((params.lean_p_d) * (params.lean_p_h) * (val.cost )* sideCount)); 
                            }
                            if(const_var.wallsData['leftLean'].closedEndWalls!=0)
                            {
                                endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['leftLean'].closedEndWalls);
                                endPrice = parseFloat(endPrice) + parseFloat(((params.lean_p_h+1) * (params.lean_p_w) *(val.cost)* endCount));
                            }
                            
                            roofPrice = parseFloat(roofPrice) + parseFloat(((params.lean_p_w+1) * (params.lean_p_d) * (val.cost)));
                            
                        }if(Object.keys(const_var.wallsData['rightLean']).length>0 && params.add_right_lean==true)
                        {
                            if(const_var.wallsData['rightLean'].closedSideWalls!=0)
                            {
                                sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['rightLean'].closedSideWalls);
                                sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanR_p_d) * (params.leanR_p_h) * (val.cost )* sideCount)); 
                            }
                            if(const_var.wallsData['rightLean'].closedEndWalls!=0)
                            {
                                endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['rightLean'].closedEndWalls);
                                endPrice = parseFloat(endPrice) + parseFloat(((params.leanR_p_h+1) * (params.leanR_p_w) *(val.cost)* endCount));
                            }
                            roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanR_p_w+1) * (params.leanR_p_d) * (val.cost)));
                        }
                        
                        if(const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && (const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==undefined || const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==false))
                        {
                            let FullCalculatedPrice = parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
                            var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leantoPriceCalculation.totalDimension);
                            t_c = parseFloat(t_c) + parseFloat(((FullCalculatedPrice)));
                            extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit:false,'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':parseFloat(((FullCalculatedPrice)))});
                            
                        }else
                        {
                            let FullCalculatedPrice = parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
                            var splval = parseFloat(params.p_w * params.p_d) + parseFloat(leantoPriceCalculation.totalDimension);
                            t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].item_price):parseFloat(t_c) + parseFloat(((FullCalculatedPrice)));
                            extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit:false,'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].item_price:parseFloat(((FullCalculatedPrice)))});
                        }
                    }

                        
                } else {
                        // let leanPrice = 0;
                        // if(leantoPriceCalculation.totalAdditionalFeaturePrice!=undefined && leantoPriceCalculation.totalAdditionalFeaturePrice.length>0)
                        // {
                        //     console.log(leantoPriceCalculation.totalAdditionalFeaturePrice,"leantoPriceCalculation.totalAdditionalFeaturePrice");
                        //     let leanPrice = leantoPriceCalculation.totalAdditionalFeaturePrice.filter(data=>data.additional_feature==val.additional_feature)[0];
                        //     if(leanPrice!=undefined && leanPrice!=0)
                        //     {
                        //         leanPrice = parseFloat(leanPrice.cost);
                        //         const_var.UpdatedPriceData['elements'][val.additional_feature.toString()] = true;
                        //     }
                        //     console.log(leanPrice,"leantoPriceCalculation.totalAdditionalFeaturePrice");
                        // }
                        //t_c = (parseFloat(val.cost)%1==0)?parseFloat(t_c) + parseFloat(val.cost):parseFloat(t_c) + parseFloat(val.cost).toFixed(2);
                        //extra_items.push({'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':(parseFloat(val.cost)%1==0)?(parseFloat(val.cost)):(parseFloat(val.cost)).toFixed(2)});
                        t_c = (UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==true)?parseFloat(t_c) + parseFloat(const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].item_price):parseFloat(t_c) + parseFloat(val.cost);
                        extra_items.push({'is_edit':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit!=undefined )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit:false,'item_name':val.additional_feature,'item_quantity':(val.is_checked==true)?1:0,'item_price':(UpdatePriceRecord==true && const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].is_edit==true )?const_var.UpdatedPriceData['elements'][val.additional_feature.toString()].item_price:(parseInt(val.cost))});
                        
                    }
                    
                }
            
            });
            post_data['building'].additionalFeaturesArray = const_var.additionalFeaturesArray;
            
        }
        if(isNaN(parseFloat(t_c))==true)
        {
            t_c = 0;
        }
        post_data['building'].price = parseFloat(t_c);
        
        post_data['building'].order_total = parseFloat(t_c);
        post_data['building'].grand_total = parseFloat(t_c);
        // console.log( post_data['building'].order_total," post_data['building'].order_total")
        let leantoRoofColorPrice = 0;
        let leantoWallColorPrice = 0;
        let leantoTrimColorPrice = 0;
        let leantoSquareFeetPrice = 0;
        if(post_data['building'].leanto.length>0)
        {
            for(var i=0;i<=post_data['building'].leanto.length-1;i++)
            {
                var leftleanPrice = (post_data['building'].leanto[i].t_c_b==undefined)?const_var.leanto[i].t_c_b:post_data['building'].leanto[i].t_c_b;
                let leantoLength = (post_data['building'].leanto[i].total_length!=undefined)?post_data['building'].leanto[i].total_length:post_data['building'].leanto[i].length;
                leantoSquareFeetPrice = parseFloat(leantoSquareFeetPrice) + parseFloat((post_data['building'].leanto[i].width) * leantoLength);
                if(isNaN(parseFloat(leftleanPrice))==true)
                {
                    leftleanPrice = 0;
                }
                if(const_var.c_m_a_Colors[params.p_r_c_id].cost!=0)
                {
                    leantoRoofColorPrice = parseFloat(leantoRoofColorPrice) + (parseFloat(post_data['building'].leanto[i].basic_price) * parseFloat(const_var.c_m_a_Colors[params.p_r_c_id].cost))/100;
                }
                if(const_var.c_m_a_Colors[params.p_w_c_id].cost!=0)
                {
                    if(post_data['building'].leanto[i].utility_price!=undefined)
                    {
                        leantoWallColorPrice = parseFloat(leantoWallColorPrice) + parseFloat(post_data['building'].leanto[i].front_wall_price) + parseFloat(post_data['building'].leanto[i].utility_price) + parseFloat(post_data['building'].leanto[i].side_wall_price);
                    }else
                    {
                        leantoWallColorPrice = parseFloat(post_data['building'].leanto[i].front_wall_price) + parseFloat(post_data['building'].leanto[i].back_wall_price) +  parseFloat(post_data['building'].leanto[i].side_wall_price);
                    }
                }
                if(const_var.c_m_a_Colors[params.p_t_c_id].cost!=0)
                {
                    leantoTrimColorPrice = parseFloat(leantoTrimColorPrice) + parseFloat(post_data['building'].leanto[i].height_price);
                }

                post_data['building'].order_total = parseFloat(post_data['building'].order_total + parseFloat(leftleanPrice));
                //post_data['building'].order_total = (post_data['building'].order_total + (rightleanPrice));
            }
        }else
        {
            post_data['building'].order_total = parseFloat(post_data['building'].order_total);
        }
        
        if(const_var.c_m_a_Colors[params.p_r_c_id].cost!=0)
        {
           if(const_var.c_m_a_Colors[params.p_r_c_id].cost_type==1)
           { 
                post_data['building'].roof_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.roof_color_price:(((parseFloat(leantoRoofColorPrice)+parseFloat(post_data['building'].roof_style_price))* parseFloat(const_var.c_m_a_Colors[params.p_r_c_id].cost))/100).toFixed(2);
           }else if(const_var.c_m_a_Colors[params.p_r_c_id].cost_type==2)
           {
                post_data['building'].roof_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.roof_color_price:(((parseFloat(leantoSquareFeetPrice)+parseFloat(post_data['building'].width * post_data['building'].length))* parseFloat(const_var.c_m_a_Colors[params.p_r_c_id].cost))).toFixed(2);
           }else{
                post_data['building'].roof_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.roof_color_price:(((parseFloat(leantoRoofColorPrice)+parseFloat(post_data['building'].roof_style_price))+ parseFloat(const_var.c_m_a_Colors[params.p_r_c_id].cost))).toFixed(2);
           }
           post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].roof_color_price); 
           post_data['building'].roof_color.roof_color_price = post_data['building'].roof_color_price;
        }
        if(Object.keys(post_data['building'].wall_color).length>0 && const_var.c_m_a_Colors[params.p_w_c_id].cost!=0)
        {
            let wallPriceCal = 0;
            if(post_data['building'].utility_price!=undefined && params.p_u_c==true)
            {
                wallPriceCal = parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price)+parseFloat(post_data['building'].utility_price);
            }else{
                wallPriceCal = parseFloat(post_data['building'].front_wall_price) + parseFloat(post_data['building'].back_wall_price) + parseFloat(post_data['building'].left_wall_price) + parseFloat(post_data['building'].right_wall_price);
            }
            if ( post_data['building'].utility_front_price !=undefined && params.isBreezeway && params.cB_addStorage_check_front){
                wallPriceCal = wallPriceCal + parseFloat(post_data['building'].utility_front_price);
            }
            if(const_var.c_m_a_Colors[params.p_w_c_id].cost_type==1)
            { 
                post_data['building'].wall_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wall_color_price:(((parseFloat(leantoWallColorPrice) + parseFloat(wallPriceCal))* parseFloat(const_var.c_m_a_Colors[params.p_w_c_id].cost))/100).toFixed(2);
            }else if(const_var.c_m_a_Colors[params.p_w_c_id].cost_type==2)
            {
                post_data['building'].wall_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wall_color_price:(((parseFloat(leantoSquareFeetPrice) + parseFloat(post_data['building'].width * post_data['building'].length))* parseFloat(const_var.c_m_a_Colors[params.p_w_c_id].cost))).toFixed(2);
            }else{
                post_data['building'].wall_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wall_color_price:(((parseFloat(leantoWallColorPrice) + parseFloat(wallPriceCal))+ parseFloat(const_var.c_m_a_Colors[params.p_w_c_id].cost))).toFixed(2);
            }
            post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].wall_color_price);
            post_data['building'].wall_color.wall_color_price = post_data['building'].wall_color_price;
        }if(const_var.c_m_a_Colors[params.p_t_c_id].cost!=0)
        {
            if ( params.m_s_n != 58 ) {
               if(const_var.c_m_a_Colors[params.p_t_c_id].cost_type==1)
               {    
                    let leantrimPrice = ((parseFloat(leantoTrimColorPrice) + parseFloat(leantoRoofColorPrice)) * const_var.c_m_a_Colors[params.p_t_c_id].cost)/100;
                    post_data['building'].trim_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.trim_color_price:(((parseFloat(post_data['building'].roof_style_price) + parseFloat(post_data['building'].height_price + parseFloat(leantrimPrice))) * const_var.c_m_a_Colors[params.p_t_c_id].cost)/100).toFixed(2);
               }else if(const_var.c_m_a_Colors[params.p_t_c_id].cost_type==2)
               {
                   post_data['building'].trim_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.trim_color_price:((parseFloat(leantoSquareFeetPrice) + parseFloat(post_data['building'].width * post_data['building'].length)) * const_var.c_m_a_Colors[params.p_t_c_id].cost).toFixed(2);
                
               }else{
                   let leantrimPrice = ((parseFloat(leantoTrimColorPrice) + parseFloat(leantoRoofColorPrice)) + const_var.c_m_a_Colors[params.p_t_c_id].cost);
                   post_data['building'].trim_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.trim_color_price:(((parseFloat(post_data['building'].roof_style_price) + parseFloat(post_data['building'].height_price + parseFloat(leantrimPrice))) + const_var.c_m_a_Colors[params.p_t_c_id].cost)).toFixed(2);
                
               }
                post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].trim_color_price);
                post_data['building'].trim_color.trim_color_price = post_data['building'].trim_color_price;
            } else {
                post_data['building'].trim_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.trim_color_price : 0 ;
                post_data['building'].trim_color.trim_color_price = post_data['building'].trim_color_price;
            }
        }
        // if(const_var.garageDoorColor[params.g_d_c_id].cost!=0)
        // {
        //     let garageDoorColorPrice = parseFloat(post_data['building'].garageDoor_color_price);
        //     post_data['building'].garageDoor_color_price = parseFloat(const_var.UpdatedPriceData.garageDoor_color_price):((parseFloat(garageDoorColorPrice)* parseFloat(const_var.garageDoorColor[params.g_d_c_id].cost))/100);
        //     post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].garageDoor_color_price);
        //     post_data['building'].garageDoorColor.garageDoor_color_price = parseFloat(post_data['building'].garageDoor_color_price);
        // }
        if(params.p_w_c_c_id !== '' && params.p_w_c_n==true && const_var.c_m_a_Colors[params.p_w_c_c_id].cost!=0)
        {

            if(const_var.c_m_a_Colors[params.p_w_c_c_id].cost_type==1)
            {    
                let fullyEnclosedWalls = const_var.cbFullyEnclosedWalls+const_var.flFullyEnclosedWalls+const_var.llFullyEnclosedWalls+const_var.rlFullyEnclosedWalls+const_var.blFullyEnclosedWalls; 
                 if(post_data['building'].wainscot_price==0)
                 {
                    post_data['building'].wainscot_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wainscot_color_price:((data.panel[0].cost * fullyEnclosedWalls)  * const_var.c_m_a_Colors[params.p_w_c_c_id].cost)/100;
                 }else
                 {
                    post_data['building'].wainscot_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wainscot_color_price:(parseFloat(post_data['building'].wainscot_price)  * const_var.c_m_a_Colors[params.p_w_c_c_id].cost)/100;
                 }
            }else if(const_var.c_m_a_Colors[params.p_w_c_c_id].cost_type==2)
            {
                //console.log(params.p_w_c_c_id,const_var.c_m_a_Colors,const_var.UpdatedPriceData.color_price_changed,'const_var.UpdatedPriceData.color_price_changed')
                if(post_data['building'].wainscot_price==0)
                 {
                    post_data['building'].wainscot_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wainscot_color_price:((parseFloat(leantoSquareFeetPrice) + parseFloat(post_data['building'].width * post_data['building'].length)) * const_var.c_m_a_Colors[params.p_w_c_c_id].cost).toFixed(2);
                 }else
                 {
                    post_data['building'].wainscot_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wainscot_color_price:((parseFloat(leantoSquareFeetPrice) + parseFloat(post_data['building'].width * post_data['building'].length)) * const_var.c_m_a_Colors[params.p_w_c_c_id].cost).toFixed(2);
                 }
                 //console.log(const_var.UpdatedPriceData.color_price_changed,'const_var.UpdatedPriceData.color_price_changed',((parseFloat(leantoSquareFeetPrice) + (parseFloat(post_data['building'].width * post_data['building'].length))) * const_var.c_m_a_Colors[params.p_t_c_id].cost).toFixed(2),const_var.c_m_a_Colors[params.p_t_c_id].cost,post_data['building'].wainscot_color_price)
            }else{
                if(post_data['building'].wainscot_price==0)
                 {
                    post_data['building'].wainscot_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wainscot_color_price:(data.panel[0].cost  + const_var.c_m_a_Colors[params.p_w_c_c_id].cost).toFixed(2);
                 }else
                 {
                    post_data['building'].wainscot_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wainscot_color_price:(parseFloat(post_data['building'].wainscot_price)  + const_var.c_m_a_Colors[params.p_w_c_c_id].cost).toFixed(2);
                 }
            }
            // post_data['building'].wainscot_color_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.color_price_changed!=true)?const_var.UpdatedPriceData.wainscot_color_price:(parseFloat(post_data['building'].wainscot_price)  * const_var.c_m_a_Colors[params.p_w_c_c_id].cost)/100;
             post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].wainscot_color_price);
             post_data['building'].wainscot.wainscot_color_price = post_data['building'].wainscot_color_price;
        }
        
        
        post_data['building'].order_total = post_data['building'].order_total;
        post_data['building'].sub_order_total = post_data['building'].order_total;
        const_var.BuildingPriceArrar['order_total'] = post_data['building'].order_total;
        // console.log(const_var.BuildingPriceArrar['order_total']," =", post_data['building'].order_total)
        const_var.BuildingPriceArrar['sub_order_total'] = post_data['building'].order_total;
        // console.log(const_var.editAPIDataByResponse,"const_var.editAPIDataByResponse",post_data['building'].order_total,const_var.editAPIDataByResponse.data.request_data.building.order_total)
        // if(const_var.editAPIDataByResponse!=undefined && const_var.editAPIDataByResponse.data!=undefined)
        // {
        //     if(const_var.editAPIDataByResponse.data.request_data!=undefined && const_var.crmSetting.is_Edit==true)
        //     {
        //         if(post_data['building'].order_total != const_var.editAPIDataByResponse.data.request_data.building.order_total)
        //         {
        //             const_var.UpdatedPriceData.surcharge_amount=undefined;
        //         }
        //     }
        // }
        let surcharge_by_mfg = [];
        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]!=undefined && Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]).length>0)
        {
            surcharge_by_mfg = const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n].filter(data =>data.surcharge_on_discounted_subtotal==1);
            if(surcharge_by_mfg.length>0)
            {
                post_data['building'].surcharge_on_discounted_subtotal = 1;
            }else{
                post_data['building'].surcharge_on_discounted_subtotal = 0;
            }
        }
        if(surcharge_by_mfg.length==0)
        {
            if(CalculatesurchargeFees==undefined)
            {
                CalculatesurchargeFees = 0;
            }else
            {
                CalculatesurchargeFees = parseFloat(const_var.order_extra_items['surchargeFees']);
            }
            // if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]==undefined)
            // {
            //     const_var.order_extra_items['surchargeFees'] = 0;
            // }
            //console.log(const_var.stateManufacturerAcordingAPIDiscount['surcharge'],const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'],"const_var.stateManufacturerAcordingAPIDiscount['surcharge']");
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]==undefined )
            {
                //console.log()
                if(const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n]!=undefined)
                {
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n] = (const_var.stateManufacturerAcordingAPIDiscount['surchargeArray']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n].length>0)?const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n]:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n];
                }else
                {
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'] = [];
                }
            }
            let filterData = "";
            if( const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]!=undefined && Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]).length>0)
            {
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].is_edit==undefined && const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n].length>0)
                {
                    let filterData1 = const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n].filter(data =>(parseFloat(post_data['building'].roof_style_price)+parseFloat(leantoPriceCalculation.totalBasePrice)) >=data.price_from && (parseFloat(post_data['building'].roof_style_price)+parseFloat(leantoPriceCalculation.totalBasePrice))<=data.price_to && data.percentage_of=="basic_price");
                    filterData = const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n].filter(data =>post_data['building'].order_total >=data.price_from && post_data['building'].order_total<=data.price_to && data.percentage_of=="building_amount");
                    filterData = (filterData1.length==0)?filterData:filterData1;
                    let len = filterData.length-1;
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n] = (filterData[len]!=undefined)?filterData[len]:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n];
                    if(filterData.length==0)
                    {
                        const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n] = (filterData.length==0)?undefined:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n];
                        //CalculatesurchargeFees = (filterData.length==0)?0:CalculatesurchargeFees;
                        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]==undefined)
                        {
                            //CalculatesurchargeFees = 0;
                            const_var.order_extra_items['surchargeFees'] =  (isNaN(parseFloat(const_var.order_extra_items['surchargeFees']))==true)?0:const_var.order_extra_items['surchargeFees'];
                        }
                    }
                }else{
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n] = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n];
                }
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]!=undefined)
                {
                    const_var.UpdatedPriceData.surcharge_taxable = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable;
                }
            }
            post_data['building'].surcharge_amount = const_var.order_extra_items['surchargeFees'];
            
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]!=undefined  && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]!=0&& Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]).length>0)
            {
                
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable==1 )
                {   
                        if(const_var.surcharge_amount_is_edit!=undefined && const_var.surcharge_amount_is_edit==true)
                        {
                            const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].is_edit = true;
                        }
                        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].is_edit==undefined)
                        {
                    
                            const_var.order_extra_items['surchargeFees'] = 0;
                            post_data['building'].surcharge_amount_type = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount_type;
                            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount_type=='per')
                            {
                                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of=="building_amount")
                                {
                                    post_data['building'].surcharge_percentage_of = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of;
                                    CalculatesurchargeFees = parseFloat((parseFloat(const_var.BuildingPriceArrar['order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount))/100).toFixed(2);
                                }else
                                {
                                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of=="basic_price")
                                    {
                                        post_data['building'].surcharge_percentage_of = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of;
                                        CalculatesurchargeFees = parseFloat((parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice))*(parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount))/100).toFixed(2);
                                    }else
                                    {
                                        CalculatesurchargeFees = parseFloat((parseFloat(const_var.BuildingPriceArrar['sub_order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount))/100).toFixed(2);
                                    }
                                    //console.log(CalculatesurchargeFees,"CalculatesurchargeFees",const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount,const_var.BuildingPriceArrar['sub_order_total']);
                                }
                                post_data['building'].surcharge_calculate_amount = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount;
                            }else
                            {
                                post_data['building'].surcharge_calculate_amount = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount;
                                CalculatesurchargeFees = parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount);
                            }
                            CalculatesurchargeFees = (const_var.UpdatedPriceData.surcharge_amount!=undefined && const_var.crmSetting.is_Edit==true && const_var.checkPickThisBuilding == false)?const_var.UpdatedPriceData.surcharge_amount:CalculatesurchargeFees;    
                        }else
                        {
                            CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                        }
                    CalculatesurchargeFees = CalculatesurchargeFees;//(const_var.UpdatedPriceData.surcharge_amount!=undefined && const_var.crmSetting.is_Edit==true)?const_var.UpdatedPriceData.surcharge_amount:CalculatesurchargeFees;    
                    post_data['building'].surcharge_taxable = (const_var.UpdatedPriceData.surcharge_taxable==undefined || const_var.UpdatedPriceData.surcharge_taxable==0)?const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable:const_var.UpdatedPriceData.surcharge_taxable;
                    post_data['building'].surcharge_amount = CalculatesurchargeFees;
                    const_var.BuildingPriceArrar['surcharge_amount'] =  parseFloat(post_data['building'].surcharge_amount);
                    post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].surcharge_amount);
                    const_var.BuildingPriceArrar['order_total'] = parseFloat(const_var.BuildingPriceArrar['order_total']) + parseFloat(post_data['building'].surcharge_amount);
                    if(const_var.order_extra_items['surchargeFees']==0)
                    {
                        const_var.order_extra_items['surchargeFees'] = parseFloat(CalculatesurchargeFees);
                    }
                }else
                {
                    if(const_var.UpdatedPriceData.surcharge_taxable!=undefined)
                    {
                        if(const_var.UpdatedPriceData.surcharge_taxable==1)
                        {
                            CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                            post_data['building'].surcharge_taxable = const_var.UpdatedPriceData.surcharge_taxable;
                            post_data['building'].surcharge_amount = CalculatesurchargeFees;
                            const_var.BuildingPriceArrar['surcharge_amount'] =  parseFloat(post_data['building'].surcharge_amount);
                            post_data['building'].order_total = parseFloat(post_data['building'].order_total) + parseFloat(post_data['building'].surcharge_amount);
                            const_var.BuildingPriceArrar['order_total'] = parseFloat(const_var.BuildingPriceArrar['order_total']) + parseFloat(post_data['building'].surcharge_amount);
                        }
                    }
                }
                
            }
            post_data['building'].sub_order_total =  parseFloat(post_data['building'].order_total);
            const_var.BuildingPriceArrar['sub_order_total'] = parseFloat(post_data['building'].order_total);
        }
        
        // if(const_var.order_extra_items['surchargeFees']==undefined)
        // {
        //     const_var.order_extra_items['surchargeFees'] = 0;
        // }
        // post_data['building'].surcharge_amount = const_var.order_extra_items['surchargeFees']; 
        if(const_var.UpdatedPriceData.discount_rate_Updated==undefined)
        {
            if(const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][params.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][params.m_s_n].length>0)
            {
                let checkMFGDiscount = false;
                for(var i=0;i<const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][params.m_s_n].length;i++)
                {
                       
                   if(post_data['building'].order_total >= parseInt(const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][params.m_s_n][i].price_from)  && post_data['building'].order_total <=parseInt(const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][params.m_s_n][i].price_to))
                   {
                        checkMFGDiscount = true;
                        let percentage = const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][params.m_s_n][i].amount;
                        
                        post_data['building'].discount_rate = percentage;
                        post_data['building'].discount_type = (const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][params.m_s_n][i].amount_type=="%")?"per":'amt';
                        const_var.UpdatedPriceData.discount_type = post_data['building'].discount_type;
                        post_data['building'].discount_amount = (post_data['building'].discount_type=="per")?((post_data['building'].order_total * percentage) /100).toFixed(2):(percentage);
                        //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].discount_amount;
                        const_var.BuildingPriceArrar['sub_order_total'] = const_var.BuildingPriceArrar['order_total'] - post_data['building'].discount_amount;
                        const_var.BuildingPriceArrar['discount_order_total'] = parseFloat(post_data['building'].discount_amount);
                        post_data['building'].sub_order_total = post_data['building'].sub_order_total - post_data['building'].discount_amount;
                   }else
                   {
                        if(checkMFGDiscount==false && post_data['building'].order_total > parseInt(const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][params.m_s_n][i].price_from)  && post_data['building'].order_total > parseInt(const_var.stateManufacturerAcordingAPIDiscount['mfg_discount'][params.m_s_n][i].price_to))
                       {
                            let percentage = 0;
                            post_data['building'].discount_rate = percentage;
                            post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                            post_data['building'].discount_amount = (post_data['building'].discount_type=="per")?((post_data['building'].order_total * percentage) /100).toFixed(2):(percentage);
                            //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].discount_amount;
                            const_var.BuildingPriceArrar['sub_order_total'] = const_var.BuildingPriceArrar['order_total'] - post_data['building'].discount_amount;
                            const_var.BuildingPriceArrar['discount_order_total'] = parseFloat(post_data['building'].discount_amount);
                            post_data['building'].sub_order_total = post_data['building'].sub_order_total - post_data['building'].discount_amount;
                       }else{
                            if(checkMFGDiscount==false)
                            {
                                let percentage = 0;
                                post_data['building'].discount_rate = percentage;
                                post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                                post_data['building'].discount_amount = (post_data['building'].discount_type=="per")?((post_data['building'].order_total * percentage) /100).toFixed(2):(percentage);
                                //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].discount_amount;
                                const_var.BuildingPriceArrar['sub_order_total'] = const_var.BuildingPriceArrar['order_total'] - post_data['building'].discount_amount;
                                const_var.BuildingPriceArrar['discount_order_total'] = parseFloat(post_data['building'].discount_amount);
                                post_data['building'].sub_order_total = post_data['building'].sub_order_total - post_data['building'].discount_amount;
                            }
                       }
                   }
                }
            }else
            {
                let percentage = 0;
                post_data['building'].discount_rate = percentage;
                post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                post_data['building'].discount_amount = (post_data['building'].discount_type=="per")?((post_data['building'].order_total * percentage) /100).toFixed(2):(percentage);
                //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].discount_amount;

                const_var.BuildingPriceArrar['sub_order_total'] = const_var.BuildingPriceArrar['order_total'] - post_data['building'].discount_amount;
                const_var.BuildingPriceArrar['discount_order_total'] = parseFloat(post_data['building'].discount_amount);
                post_data['building'].sub_order_total = post_data['building'].sub_order_total - post_data['building'].discount_amount;
            }
        }else
        {

            post_data['building'].discount_rate = const_var.UpdatedPriceData.discount_rate;
            post_data['building'].discount_rate_Updated = const_var.UpdatedPriceData.discount_rate;
            post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
            post_data['building'].discount_amount = (post_data['building'].discount_type=="per")?(post_data['building'].order_total * const_var.UpdatedPriceData.discount_rate / 100).toFixed(2):(const_var.UpdatedPriceData.discount_rate);
            //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].discount_amount;
            const_var.BuildingPriceArrar['sub_order_total'] = const_var.BuildingPriceArrar['order_total'] - post_data['building'].discount_amount;
            const_var.BuildingPriceArrar['discount_order_total'] = parseFloat(post_data['building'].discount_amount);
            post_data['building'].sub_order_total = const_var.BuildingPriceArrar['order_total'] - post_data['building'].discount_amount;

        }
        if(surcharge_by_mfg.length>0)
        {
            post_data['building'].sub_order_total =  parseFloat(post_data['building'].sub_order_total);
            const_var.BuildingPriceArrar['sub_order_total'] = parseFloat(post_data['building'].sub_order_total);
            
            if(CalculatesurchargeFees==undefined)
            {
                CalculatesurchargeFees = 0;
            }else
            {
                CalculatesurchargeFees = parseFloat(const_var.order_extra_items['surchargeFees']);
            }
            // if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]==undefined)
            // {
            //     const_var.order_extra_items['surchargeFees'] = 0;
            // }
            //console.log(const_var.stateManufacturerAcordingAPIDiscount['surcharge'],const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'],"const_var.stateManufacturerAcordingAPIDiscount['surcharge']");
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]==undefined )
            {
                //console.log()
                if(const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n]!=undefined)
                {
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n] = (const_var.stateManufacturerAcordingAPIDiscount['surchargeArray']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n].length>0)?const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n]:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n];
                }else
                {
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'] = [];
                }
            }
            let filterData = "";
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]!=undefined && Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]).length>0)
            {
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].is_edit==undefined && const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n].length>0)
                {
                    let filterData1 = const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n].filter(data =>(parseFloat(post_data['building'].roof_style_price)+parseFloat(leantoPriceCalculation.totalBasePrice)) >=data.price_from && (parseFloat(post_data['building'].roof_style_price)+parseFloat(leantoPriceCalculation.totalBasePrice))<=data.price_to && data.percentage_of=="basic_price");
                    filterData = const_var.stateManufacturerAcordingAPIDiscount['surchargeArray'][params.m_s_n].filter(data =>post_data['building'].sub_order_total >=data.price_from && post_data['building'].sub_order_total<=data.price_to && data.percentage_of=="building_amount");
                    filterData = (filterData1.length==0)?filterData:filterData1;
                    let len = filterData.length-1;
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n] = (filterData[len]!=undefined)?filterData[len]:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n];
                    if(filterData.length==0)
                    {
                        const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n] = (filterData.length==0)?undefined:const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n];
                        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]==undefined)
                        {
                            //CalculatesurchargeFees = 0;
                            const_var.order_extra_items['surchargeFees'] =  (isNaN(parseFloat(const_var.order_extra_items['surchargeFees']))==true)?0:const_var.order_extra_items['surchargeFees'];
                        }
                    }
                }else{
                    const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n] = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n];
                }
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]!=undefined)
                {
                    const_var.UpdatedPriceData.surcharge_taxable = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable;
                }
            }
            post_data['building'].surcharge_amount = const_var.order_extra_items['surchargeFees'];
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]!=undefined  && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]!=0&& Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]).length>0)
            {
                
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable==1 )
                {   
                        if(const_var.surcharge_amount_is_edit!=undefined && const_var.surcharge_amount_is_edit==true)
                        {
                            const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].is_edit = true;
                        }
                        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].is_edit==undefined)
                        {
                            const_var.order_extra_items['surchargeFees'] = 0;
                            post_data['building'].surcharge_amount_type = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount_type;
                            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount_type=='per')
                            {
                                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of=="building_amount")
                                {
                                    post_data['building'].surcharge_percentage_of = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of;
                                    CalculatesurchargeFees = parseFloat((parseFloat(const_var.BuildingPriceArrar['sub_order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount))/100).toFixed(2);
                                }else
                                {
                                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of=="basic_price")
                                    {
                                        post_data['building'].surcharge_percentage_of = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of;
                                        CalculatesurchargeFees = parseFloat((parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice))*(parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount))/100).toFixed(2);
                                    }else
                                    {
                                        CalculatesurchargeFees = parseFloat((parseFloat(const_var.BuildingPriceArrar['sub_order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount))/100).toFixed(2);
                                    }
                                    //console.log(CalculatesurchargeFees,"CalculatesurchargeFees",const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount,const_var.BuildingPriceArrar['sub_order_total']);
                                }
                                post_data['building'].surcharge_calculate_amount = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount;
                            }else
                            {
                                post_data['building'].surcharge_calculate_amount = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount;
                                CalculatesurchargeFees = parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount);
                            }
                            CalculatesurchargeFees = (const_var.UpdatedPriceData.surcharge_amount!=undefined && const_var.crmSetting.is_Edit==true && const_var.checkPickThisBuilding == false)?const_var.UpdatedPriceData.surcharge_amount:CalculatesurchargeFees;
                        }else
                        {
                            CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                        }
                    CalculatesurchargeFees = CalculatesurchargeFees;;//(const_var.UpdatedPriceData.surcharge_amount!=undefined && const_var.crmSetting.is_Edit==true)?const_var.UpdatedPriceData.surcharge_amount:CalculatesurchargeFees;
                    post_data['building'].surcharge_taxable = (const_var.UpdatedPriceData.surcharge_taxable==undefined || const_var.UpdatedPriceData.surcharge_taxable==0)?const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable:const_var.UpdatedPriceData.surcharge_taxable;
                    post_data['building'].surcharge_amount = CalculatesurchargeFees;
                    const_var.BuildingPriceArrar['surcharge_amount'] =  parseFloat(post_data['building'].surcharge_amount);
                    post_data['building'].sub_order_total = parseFloat(post_data['building'].sub_order_total) + parseFloat(post_data['building'].surcharge_amount);
                    const_var.BuildingPriceArrar['sub_order_total'] = parseFloat(const_var.BuildingPriceArrar['sub_order_total']) + parseFloat(post_data['building'].surcharge_amount);
                    if(const_var.order_extra_items['surchargeFees']==0)
                    {
                        const_var.order_extra_items['surchargeFees'] = parseFloat(CalculatesurchargeFees);
                    }
                }else
                {
                    if(const_var.UpdatedPriceData.surcharge_taxable!=undefined)
                    {
                        if(const_var.UpdatedPriceData.surcharge_taxable==1)
                        {
                            CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                            post_data['building'].surcharge_taxable = const_var.UpdatedPriceData.surcharge_taxable;
                            post_data['building'].surcharge_amount = CalculatesurchargeFees;
                            const_var.BuildingPriceArrar['surcharge_amount'] =  parseFloat(post_data['building'].surcharge_amount);
                            post_data['building'].sub_order_total = parseFloat(post_data['building'].sub_order_total) + parseFloat(post_data['building'].surcharge_amount);
                            const_var.BuildingPriceArrar['sub_order_total'] = parseFloat(const_var.BuildingPriceArrar['sub_order_total']) + parseFloat(post_data['building'].surcharge_amount);
                        }
                    }
                }
                
            }
        }

        const_var.BuildingPriceArrar['new_sub_order_total'] = 0;
        if(const_var.UpdatedPriceData.down_payment_rate_Updated==undefined)
        {
            let calVar = 10;

            if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].length>0)
            {
                let FilterData = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].filter(data=>data.component==undefined || data.component=="building_amount");
                
                if(FilterData.length > 0){
                    for(var i=0;i<FilterData.length;i++)
                    {
                       
                           if(post_data['building'].order_total >= parseInt(FilterData[i].from)  && post_data['building'].order_total <=parseInt(FilterData[i].to))
                           {
                            
                                calVar  = FilterData[i].percentage;
                                const_var.downPersentage = FilterData[i].percentage;
    
                            
                               post_data['building'].down_payment_total = ((post_data['building'].sub_order_total * const_var.downPersentage) /100).toFixed(2);
    
                            //    if(FilterData[i].component == "building_amount"){
                                   post_data['building'].down_payment_rate = const_var.downPersentage;
                                   post_data['building'].down_payment_type = "per";
                                   post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                                // }
                               post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                               post_data['building'].dealer_deposit = (post_data['building'].sub_order_total * const_var.downPersentage) /100;
                               const_var.BuildingPriceArrar['down_payment_total'] =  (parseFloat(const_var.BuildingPriceArrar['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                               const_var.BuildingPriceArrar['dealer_deposit'] =  (parseFloat(const_var.BuildingPriceArrar['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                               const_var.BuildingPriceArrar['new_sub_order_total'] = parseFloat(const_var.BuildingPriceArrar['sub_order_total']) - parseFloat(const_var.BuildingPriceArrar['down_payment_total']);
                           }
                           else
                           {
                            const_var.downPersentage = calVar;
                            // if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component == "building_amount"){
                                post_data['building'].down_payment_rate = const_var.downPersentage;
                                post_data['building'].down_payment_type = "per";
                                post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                            //  }
                               
                            post_data['building'].down_payment_total = ((post_data['building'].sub_order_total) * const_var.downPersentage /100).toFixed(2);
                            // post_data['building'].down_payment_rate = const_var.downPersentage;
                            // post_data['building'].down_payment_type = "per";
                            // post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                            post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                            post_data['building'].dealer_deposit = (post_data['building'].sub_order_total) * const_var.downPersentage /100;
                            const_var.BuildingPriceArrar['down_payment_total'] =  (parseFloat(const_var.BuildingPriceArrar['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                            const_var.BuildingPriceArrar['dealer_deposit'] =  (parseFloat(const_var.BuildingPriceArrar['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                            const_var.BuildingPriceArrar['new_sub_order_total'] = parseFloat(const_var.BuildingPriceArrar['sub_order_total']) - parseFloat(const_var.BuildingPriceArrar['down_payment_total']);
                           }
                      
                       
                    }
                }else{
                    const_var.downPersentage = 10;
                    post_data['building'].down_payment_total = ((post_data['building'].sub_order_total) * const_var.downPersentage /100).toFixed(2);//((parseFloat(post_data['building'].sub_order_total) * parseFloat(const_var.downPersentage) )/100).toFixed(2);
                    post_data['building'].down_payment_rate = const_var.downPersentage;
                    post_data['building'].down_payment_type = "per";
                    post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                    post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                    post_data['building'].dealer_deposit = (post_data['building'].sub_order_total) * const_var.downPersentage /100;
                    const_var.BuildingPriceArrar['down_payment_total'] =  (parseFloat(const_var.BuildingPriceArrar['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                    const_var.BuildingPriceArrar['dealer_deposit'] =  (parseFloat(const_var.BuildingPriceArrar['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                    const_var.BuildingPriceArrar['new_sub_order_total'] = parseFloat(const_var.BuildingPriceArrar['sub_order_total']) - parseFloat(const_var.BuildingPriceArrar['down_payment_total']);
                }
        
            }else{
                
                const_var.downPersentage = 10;
                post_data['building'].down_payment_total = ((post_data['building'].sub_order_total) * const_var.downPersentage /100).toFixed(2);//((parseFloat(post_data['building'].sub_order_total) * parseFloat(const_var.downPersentage) )/100).toFixed(2);
                post_data['building'].down_payment_rate = const_var.downPersentage;
                post_data['building'].down_payment_type = "per";
                post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
                post_data['building'].dealer_deposit = (post_data['building'].sub_order_total) * const_var.downPersentage /100;
                const_var.BuildingPriceArrar['down_payment_total'] =  (parseFloat(const_var.BuildingPriceArrar['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                const_var.BuildingPriceArrar['dealer_deposit'] =  (parseFloat(const_var.BuildingPriceArrar['sub_order_total']) * parseFloat(const_var.downPersentage)) /100;
                const_var.BuildingPriceArrar['new_sub_order_total'] = parseFloat(const_var.BuildingPriceArrar['sub_order_total']) - parseFloat(const_var.BuildingPriceArrar['down_payment_total']);
            }
        }else
        {
            if(const_var.UpdatedPriceData.down_payment_rate==undefined && const_var.UpdatedPriceData.down_payment_rate_Updated!=undefined)
            {
                const_var.UpdatedPriceData.down_payment_rate = const_var.UpdatedPriceData.down_payment_rate_Updated;
            }
            post_data['building'].down_payment_total = (const_var.UpdatedPriceData.down_payment_type=="amt")?const_var.UpdatedPriceData.down_payment_rate:((post_data['building'].sub_order_total) * const_var.UpdatedPriceData.down_payment_rate /100).toFixed(2);
            post_data['building'].down_payment_rate = const_var.UpdatedPriceData.down_payment_rate;
            post_data['building'].down_payment_rate_Updated = const_var.UpdatedPriceData.down_payment_rate;
            post_data['building'].down_payment_type = const_var.UpdatedPriceData.down_payment_type;
            post_data['building'].dealer_deposit = (const_var.UpdatedPriceData.down_payment_type=="amt")?const_var.UpdatedPriceData.down_payment_rate:(post_data['building'].sub_order_total) * const_var.UpdatedPriceData.down_payment_rate /100;
            const_var.BuildingPriceArrar['down_payment_total'] =  (const_var.UpdatedPriceData.down_payment_type=="amt")?parseFloat(const_var.UpdatedPriceData.down_payment_rate):(parseFloat(const_var.BuildingPriceArrar['sub_order_total']) * parseFloat(const_var.UpdatedPriceData.down_payment_rate)) /100;
            const_var.BuildingPriceArrar['dealer_deposit'] =  (const_var.UpdatedPriceData.down_payment_type=="amt")?parseFloat(const_var.UpdatedPriceData.down_payment_rate):(parseFloat(const_var.BuildingPriceArrar['sub_order_total']) * parseFloat(const_var.UpdatedPriceData.down_payment_rate)) /100; 
            const_var.BuildingPriceArrar['new_sub_order_total'] = parseFloat(const_var.BuildingPriceArrar['sub_order_total']) - parseFloat(const_var.BuildingPriceArrar['down_payment_total']);   
        }
        if(const_var.UpdatedPriceData.custom_insulation_down_payment_rate==undefined)
        {
            if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].length>0)
            {
                for(var i=0;i<const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].length;i++)
                {
                    if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category!=undefined || const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category!=null && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category == params.selectedInsulationId)
                    { 
                       
                        if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component=="insulation")
                        {
                            if(params.selectedInsulationId!=0)
                            {
                                if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category == params.selectedInsulationId)
                                {
                                    let totalInsulationPrice = parseFloat(post_data['building'].insulation_price) + parseFloat(leanToTotalInsultaionPrice)
                                    if(totalInsulationPrice>= parseInt(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].from) && totalInsulationPrice <=parseInt(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].to) )
                                    {
                                        let comName = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component;
                                        post_data['building'].custom_insulation_percentage =  parseFloat(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].percentage);
                                        post_data['building'].custom_insulation_down_payment_total = (parseFloat(totalInsulationPrice) * parseFloat(post_data['building'].custom_insulation_percentage) /100).toFixed(2);
                                        
                                        post_data['building'].custom_insulation_total_amount = parseFloat(totalInsulationPrice).toFixed(2); 


                                        // if(post_data['building'].leanto != undefined && post_data['building'].leanto.length > 0){
                                        //     let leanToCalc= 0

                                        //     for(let i=0;i<post_data['building'].leanto.length;i++){
                                        //         console.log('post_data',post_data['building'].leanto[i])
                                        //         if(post_data['building'].leanto[i].insulation_price != undefined){
                                        //             leanToCalc = parseFloat(post_data['building'].leanto[i].insulation_price) + parseFloat(leanToCalc)
                                        //         }
                                        //     }
                                        //     console.log('leanToCalc',leanToCalc)
                                        //     post_data['building'].custom_insulation_total_amount = post_data['building'].custom_insulation_total_amount + leanToCalc
                                        // }


                                        post_data['building'].custom_insulation_down_payment_rate = post_data['building'].custom_insulation_percentage;
                                        post_data['building'].custom_insulation_down_payment_type = 'per';
                                        post_data['building'].custom_insulation_down_payment_category = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category;
                                        post_data['building'].custom_insulation_down_payment_from = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].from;
                                        post_data['building'].custom_insulation_down_payment_to = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].to;
                                        post_data['building'].custom_insulation_down_payment_component = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component;
                                        const_var.BuildingPriceArrar['insulation_calculation'] = {'custom_insulation_total_amount':post_data['building'].custom_insulation_total_amount,
                                        'custom_insulation_down_payment_total':post_data['building'].custom_insulation_down_payment_total,'custom_insulation_down_payment_rate':post_data['building'].custom_insulation_down_payment_rate,
                                        'custom_insulation_down_payment_category':post_data['building'].custom_insulation_down_payment_category,
                                        'custom_insulation_down_payment_type':post_data['building'].custom_insulation_down_payment_type};
                                        //post_data['building'].CustomizeCalculationOBJ[const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component] = (CustomizeCalculationOBJ);
                                    }
                                }
                                
                            }
                        }
                        
                    }
                    else{
                        if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component=="insulation")
                        {
                            if(params.selectedInsulationId!=0)
                            {
                                // if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category == params.selectedInsulationId)
                                // {
                                    let totalInsulationPrice = parseFloat(post_data['building'].insulation_price) + parseFloat(leanToTotalInsultaionPrice)
                                    if(totalInsulationPrice>= parseInt(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].from) && totalInsulationPrice <=parseInt(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].to) )
                                    {
                                        let comName = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component;
                                        post_data['building'].custom_insulation_percentage =  parseFloat(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].percentage);
                                        post_data['building'].custom_insulation_down_payment_total = (parseFloat(totalInsulationPrice) * parseFloat(post_data['building'].custom_insulation_percentage) /100).toFixed(2);
                                        post_data['building'].custom_insulation_total_amount = parseFloat(totalInsulationPrice).toFixed(2); 

                                        // if(post_data['building'].leanto != undefined && post_data['building'].leanto.length > 0){
                                        //     let leanToCalc= 0
                                        //     console.log('post_data[]',post_data['building'])
                                        //     for(let i=0;i<post_data['building'].leanto.length;i++){
                                        //         console.log('post_data',post_data['building'].leanto[i])
                                        //         if(post_data['building'].leanto[i].insulation_price != undefined){
                                        //             console.log('first',post_data['building'].leanto[i].insulation_price)
                                        //             leanToCalc = parseFloat(post_data['building'].leanto[i].insulation_price) + parseFloat(leanToCalc)
                                        //         }
                                        //     }
                                        //     console.log('leanToCalc',leanToCalc)
                                        //     post_data['building'].custom_insulation_total_amount = post_data['building'].custom_insulation_total_amount + leanToCalc
                                        // }

                                        post_data['building'].custom_insulation_down_payment_rate = post_data['building'].custom_insulation_percentage;
                                        post_data['building'].custom_insulation_down_payment_type = 'per';
                                        post_data['building'].custom_insulation_down_payment_category = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category;
                                        post_data['building'].custom_insulation_down_payment_from = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].from;
                                        post_data['building'].custom_insulation_down_payment_to = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].to;
                                        post_data['building'].custom_insulation_down_payment_component = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component;
                                        const_var.BuildingPriceArrar['insulation_calculation'] = {'custom_insulation_total_amount':post_data['building'].custom_insulation_total_amount,
                                        'custom_insulation_down_payment_total':post_data['building'].custom_insulation_down_payment_total,'custom_insulation_down_payment_rate':post_data['building'].custom_insulation_down_payment_rate,
                                        'custom_insulation_down_payment_category':post_data['building'].custom_insulation_down_payment_category,
                                        'custom_insulation_down_payment_type':post_data['building'].custom_insulation_down_payment_type};
                                        //post_data['building'].CustomizeCalculationOBJ[const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component] = (CustomizeCalculationOBJ);
                                    }
                                // }
                                
                            }
                        }
                    }
                }
        
            }
        }else
        {
            if(params.selectedInsulationId!=0)
            {
                let chkExistingData = "";
                if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].length>0)
                {
                    chkExistingData = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].filter(data=>data.category!=undefined && data.component=="insulation");
                }
                if(chkExistingData.length>0)
                {
                    let chkExistingDataCat = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].filter(data=>data.category==params.selectedInsulationId);
                    let totalInsulationPrice = parseFloat(post_data['building'].insulation_price) + parseFloat(leanToTotalInsultaionPrice)
                    if(chkExistingDataCat.length>0 && totalInsulationPrice>= parseInt(chkExistingDataCat[0].from) && totalInsulationPrice <=parseInt(chkExistingDataCat[0].to) )
                    {
                        if(const_var.UpdatedPriceData.custom_insulation_down_payment_rate==undefined && const_var.UpdatedPriceData.custom_insulation_down_payment_rate!=undefined)
                        {
                            const_var.UpdatedPriceData.custom_insulation_down_payment_rate = const_var.UpdatedPriceData.custom_insulation_down_payment_rate;
                        }
                        post_data['building'].custom_insulation_percentage =  parseFloat(const_var.UpdatedPriceData.custom_insulation_down_payment_rate);
                        // post_data['building'].custom_insulation_total_amount = (parseFloat(post_data['building'].insulation_price)).toFixed(2);       
                        post_data['building'].custom_insulation_total_amount = parseFloat(totalInsulationPrice).toFixed(2); 
                        
                        post_data['building'].custom_insulation_down_payment_total = (const_var.UpdatedPriceData.custom_insulation_down_payment_type=="amt")?const_var.UpdatedPriceData.custom_insulation_down_payment_rate:((post_data['building'].custom_insulation_total_amount) * const_var.UpdatedPriceData.custom_insulation_down_payment_rate /100).toFixed(2);
                        post_data['building'].custom_insulation_down_payment_rate = const_var.UpdatedPriceData.custom_insulation_down_payment_rate;
                        post_data['building'].custom_insulation_down_payment_type = const_var.UpdatedPriceData.custom_insulation_down_payment_type;
                        post_data['building'].custom_insulation_down_payment_category = const_var.UpdatedPriceData.custom_insulation_down_payment_type.category;
                        post_data['building'].custom_insulation_down_payment_from = const_var.UpdatedPriceData.custom_insulation_down_payment_type.from;
                        post_data['building'].custom_insulation_down_payment_to = const_var.UpdatedPriceData.custom_insulation_down_payment_type.to;
                        post_data['building'].custom_insulation_down_payment_component = const_var.UpdatedPriceData.custom_insulation_down_payment_type.component;
                        const_var.BuildingPriceArrar['insulation_calculation'] = {'custom_insulation_total_amount':post_data['building'].custom_insulation_total_amount,
                        'custom_insulation_down_payment_total':post_data['building'].custom_insulation_down_payment_total,'custom_insulation_down_payment_rate':post_data['building'].custom_insulation_down_payment_rate,
                        'custom_insulation_down_payment_category':post_data['building'].custom_insulation_down_payment_category,
                        'custom_insulation_down_payment_type':post_data['building'].custom_insulation_down_payment_type};
                    }
                }
            }
            
        }

        if(const_var.UpdatedPriceData.custom_overhead_down_payment_rate==undefined)
        {
            if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].length>0)
            {
                for(var i=0;i<const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].length;i++)
                {
                   if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category!=undefined || const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category!=null)
                   { 
                       
                        if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component=="garage_doors")
                        {
                            if(const_var.entry_points.length>0)
                            {
                                const sumOfEvens = const_var.entry_points.reduce((accumulator, currentValue) => {
                                  if (currentValue.child_array_key === const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category) {
                                    if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].sub_category == null || (const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].sub_category != null && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].sub_category.length > 0 && currentValue.nested_array_key != undefined && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].sub_category.indexOf(currentValue.nested_array_key) != -1)){
                                        return parseFloat(accumulator) + parseFloat(currentValue.overheadDoorSum || 0) ;
                                    }
                                    else{
                                        return parseFloat(accumulator);
                                    }
                                  } else {
                                    return parseFloat(accumulator);
                                  }
                                }, 0);
                                if(sumOfEvens!=0)
                                {                                    
                                    if(sumOfEvens>= parseInt(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].from) && sumOfEvens <=parseInt(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].to) )
                                    {
                                        let comName = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component;
                                        post_data['building'].custom_overhead_percentage =  parseFloat(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].percentage);
                                        post_data['building'].custom_overhead_down_payment_total = (parseFloat(sumOfEvens) * parseFloat(post_data['building'].custom_overhead_percentage) /100).toFixed(2);
                                        post_data['building'].custom_overhead_total_amount = (parseFloat(sumOfEvens)).toFixed(2);
                                        post_data['building'].custom_overhead_down_payment_rate = post_data['building'].custom_overhead_percentage;
                                        post_data['building'].custom_overhead_down_payment_type = 'per';
                                        post_data['building'].custom_overhead_down_payment_category = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category;
                                        post_data['building'].custom_overhead_down_payment_from = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].from;
                                        post_data['building'].custom_overhead_down_payment_to = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].to;
                                        post_data['building'].custom_overhead_down_payment_component = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component;
                                        const_var.BuildingPriceArrar['overhead_door_calculation'] = {'custom_overhead_total_amount':post_data['building'].custom_overhead_total_amount,
                                            'custom_overhead_down_payment_total':post_data['building'].custom_overhead_down_payment_total,'custom_overhead_down_payment_rate':post_data['building'].custom_overhead_down_payment_rate,
                                            'custom_overhead_down_payment_category':post_data['building'].custom_overhead_down_payment_category,
                                            'custom_overhead_down_payment_type':post_data['building'].custom_overhead_down_payment_type,"category":const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].category,"sub_category":const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].sub_category};
                                        //post_data['building'].CustomizeCalculationOBJ[const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n][i].component] = (CustomizeCalculationOBJ);
                                    }
                                }
                                
                            }
                        }
                       
                   }
                }
        
            }
        }else
        {
            if(const_var.entry_points.length>0)
            {
                let chkExistingData = "";    
                if(const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].length>0)
                {
                    chkExistingData = const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n].filter(data=>data.component!=undefined && data.component=="garage_doors");
                }
                if(chkExistingData.length>0)
                {
                    const sumOfEvens = const_var.entry_points.reduce((accumulator, currentValue) => {
                      if (currentValue.child_array_key == chkExistingData[0].category) {
                        if(chkExistingData[0].sub_category == null || (chkExistingData[0].sub_category != null && chkExistingData[0].sub_category.length > 0 && currentValue.nested_array_key != undefined && chkExistingData[0].sub_category.indexOf(currentValue.nested_array_key) != -1)){
                            // Add only even numbers to the accumulator
                            return parseFloat(accumulator) + parseFloat(currentValue.overheadDoorSum || 0) ;
                        }
                        else{
                            return parseFloat(accumulator);    
                        }
                      } else {
                        // For odd numbers, return the accumulator unchanged
                        return parseFloat(accumulator);
                      }
                    }, 0);
                    if(sumOfEvens!=0)
                    {
                        
                        if(const_var.UpdatedPriceData.custom_overhead_down_payment_rate==undefined && const_var.UpdatedPriceData.custom_overhead_down_payment_rate!=undefined)
                        {
                            const_var.UpdatedPriceData.custom_overhead_down_payment_rate = const_var.UpdatedPriceData.custom_overhead_down_payment_rate;
                        }
                        post_data['building'].custom_overhead_percentage =  parseFloat(const_var.UpdatedPriceData.custom_overhead_down_payment_rate);
                        post_data['building'].custom_overhead_total_amount = (parseFloat(sumOfEvens)).toFixed(2);                            
                        post_data['building'].custom_overhead_down_payment_total = (const_var.UpdatedPriceData.custom_overhead_down_payment_type=="amt")?const_var.UpdatedPriceData.custom_overhead_down_payment_rate:((post_data['building'].custom_overhead_total_amount) * const_var.UpdatedPriceData.custom_overhead_down_payment_rate /100).toFixed(2);
                        post_data['building'].custom_overhead_down_payment_rate = const_var.UpdatedPriceData.custom_overhead_down_payment_rate;
                        post_data['building'].custom_overhead_down_payment_type = const_var.UpdatedPriceData.custom_overhead_down_payment_type;
                        post_data['building'].custom_overhead_down_payment_category = (const_var.UpdatedPriceData.custom_overhead_down_payment_category!=undefined)?const_var.UpdatedPriceData.custom_overhead_down_payment_category:chkExistingData[0].category;
                        post_data['building'].custom_overhead_down_payment_from = (const_var.UpdatedPriceData.custom_overhead_down_payment_from!=undefined)?const_var.UpdatedPriceData.custom_overhead_down_payment_from:chkExistingData[0].from;
                        post_data['building'].custom_overhead_down_payment_to = (const_var.UpdatedPriceData.custom_overhead_down_payment_to!=undefined)?const_var.UpdatedPriceData.custom_overhead_down_payment_to:chkExistingData[0].to;
                        post_data['building'].custom_overhead_down_payment_component = (const_var.UpdatedPriceData.custom_overhead_down_payment_component!=undefined)?const_var.UpdatedPriceData.custom_overhead_down_payment_component:chkExistingData[0].component;

                        const_var.BuildingPriceArrar['overhead_door_calculation'] = {'custom_overhead_total_amount':post_data['building'].custom_overhead_total_amount,
                        'custom_overhead_down_payment_total':post_data['building'].custom_overhead_down_payment_total,'custom_overhead_down_payment_rate':post_data['building'].custom_overhead_down_payment_rate,
                        'custom_overhead_down_payment_category':post_data['building'].custom_overhead_down_payment_category,
                        'custom_overhead_down_payment_type':post_data['building'].custom_overhead_down_payment_type,"category":chkExistingData[0].category,"sub_category":chkExistingData[0].sub_category};
                      
                    }
                }
            }
            
        }
        const_var.BuildingPriceArrar["custom_subTotal"] = 0;
        const_var.BuildingPriceArrar['custom_down_payment_total'] = 0;
        const_var.BuildingPriceArrar["insulation_tax_price"] = 0;
        const_var.BuildingPriceArrar["overhead_tax_price"] = 0; 
        if(const_var.BuildingPriceArrar['overhead_door_calculation']!=undefined)
        {
            post_data['building'].overhead_door_calculation = const_var.BuildingPriceArrar['overhead_door_calculation'];
        }
        if(const_var.BuildingPriceArrar['insulation_calculation']!=undefined)
        {
            post_data['building'].insulation_calculation = const_var.BuildingPriceArrar['insulation_calculation'];
            
        }
       

        if(const_var.BuildingPriceArrar['insulation_calculation']!=undefined || const_var.BuildingPriceArrar['overhead_door_calculation']!=undefined){
          let excludeBuildingAmaount = 0;  
          
          if(const_var.BuildingPriceArrar['insulation_calculation']!=undefined)
          {
            excludeBuildingAmaount = parseFloat(excludeBuildingAmaount) + parseFloat(const_var.BuildingPriceArrar['insulation_calculation'].custom_insulation_total_amount);
          }
          if(const_var.BuildingPriceArrar['overhead_door_calculation']!=undefined)
          {
            excludeBuildingAmaount = parseFloat(excludeBuildingAmaount) + parseFloat(const_var.BuildingPriceArrar['overhead_door_calculation'].custom_overhead_total_amount);
          }  
          const_var.BuildingPriceArrar["custom_subTotal"] = convertToTwoDecimalNumber(parseFloat(excludeBuildingAmaount));
          if(const_var.BuildingPriceArrar['down_payment_total']!=undefined)
          {
            
            let excludeDownpaymentAmaount = 0;
            if(const_var.BuildingPriceArrar['insulation_calculation']!=undefined || const_var.BuildingPriceArrar['overhead_door_calculation']!=undefined){
              if(const_var.BuildingPriceArrar['insulation_calculation']!=undefined)
              {
                excludeDownpaymentAmaount = parseFloat(excludeDownpaymentAmaount) + parseFloat(const_var.BuildingPriceArrar['insulation_calculation'].custom_insulation_down_payment_total);
              }
              if(const_var.BuildingPriceArrar['overhead_door_calculation']!=undefined)
              {
                excludeDownpaymentAmaount = parseFloat(excludeDownpaymentAmaount) + parseFloat(const_var.BuildingPriceArrar['overhead_door_calculation'].custom_overhead_down_payment_total);
              }
              const_var.BuildingPriceArrar["custom_down_payment_total"] = convertToTwoDecimalNumber(parseFloat(excludeDownpaymentAmaount));
              

            }
            
          }
          
          
          
        }
        // console.log(const_var.stateManufacturerAcordingAPIDiscount,"const_var.stateManufacturerAcordingAPIDiscount['commissions'][params.m_s_n]",t_c)
        const_var.BuildingPriceArrar['new_down_payment_total'] = parseFloat(post_data['building'].down_payment_total);
        if(const_var.UpdatedPriceData.down_payment_discount_rate_Updated==undefined)
        {
            if(const_var.stateManufacturerAcordingAPIDiscount['discount'][params.m_s_n]!=undefined && const_var.stateManufacturerAcordingAPIDiscount['discount'][params.m_s_n].length>0 && const_var.stateManufacturerAcordingAPIDiscount['discount'][params.m_s_n].dealer_discount!='')
            {
                for(var i=0;i<const_var.stateManufacturerAcordingAPIDiscount['discount'][params.m_s_n].length;i++)
                {
                   if(post_data['building'].order_total >= parseInt(const_var.stateManufacturerAcordingAPIDiscount['discount'][params.m_s_n][i].from)  && post_data['building'].order_total <=parseInt(const_var.stateManufacturerAcordingAPIDiscount['discount'][params.m_s_n][i].to))
                   {
                        let percentage = const_var.stateManufacturerAcordingAPIDiscount['discount'][params.m_s_n][i].dealer_discount;
                        post_data['building'].down_payment_discount_rate = percentage;
                        post_data['building'].down_payment_discount_type = (const_var.stateManufacturerAcordingAPIDiscount['discount'][params.m_s_n][i].dealer_discount_in=="%")?"per":'amt';
                        const_var.UpdatedPriceData.down_payment_discount_type = post_data['building'].down_payment_discount_type;
                        post_data['building'].down_payment_discount_total = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):((parseFloat(post_data['building'].down_payment_total) * parseFloat(percentage ))/100).toFixed(2);
                        const_var.BuildingPriceArrar['down_payment_discount_total'] = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):parseFloat(parseFloat(const_var.BuildingPriceArrar['down_payment_total']) * parseFloat(percentage ))/100;
                        const_var.BuildingPriceArrar['new_down_payment_total'] = parseFloat(const_var.BuildingPriceArrar['down_payment_total']) - parseFloat(const_var.BuildingPriceArrar['down_payment_discount_total']);
                        //post_data['building'].down_payment_total = (parseInt(post_data['building'].down_payment_total) - parseInt(post_data['building'].down_payment_discount_total));
                        //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].down_payment_discount_total;
                   }else
                   {
                        if(post_data['building'].order_total > parseInt(const_var.stateManufacturerAcordingAPIDiscount['discount'][params.m_s_n][i].from)  && post_data['building'].order_total >parseInt(const_var.stateManufacturerAcordingAPIDiscount['discount'][params.m_s_n][i].to))
                        {
                            let percentage = 0;
                            post_data['building'].down_payment_discount_rate = percentage;
                            post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                            post_data['building'].down_payment_discount_total = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):((parseFloat(post_data['building'].down_payment_total) * parseFloat(percentage ))/100).toFixed(2);
                            const_var.BuildingPriceArrar['down_payment_discount_total'] = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):parseFloat(parseFloat(const_var.BuildingPriceArrar['down_payment_total']) * parseFloat(percentage ))/100;
                            const_var.BuildingPriceArrar['new_down_payment_total'] = parseFloat(const_var.BuildingPriceArrar['down_payment_total']) - parseFloat(const_var.BuildingPriceArrar['down_payment_discount_total']);
                        }else{
                            let percentage = 0;
                            post_data['building'].down_payment_discount_rate = percentage;
                            post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                            post_data['building'].down_payment_discount_total = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):((parseFloat(post_data['building'].down_payment_total) * parseFloat(percentage ))/100).toFixed(2);
                            const_var.BuildingPriceArrar['down_payment_discount_total'] = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):parseFloat(parseFloat(const_var.BuildingPriceArrar['down_payment_total']) * parseFloat(percentage ))/100;
                            const_var.BuildingPriceArrar['new_down_payment_total'] = parseFloat(const_var.BuildingPriceArrar['down_payment_total']) - parseFloat(const_var.BuildingPriceArrar['down_payment_discount_total']);
                        }
                   }
                }
            }else
            {
                let percentage = 0;
                post_data['building'].down_payment_discount_rate = percentage;
                post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
                post_data['building'].down_payment_discount_total = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):((parseFloat(post_data['building'].down_payment_total) * parseFloat(percentage ))/100).toFixed(2);
                const_var.BuildingPriceArrar['down_payment_discount_total'] = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(percentage):parseFloat(parseFloat(const_var.BuildingPriceArrar['down_payment_total']) * parseFloat(percentage ))/100;
                const_var.BuildingPriceArrar['new_down_payment_total'] = parseFloat(const_var.BuildingPriceArrar['down_payment_total']) - parseFloat(const_var.BuildingPriceArrar['down_payment_discount_total']);
                
            }
   
        }else
        {
            if(const_var.UpdatedPriceData.down_payment_discount_type==undefined)
            {
                post_data['building'].down_payment_discount_type = "per";
            }
            post_data['building'].down_payment_discount_total = (const_var.UpdatedPriceData.down_payment_discount_type=="amt")?const_var.UpdatedPriceData.down_payment_discount_rate:(parseFloat(post_data['building'].down_payment_total) * parseFloat(const_var.UpdatedPriceData.down_payment_discount_rate )/100).toFixed(2);
            post_data['building'].down_payment_discount_rate = const_var.UpdatedPriceData.down_payment_discount_rate;
            post_data['building'].down_payment_discount_rate_Updated = const_var.UpdatedPriceData.down_payment_discount_rate;
            post_data['building'].down_payment_discount_type = const_var.UpdatedPriceData.down_payment_discount_type;
            const_var.BuildingPriceArrar['down_payment_discount_total'] = (post_data['building'].down_payment_discount_type=="amt")?parseFloat(const_var.UpdatedPriceData.down_payment_discount_rate):parseFloat(parseFloat(const_var.BuildingPriceArrar['down_payment_total']) * parseFloat(const_var.UpdatedPriceData.down_payment_discount_rate ))/100;
            const_var.BuildingPriceArrar['new_down_payment_total'] = parseFloat(const_var.BuildingPriceArrar['down_payment_total']) - parseFloat(const_var.BuildingPriceArrar['down_payment_discount_total']);
            //post_data['building'].down_payment_total = (parseInt(post_data['building'].down_payment_total) - parseInt(post_data['building'].down_payment_discount_total));
            //post_data['building'].order_total = post_data['building'].order_total - post_data['building'].down_payment_discount_total;
        }
        if(post_data['building'].discount_type==undefined)
        {
            post_data['building'].discount_type = (const_var.UpdatedPriceData.discount_type!=undefined)?const_var.UpdatedPriceData.discount_type:"per";
        }
        if(post_data['building'].discount_rate ==undefined)
        {
            post_data['building'].discount_rate = (const_var.UpdatedPriceData.discount_rate!=undefined)?const_var.UpdatedPriceData.discount_rate:0;
        }
        if(post_data['building'].discount_amount ==undefined)
        {
            post_data['building'].discount_amount = (const_var.UpdatedPriceData.discount_amount!=undefined)?const_var.UpdatedPriceData.discount_amount:0;
        }

        if(post_data['building'].down_payment_discount_type==undefined)
        {
            post_data['building'].down_payment_discount_type = (const_var.UpdatedPriceData.down_payment_discount_type!=undefined)?const_var.UpdatedPriceData.down_payment_discount_type:"per";
        }
        if(post_data['building'].down_payment_discount_total ==undefined)
        {
            post_data['building'].down_payment_discount_total = (const_var.UpdatedPriceData.down_payment_discount_total!=undefined)?const_var.UpdatedPriceData.down_payment_discount_total:0;
        }
        if(post_data['building'].down_payment_discount_rate==undefined)
        {
            post_data['building'].down_payment_discount_rate = (const_var.UpdatedPriceData.down_payment_discount_rate!=undefined)?const_var.UpdatedPriceData.down_payment_discount_rate:0;
        }
        if(const_var.tax.type=="%")
        {
            const_var.tax.type = "per";
        }
        if(const_var.tax.type=="$")
        {
            const_var.tax.type = "amt";
        }
        post_data['building'].grand_total = parseFloat(post_data['building'].order_total);
        // This code is return for North Carolina SBS abd SFG manufacturer
        const_var.BuildingPriceArrar['labor_fee'] = 0;
        if(const_var.order_extra_items!=undefined){
          
            if(params.p_s_n == 29 && (params.m_s_n == 3 || params.m_s_n == 9)) {
                const_var.order_extra_items['order_permit_fee'] = 0;
                const_var.BuildingPriceArrar['labor_fee'] = parseFloat(const_var.order_extra_items['extra_labour']) + parseFloat(const_var.order_extra_items['order_permit_fee']);
                if(const_var.crmSetting.is_module_name == "inventory" && params.m_s_n == 3) { 
                    const_var.BuildingPriceArrar['labor_fee'] = parseFloat(const_var.order_extra_items['extra_labour']);
                } 
                if(const_var.order_extra_items.permit!=undefined && const_var.order_extra_items.permit == "yes"){
                    post_data['building'].sub_order_total = parseFloat(post_data['building'].sub_order_total) + parseFloat(const_var.BuildingPriceArrar['labor_fee'])
                }
            } else {
                const_var.BuildingPriceArrar['labor_fee'] = parseFloat(const_var.order_extra_items['extra_labour']);
                const_var.BuildingPriceArrar['order_permit_fee'] =  parseFloat(const_var.order_extra_items['order_permit_fee']);
            }
        } 

        // console.log(const_var.BuildingPriceArrar['order_total'],"post_data['building'].order_total", post_data['building'].order_total)
        // if(post_data['building'].down_payment_discount_total!=undefined && post_data['building'].down_payment_discount_total!=0)
        // {
        //     post_data['building'].grand_total = parseInt(post_data['building'].grand_total) - parseInt(post_data['building'].down_payment_discount_total);
        // }
        let newTaxArray = [];
        var taxCalculation = 0;
        if(const_var.tax.percentage!=0 && const_var.tax.percentage!=undefined)
        {
            taxCalculation = (const_var.tax.type=="per")?(taxCalculation + ((post_data['building'].sub_order_total * (const_var.tax.percentage))/100)).toFixed(2):parseFloat(taxCalculation +const_var.tax.percentage);
            const_var.tax.amount = (taxCalculation);
            const_var.tax.name =(const_var.tax.name=="" || const_var.tax.name==undefined)?'sales_tax':const_var.tax.name;
            //newTaxArray[const_var.MoreTaxinputs.length] = const_var.tax;
            post_data['building'].parentTax = const_var.tax;
            const_var.sendTaxarray.push(const_var.tax);
            //const_var.newTaxCalcuArray[const_var.tax.name] = const_var.tax.amount;
           // const_var.newTaxCalcuArray.push(const_var.tax);
        }

        var moretaxCalculation = 0;
        if(const_var.MoreTaxinputs!=undefined && const_var.MoreTaxinputs.length>0)
        {
            const_var.MoreTaxinputs.map((val, index) => {
                if(val.percentage=='')
                {
                    val.percentage = 0;
                }if(val.amount=='')
                {
                    val.amount = 0;
                }
                const_var.MoreTaxinputs[index].amount = (val.type=="per")?((post_data['building'].sub_order_total * (val.percentage))/100).toFixed(2):val.percentage ;
                //post_data['building'].tax_amount = moretaxCalculation;
                const_var.MoreTaxinputs[index].more_tax_amount = (val.type=="per")?((post_data['building'].sub_order_total * (val.percentage))/100).toFixed(2):val.percentage;
                moretaxCalculation = parseFloat(moretaxCalculation) + parseFloat(const_var.MoreTaxinputs[index].amount);
                const_var.MoreTaxinputs[index].name =(const_var.MoreTaxinputs[index].name=="" || const_var.MoreTaxinputs[index].name==undefined)?"sales_tax":const_var.MoreTaxinputs[index].name;
                const_var.sendTaxarray.push(const_var.MoreTaxinputs[index]);
            });
            post_data['building'].MoreTaxinputs = const_var.MoreTaxinputs;

            //const_var.newTaxCalcuArray.push(const_var.MoreTaxinputs);
        }
        
        post_data['building'].all_tax_amount = (const_var.tax.type=="per")?parseFloat(taxCalculation) + parseFloat(moretaxCalculation):parseFloat(taxCalculation) + parseFloat(moretaxCalculation);
        //console.log(const_var.newTaxCalcuArray,"const_var.newTaxCalcuArray")
        post_data['building'].tax_amount = (const_var.tax.type=="per")?parseFloat(taxCalculation):parseFloat(taxCalculation);
        post_data['building'].tax_zipcode = params.tax_zipcode;
        post_data['building'].tax_exempt = (params.tax_exempt==false)?0:1;
        if(post_data['building'].tax_exempt==true)
        {
            const_var.MoreTaxinputs = [];
            const_var.tax = { "percentage": 0, "type": "%", "name": 'sales_tax', "amount": 0 };
            post_data['building'].tax_amount = 0;
            post_data['building'].all_tax_amount = 0;
            taxCalculation = 0;
            moretaxCalculation = 0;
            const_var.sendTaxarray = [];

        }
        post_data['building'].tax = const_var.sendTaxarray;//{...newTaxArray,...const_var.MoreTaxinputs};
        if((const_var.BuildingPriceArrar['insulation_calculation']!=undefined || const_var.BuildingPriceArrar['overhead_door_calculation']!=undefined))
        {
            if(const_var.sendTaxarray.length>0)
            {
                Object.entries(post_data['building'].tax).map((val, key)=>{
                    let commonPrice = 0;
                      if(val[1].percentage!=undefined && val[1].percentage!=0)
                      {
                          if(const_var.BuildingPriceArrar['insulation_calculation']!=undefined)
                          {  
                             val[1].insulation_tax_amount = convertToTwoDecimalNumber(parseFloat((parseFloat(val[1].percentage) * parseFloat(const_var.BuildingPriceArrar['insulation_calculation'].custom_insulation_total_amount))/100));
                             post_data['building'].all_tax_amount = parseFloat(post_data['building'].all_tax_amount)+ parseFloat(val[1].insulation_tax_amount);
                          }
                          if(const_var.BuildingPriceArrar['overhead_door_calculation']!=undefined)
                          {  
                             val[1].overhead_tax_amount = convertToTwoDecimalNumber(parseFloat((parseFloat(val[1].percentage) * parseFloat(const_var.BuildingPriceArrar['overhead_door_calculation'].custom_overhead_total_amount))/100));
                             post_data['building'].all_tax_amount = parseFloat(post_data['building'].all_tax_amount)+ parseFloat(val[1].overhead_tax_amount);
                          }
                      }
                      
                })
            }
        }
        if(params.p_i_o==0 && params.insulation.leftLean.insulationId==0 && params.insulation.rightLean.insulationId==0 && params.insulation.frontLean.insulationId==0 && params.insulation.backLean.insulationId==0)
        {
            const_var.BuildingPriceArrar['insulation_calculation']= undefined;
        }
        // console.log(parseFloat(taxCalculation),parseFloat(moretaxCalculation),"moretaxCalculationmoretaxCalculation")

        post_data['building'].grand_total =  post_data['building'].grand_total + parseFloat(taxCalculation) + parseFloat(moretaxCalculation);
        
        
        const_var.BuildingPriceArrar['additional_charges'] = 0;
        
        if(const_var.card_processing_fee!=undefined && Object.keys(const_var.card_processing_fee).length>0 && const_var.card_processing_fee.is_edit==undefined && (const_var.crmSetting.is_Edit!=true || const_var.checkPickThisBuilding == true))
        {
            if(const_var.card_processing_fee.percentage_of=="base_price")
            {
                if(const_var.card_processing_fee.type=="%")
                {
                    const_var.order_extra_items['processing_fee'] = ((post_data['building'].roof_style_price * const_var.card_processing_fee.fee)/100).toFixed(2);
                }else
                {
                    const_var.order_extra_items['processing_fee'] = (parseFloat(const_var.card_processing_fee.fee)).toFixed(2);
                }
            }if(const_var.card_processing_fee.percentage_of=="building_amount")
            {
                if(const_var.card_processing_fee.type=="%")
                {
                    const_var.order_extra_items['processing_fee'] = ((post_data['building'].order_total * const_var.card_processing_fee.fee)/100).toFixed(2);
                }else
                {
                    const_var.order_extra_items['processing_fee'] = (parseFloat(const_var.card_processing_fee.fee)).toFixed(2);
                }
            }
            if(const_var.card_processing_fee.percentage_of=="dealer_deposit")
            {
                if(const_var.card_processing_fee.type=="%")
                {
                    const_var.order_extra_items['processing_fee'] = ((post_data['building'].dealer_deposit * const_var.card_processing_fee.fee)/100).toFixed(2);
                }else
                {
                    const_var.order_extra_items['processing_fee'] = (parseFloat(const_var.card_processing_fee.fee)).toFixed(2);
                }
            }
        }
        if( const_var.order_extra_items['permit'] == null || const_var.order_extra_items['order_permit_fee'] == undefined ||  const_var.crmSetting.is_module_name == "inventory"){
            const_var.order_extra_items['order_permit_fee'] = 0
        }
        if(const_var.order_extra_items!=undefined)
        {
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['equipment_rental']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['document_fee']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['order_processing_fee']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['delivery_fee']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['engineer_drawings']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['freight']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['extra_labour']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['grvy_value']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['concrete_work']);
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['ground_work']);
      
            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['order_permit_fee'])
          
            post_data['building'].grvy_value = parseFloat(const_var.order_extra_items['grvy_value']);
            const_var.order_extra_items['order_processing_fee'] = (const_var.order_extra_items['order_processing_fee']==undefined)?0:const_var.order_extra_items['order_processing_fee'];
            const_var.BuildingPriceArrar['grvy_value'] = post_data['building'].grvy_value;
            if(params.lift_type==true && data.side[0].lift_type!='')
            {
                post_data['building'].lift_type = params.lift_type;
                post_data['building'].lifttype_name = data.side[0].lift_type;
                post_data['building'].lifttype_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.lifttype_price_changed!=true)?(const_var.UpdatedPriceData.lifttype_price==undefined)?0:const_var.UpdatedPriceData.lifttype_price:data.side[0].lifttype_price;
                const_var.BuildingPriceArrar['additional_charges'] = parseFloat(const_var.BuildingPriceArrar['additional_charges'])+ parseFloat(post_data['building'].lifttype_price);
            }else{
                params.lifttype_price = 0;
                post_data['building'].lifttype_price = 0;
                const_var.BuildingPriceArrar['additional_charges'] = parseFloat(const_var.BuildingPriceArrar['additional_charges']) + parseFloat(post_data['building'].lifttype_price);
            }
            if(params.p_s_n == 29 && (params.m_s_n == 3 || params.m_s_n == 9)){
                // if(const_var.loginSession == false && const_var.stateManufacturerAcordingAPI!=undefined && const_var.stateManufacturerAcordingAPI[params.p_s_n]!=undefined && const_var.stateManufacturerAcordingAPI[params.p_s_n].is_processing_show_in_3d == false) {
                //     const_var.order_extra_items['order_processing_fee'] = 0
                // }
                // if(const_var.loginSession == false && const_var.stateManufacturerAcordingAPI!=undefined && const_var.stateManufacturerAcordingAPI[params.p_s_n]!=undefined && const_var.stateManufacturerAcordingAPI[params.p_s_n].is_document_show_in_3d == false) {
                //     const_var.order_extra_items['document_fee'] = 0
                // }
                const_var.BuildingPriceArrar['additional_charges'] = parseFloat(const_var.BuildingPriceArrar['additional_charges']) + parseFloat(const_var.order_extra_items['equipment_rental']) + parseFloat(const_var.order_extra_items['concrete_work']) + parseFloat(const_var.order_extra_items['ground_work']) + parseFloat(const_var.order_extra_items['document_fee']) + parseFloat(const_var.order_extra_items['order_processing_fee']) + parseFloat(const_var.order_extra_items['delivery_fee']) + parseFloat(const_var.order_extra_items['engineer_drawings'])+parseFloat(const_var.order_extra_items['freight']);

            }else{
             
                // if(const_var.loginSession == false && const_var.stateManufacturerAcordingAPI!=undefined && const_var.stateManufacturerAcordingAPI[params.p_s_n]!=undefined && const_var.stateManufacturerAcordingAPI[params.p_s_n].is_processing_show_in_3d == false) {
                //     const_var.order_extra_items['order_processing_fee'] = 0
                // }
                // if(const_var.loginSession == false && const_var.stateManufacturerAcordingAPI!=undefined && const_var.stateManufacturerAcordingAPI[params.p_s_n]!=undefined && const_var.stateManufacturerAcordingAPI[params.p_s_n].is_document_show_in_3d == false) {
                //     const_var.order_extra_items['document_fee'] = 0
                // }
                     
                const_var.BuildingPriceArrar['additional_charges'] = parseFloat(const_var.BuildingPriceArrar['additional_charges']) + parseFloat(const_var.order_extra_items['equipment_rental']) + parseFloat(const_var.order_extra_items['concrete_work']) + parseFloat(const_var.order_extra_items['ground_work']) + parseFloat(const_var.order_extra_items['document_fee']) + parseFloat(const_var.order_extra_items['order_processing_fee']) + parseFloat(const_var.order_extra_items['delivery_fee']) + parseFloat(const_var.order_extra_items['engineer_drawings'])+parseFloat(const_var.order_extra_items['freight'])+parseFloat(const_var.order_extra_items['extra_labour']) + parseFloat(const_var.order_extra_items['order_permit_fee']); 
            }
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]!=undefined && Object.keys(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]).length>0)
            {
                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable==0 )
                {
                        if(const_var.surcharge_amount_is_edit!=undefined && const_var.surcharge_amount_is_edit==true)
                        {
                            const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].is_edit = true;
                        }
                        if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].is_edit==undefined)
                        {
                            const_var.order_extra_items['surchargeFees'] = 0;
                            post_data['building'].surcharge_amount_type = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount_type;
                            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount_type=='per')
                            {
                                if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of=="building_amount")
                                {
                                    post_data['building'].surcharge_percentage_of = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of;
                                    CalculatesurchargeFees = parseFloat((parseFloat(const_var.BuildingPriceArrar['sub_order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount))/100).toFixed(2);
                                }else
                                {
                                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of=="basic_price")
                                    {
                                        post_data['building'].surcharge_percentage_of = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].percentage_of;
                                        CalculatesurchargeFees = parseFloat((parseFloat(post_data['building'].roof_style_price) + parseFloat(leantoPriceCalculation.totalBasePrice))*(parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount))/100).toFixed(2);
                                    }else
                                    {
                                        CalculatesurchargeFees = parseFloat((parseFloat(const_var.BuildingPriceArrar['sub_order_total'])*parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount))/100).toFixed(2);
                                    }
                                    //console.log(CalculatesurchargeFees,"CalculatesurchargeFees",const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount,const_var.BuildingPriceArrar['sub_order_total']);
                                }
                                post_data['building'].surcharge_calculate_amount = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount;
                            }else
                            {
                                // post_data['building'].surcharge_calculate_amount = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount;
                                // CalculatesurchargeFees = parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount);
                                post_data['building'].surcharge_calculate_amount = (const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount!=undefined)?const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount:0;
                                CalculatesurchargeFees = (const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount!=undefined)?parseFloat(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].amount):0;
                            }
                            CalculatesurchargeFees = (const_var.UpdatedPriceData.surcharge_amount!=undefined && (const_var.crmSetting.is_Edit==true && const_var.checkPickThisBuilding == false))?const_var.UpdatedPriceData.surcharge_amount:CalculatesurchargeFees;
                        }else
                        {
                            CalculatesurchargeFees = CalculatesurchargeFees;
                        }
                    post_data['building'].surcharge_taxable = (const_var.UpdatedPriceData.surcharge_taxable==undefined || const_var.UpdatedPriceData.surcharge_taxable==0)?const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable:const_var.UpdatedPriceData.surcharge_taxable;
                    if(const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable==0 && const_var.UpdatedPriceData.surcharge_taxable==1)
                    {
                        post_data['building'].surcharge_taxable = const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n].taxable;
                    }
                    CalculatesurchargeFees = CalculatesurchargeFees;//(const_var.UpdatedPriceData.surcharge_amount!=undefined && const_var.crmSetting.is_Edit==true)?const_var.UpdatedPriceData.surcharge_amount:CalculatesurchargeFees;
                    post_data['building'].surcharge_amount = CalculatesurchargeFees;
                    post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(CalculatesurchargeFees);
                    const_var.BuildingPriceArrar['additional_charges'] = parseFloat(const_var.BuildingPriceArrar['additional_charges']) + parseFloat(CalculatesurchargeFees);
                    if(const_var.order_extra_items['surchargeFees']==0)
                    {
                        const_var.order_extra_items['surchargeFees'] = parseFloat(CalculatesurchargeFees);
                    }
                   
                }
                else
                {   
                    if( const_var.UpdatedPriceData.surcharge_taxable!=undefined)
                    {
                        if(const_var.UpdatedPriceData.surcharge_taxable==0)
                        {
                            //CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                            CalculatesurchargeFees = (CalculatesurchargeFees!=undefined)?parseFloat(CalculatesurchargeFees):0;
                            post_data['building'].surcharge_taxable = const_var.UpdatedPriceData.surcharge_taxable;
                            post_data['building'].surcharge_amount = parseFloat(CalculatesurchargeFees);
                            post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(CalculatesurchargeFees);
                            const_var.BuildingPriceArrar['surcharge_amount'] = 0;
                            const_var.BuildingPriceArrar['additional_charges'] = parseFloat(const_var.BuildingPriceArrar['additional_charges']) + parseFloat(CalculatesurchargeFees);
                        
                        }
                    }
                }
                
            }
            if(const_var.stateManufacturerAcordingAPIDiscount['surcharge']!=undefined && const_var.stateManufacturerAcordingAPIDiscount['surcharge'][params.m_s_n]==undefined )
            {
                if(const_var.surcharge_amount_is_edit==false && const_var.UpdatedPriceData.surcharge_amount==undefined)
                {
                    CalculatesurchargeFees = 0;
                    const_var.order_extra_items['surchargeFees'] = parseFloat(CalculatesurchargeFees);
                }
                CalculatesurchargeFees = parseFloat(CalculatesurchargeFees);
                post_data['building'].surcharge_taxable = 0;
                post_data['building'].surcharge_amount = CalculatesurchargeFees;
                post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(CalculatesurchargeFees);
                const_var.BuildingPriceArrar['additional_charges'] = parseFloat(const_var.BuildingPriceArrar['additional_charges']) + parseFloat(CalculatesurchargeFees);
            }
            if(const_var.order_extra_items['dont_show_processing_fee_pdf']!=undefined && const_var.order_extra_items['dont_show_processing_fee_pdf'] == "1")
            {
                const_var.BuildingPriceArrar['new_down_payment_total'] = const_var.BuildingPriceArrar['new_down_payment_total']+parseFloat(const_var.order_extra_items['processing_fee']);
                //const_var.BuildingPriceArrar['new_sub_order_total'] = const_var.BuildingPriceArrar['new_sub_order_total']+parseFloat(const_var.order_extra_items['processing_fee']);
                const_var.BuildingPriceArrar['processing_fee'] = parseFloat(const_var.order_extra_items['processing_fee']);
                post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['processing_fee']);
            }
            if(const_var.order_extra_items['dont_show_processing_fee_pdf']!=undefined && const_var.order_extra_items['dont_show_processing_fee_pdf'] == "2")
            {
                //const_var.BuildingPriceArrar['new_down_payment_total'] = const_var.BuildingPriceArrar['new_down_payment_total']+parseFloat(const_var.order_extra_items['processing_fee']);
                //const_var.BuildingPriceArrar['new_sub_order_total'] = const_var.BuildingPriceArrar['new_sub_order_total']+parseFloat(const_var.order_extra_items['processing_fee']);
                const_var.BuildingPriceArrar['processing_fee'] = parseFloat(const_var.order_extra_items['processing_fee']);
                //post_data['building'].grand_total = parseFloat(post_data['building'].grand_total) + parseFloat(const_var.order_extra_items['processing_fee']);
            }
            if(post_data['building'].discount_amount!=undefined && post_data['building'].discount_amount!=0)
            {
                post_data['building'].has_grvy = 1;
            }else
            {
                post_data['building'].has_grvy = 0;
            }
            const_var.BuildingPriceArrar['has_grvy'] = post_data['building'].has_grvy;
            const_var.order_extra_items.has_grvy = post_data['building'].has_grvy;
            post_data['building'].order_extra_items = const_var.order_extra_items;
        }
        post_data['building'].edit_truss_name = (const_var.c_m_a[params.p_b_t].trussType!=undefined && const_var.c_m_a[params.p_b_t].trussType.length>0) ? const_var.c_m_a[params.p_b_t].trussType[0].name.replace(/[0-9]/g, '') : params['trussType'];
        if((params.m_s_n==3 || params.m_s_n==9) && params.p_w >= 32)
        {
            let filterDataTruss = [];
            if((params.m_s_n==3 || params.m_s_n==9) && const_var.a_p_d_a.truss_name !== undefined && const_var.a_p_d_a.truss_name.length > 1)
            {
                filterDataTruss = const_var.a_p_d_a.truss_name.filter(data=>data.name.includes(post_data['building'].edit_truss_name));
                if(filterDataTruss.length>0)
                {
                    post_data['building'].truss_type_name = filterDataTruss[0].is_default==true?'Standard Truss':'High Truss';
                }
            }
        }

        post_data['building'].payment_mode = const_var.paymentOptionObj[params.paymentmode];
        // console.log(const_var.paymentOptionObj[params.paymentmode],"const_var.paymentOptionObj[params.paymentmode]",params.paymentmode)
        //post_data['building'].due_upon_installation = (parseFloat(const_var.BuildingPriceArrar['new_sub_order_total']) + parseFloat(const_var.BuildingPriceArrar['custom_subTotal']) + parseFloat(const_var.BuildingPriceArrar['labor_fee']) + parseFloat(const_var.BuildingPriceArrar['additional_charges']) + parseFloat(post_data['building'].all_tax_amount));
        if(params.p_s_n == 29 && (params.m_s_n == 3 || params.m_s_n == 9)){
          post_data['building'].due_upon_installation = (parseFloat(const_var.BuildingPriceArrar['new_sub_order_total']) + parseFloat(const_var.BuildingPriceArrar['custom_subTotal']) + parseFloat(const_var.BuildingPriceArrar['labor_fee']) + parseFloat(const_var.BuildingPriceArrar['additional_charges']) + parseFloat(post_data['building'].all_tax_amount));
        }else{
            post_data['building'].due_upon_installation = (parseFloat(const_var.BuildingPriceArrar['new_sub_order_total']) + parseFloat(const_var.BuildingPriceArrar['custom_subTotal']) + parseFloat(const_var.BuildingPriceArrar['additional_charges']) + parseFloat(post_data['building'].all_tax_amount));
        }
        const_var.BuildingPriceArrar['grand_total'] = post_data['building'].grand_total + post_data['building'].tax_amount;
        post_data['building'].grand_total = (post_data['building'].due_upon_installation + const_var.BuildingPriceArrar['new_down_payment_total']+ const_var.BuildingPriceArrar["custom_down_payment_total"] + const_var.BuildingPriceArrar['grvy_value']);
        post_data['building'].dealer_deposit = const_var.BuildingPriceArrar['new_down_payment_total'] + const_var.BuildingPriceArrar['grvy_value'];
        post_data['building']['extra_items'] = extra_items;
        post_data['building']['entry_points'] = const_var.entry_points;
        post_data['building']['hide_price_calculation'] = const_var.hide_price_calculation;
        const_var.MainBuilingImage = const_var.renderer.domElement.toDataURL("image/jpeg");
        var newJsonData = const_var.crmSetting.pre_quote_form == true && const_var.loginSession == false && const_var.preQuoteApiCalled == true && const_var.preQuoteError == false ? {...const_var.post_data} : {};
        newJsonData['building'] = {...const_var.order_extra_items,...post_data['building']};
        newJsonData.building_total = t_c;
        const_var.post_data = newJsonData;
        const_var.UpdatedPriceData = post_data['building'];
        const_var.UpdatedPriceData.elements = [];
        //const_var.post_data = const_var.order_extra_items
        const_var.post_data = {...const_var.post_data,...const_var.LeadCustomerData};
        const_var.post_data.custom_building = (const_var.b_o_J_1[params.p_b_t]!="Custom Buildings")?0:1;
        // console.log(post_data['building'],"post_data['building']",params.DoorLocOnEdit)
        filtterArrayElements();
        for(var i=(post_data['building'].extra_items.length-1);i>=0;i--)
        {
            const_var.UpdatedPriceData['elements'][post_data['building'].extra_items[i].item_name.toString()] =post_data['building'].extra_items[i];
        }
        //CpByPost();        
    }
 export const calculateDoorComponentPrice = (flag,indexVal,chkVal)=>
 {
    //console.log(flag,indexVal,chkVal,"flagflagflag")
    if(flag==true && const_var.entry_points.length>0)
    {
        let value = const_var.entry_points[indexVal];
        // console.log(flag,"flagflagflag",value)
            let dataPriceC = 0;
            //console.log(const_var.BuildingPriceArrar['Component_total'],dataPriceC,const_var.BuildingPriceArrar['order_total'],"onst_var.BuildingPriceArrar['Component_total']")
                // if(chkVal==undefined)
                // {
                //    const_var.BuildingPriceArrar['Component_total'] = const_var.BuildingPriceArrar['Component_total']!=undefined?parseFloat(const_var.BuildingPriceArrar['Component_total'])- parseFloat(parseFloat(value.entry_price)):0; 
                // }
                dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_price);
                //console.log(value,"valuevaluevalue")
                if(value.entry_header_seal==true)
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_header_seal_price);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }

                if(value.entry_trim_kit==true)
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_trim_kit_price);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }

                if(value.entry_chain_hoist==true)
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_chain_hoist_price);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }

                if(value.entry_automatic_openers==true)
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_automatic_openers_price);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }
                dataPriceC =  parseFloat(dataPriceC) + parseFloat((value.entry_garageDoor_color_price==undefined)?0:Number(value.entry_garageDoor_color_price));
                //console.log(const_var.BuildingPriceArrar['Component_total'],dataPriceC,const_var.BuildingPriceArrar['order_total'],"onst_var.BuildingPriceArrar['Component_total']")

                const_var.BuildingPriceArrar['Component_total'] = const_var.BuildingPriceArrar['Component_total']!=undefined?parseFloat(const_var.BuildingPriceArrar['Component_total'])+ parseFloat(dataPriceC):0+parseFloat(dataPriceC);
                //console.log(const_var.BuildingPriceArrar['Component_total'],dataPriceC,const_var.BuildingPriceArrar['order_total'],"onst_var.BuildingPriceArrar['Component_total']")
                if(chkVal!=undefined)
                {
                    //console.log(const_var.BuildingPriceArrar['Component_total'],dataPriceC,const_var.BuildingPriceArrar['order_total'],"onst_var.BuildingPriceArrar['Component_total']")
                    const_var.BuildingPriceArrar['order_total'] = const_var.BuildingPriceArrar['order_total']!=undefined? parseFloat(const_var.BuildingPriceArrar['order_total'])+ parseFloat(dataPriceC):const_var.BuildingPriceArrar['order_total']+0;
                    const_var.post_data.building.order_total = parseFloat(const_var.post_data.building.order_total) +  parseFloat(dataPriceC);
                }
                return parseFloat(const_var.BuildingPriceArrar['Component_total']);
           //}
                
            // console.log(t_c,"t_c5")
    }else{
        if(const_var.entry_points.length>0)
        {
            let dataPriceC = 0;
            const_var.entry_points.map((value,key)=>{
                // console.log(value.entry_price,t_c,"const_var.entry_points.length")
                dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_price);
                // console.log(t_c,"dataPriceC",dataPriceC)
                if(value.entry_header_seal==true)
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_header_seal_price);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }

                if(value.entry_trim_kit==true)
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_trim_kit_price);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }

                if(value.entry_chain_hoist==true)
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_chain_hoist_price);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }

                if(value.entry_automatic_openers==true)
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(value.entry_automatic_openers_price);
                }else
                {
                    dataPriceC =  parseFloat(dataPriceC) + parseFloat(0);
                }
                dataPriceC =  parseFloat(dataPriceC) + parseFloat((value.entry_garageDoor_color_price==undefined)?0:Number(value.entry_garageDoor_color_price));
                
            })
            const_var.BuildingPriceArrar['Component_total'] = const_var.BuildingPriceArrar['Component_total']!=undefined?parseFloat(const_var.BuildingPriceArrar['Component_total']) + parseFloat(dataPriceC):0+parseFloat(dataPriceC);
            return parseFloat(dataPriceC)
            // console.log(t_c,"t_c5")
        }else{
            return parseFloat(0)
        }
    }
    
    
 }   
 export const filtterArrayElements = ()=>
    {
        var Leantoresult = [];
        if((const_var.post_data.building!=undefined))
        {
          Leantoresult = const_var.UpdatedPriceData.leanto.filter(function(item, pos, self) {
           return self.indexOf(item) == pos;
          })
        }
        const_var.UpdatedPriceData.leanto = Leantoresult;
    }
    export const cPforFLeanOnly = (data,objIndex,newDW) => 
    {       let t_c_b = 0;
            let b = {};
            if(const_var.UpdatedPriceData.leanto==undefined)
            {
                const_var.UpdatedPriceData.leanto = [];
            }
            // console.log(data,"datatatatat",newDW)
            if(params.add_front_lean==true)
            {
                removeDataFromArray(3);
                if(newDW!=undefined)
                {
                   const_var.UpdatedPriceData.leanto.push(newDW); 
                }
            let UpdatePriceRecord = false;
            let frontLeanData = "";
                // console.log(const_var.c_f_aCer,params.p_e_i,"params.p_e_iparams.p_e_i")
            if(const_var.c_f_aCer[params.p_e_i]!=undefined)
            {
                params.leanF_p_e_i = const_var.c_f_aCer[params.p_e_i].name;
            }else
            {
                params.leanF_p_e_i = (params.p_e_i=="Select")?'':params.p_e_i;
            }
            
            b = {"leanto_type":3,"width": params.leanF_p_w,"height": params.leanF_p_h,'length':params.leanF_p_d,"leanto_drop":"","front_wall": ConvStr(params.p_b_c_b_f_f),"back_wall": ConvStr(params.p_b_c_b_f_b),"side_wall": ConvStr(params.p_b_c_b_f_l),"front_wall_price":0,"back_wall_price":0,"side_wall_price":0,"front_wall_vertical":params.p_v_w,"back_wall_vertical":params.p_v_w,"side_wall_vertical":params.p_v_w,"certificate":const_var.makeCertificateArrayFront[params.leanF_p_e_i]};
            //a.concat(b);
            
            
            var data = data;
            var mapVal = const_var.map[params.p_r_s];
            var CalCulateRoofBasePrice = 0;
            var CalCulateRoofEndClosePrice = 0;
            var CalCulateRoofEndGablePrice = 0;
            var CalCulateRoofUtilityEndPrice =0;

            if(params.add_storage_check_front==true)
            {
                data.side = data.side;
                data.panel = data.panel;
            }else
            {
                data.side = (data.full_length_side!=undefined)?data.full_length_side:data.side;
                data.panel = (data.full_length_panel!=undefined)?data.full_length_panel:data.panel;
            }
            if(const_var.UpdatedPriceData.leanto.length>0)
            {
                // console.log(const_var.UpdatedPriceData.leanto,"const_var.UpdatedPriceData.leanto")
                let leantoData = const_var.UpdatedPriceData.leanto.filter(data=>data.leanto_type==3);
                if(leantoData.length>0)
                {
                    UpdatePriceRecord = true;
                    frontLeanData = leantoData[0];
                }

            }
            // console.log(const_var.UpdatedPriceData.front_lean_roof_style_price_changed,"const_var.UpdatedPriceData.front_lean_roof_style_price_changed",const_var.g_v)
            for(var i=0;i< data.base.length;i++)
            {
                 
                if(const_var.g_v==data.base[i].gauge)
                {
                    b.basic_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_roof_style_price_changed!=true)?frontLeanData.basic_price:(data.base[i][mapVal]);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                    CalCulateRoofBasePrice = b.basic_price;
                }
            }

                b.wrappedLength = 0;
                const_var.lengthData.frontLean.porchLength = 0;
            if(params.add_left_front_lean_porch==true )
            {
                b.porch = {'type':'front','length':params.lean_p_w+params.leanF_p_d}
                b.wrappedLength = params.lean_p_w + params.leanF_p_d
                const_var.lengthData.frontLean.porchLength = params.lean_p_w;
            }if(params.add_right_front_lean_porch==true )
            {
                b.porch = {'type':'front','length':params.leanR_p_w+params.leanF_p_d}
                b.wrappedLength = params.leanR_p_w + params.leanF_p_d
                const_var.lengthData.frontLean.porchLength = params.leanR_p_w;
            }if(params.add_right_front_lean_porch==true && params.add_left_front_lean_porch==true)
            {
                b.porch = {'type':'front','length':params.leanR_p_w+params.lean_p_w+params.leanF_p_d}
                b.wrappedLength = params.leanR_p_w + params.lean_p_w + params.leanF_p_d
                const_var.lengthData.frontLean.porchLength = params.lean_p_w + params.leanR_p_w;
            }


            let heightFullData = (data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side:undefined;
           b.lean_has_double_leg = params.leanF_p_e_l;
           b.lean_has_double_leg_name = const_var.leanFHasDoublelegName;
        //    b.legstype = const_var.leanFLegstype;
           if(const_var.g_v==14)
            {
                if(heightFullData[0].double_leg_baserail_cost!=0 && params.leanF_p_e_l==true)
                {
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_height_price_changed!=true)?frontLeanData.height_price:((heightFullData[0].double_leg_baserail_cost!=0)?(heightFullData[0].double_leg_baserail_cost):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    // b.leanF_has_double_leg_price = b.height_price;
                    // console.log("leanF_has_double_leg_price 11");

                }else{
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_height_price_changed!=true)?frontLeanData.height_price:(heightFullData[0].leg_height_cost);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    // b.leanF_has_double_leg_price = b.height_price;
                    // console.log("leanF_has_double_leg_price 22");

                }
            }
            if(const_var.g_v==12)
            {
                if(params.leanF_p_e_l==true)
                {
                    if(heightFullData[0].double_leg_baserail_cost_12 ==0 && heightFullData[0].double_leg_baserail_cost==0)
                    {
                      b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_height_price_changed!=true)?frontLeanData.height_price:((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }else
                    {
                      b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_height_price_changed!=true)?frontLeanData.height_price:((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].double_leg_baserail_cost));    
                      t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }
                }else{
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_height_price_changed!=true)?frontLeanData.height_price:((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                } 
            }

            if(params.insulation.frontLean.insulationId != 0) {
                if (params.add_front_lean && data != "" && const_var.insulationArrayForLeantoFront.length>0 && const_var.insulationArrayForLeantoFront[params.insulation.frontLean.insulationId] != undefined) {
                    const insulationRes = utlis.calculateInsulation(const_var.insulationArrayForLeantoFront[params.insulation.frontLean.insulationId], params.insulation.frontLean.fullBuilding, params.insulation.frontLean.roofOnly, 'frontLean', params.add_storage_check_front, params.p_b_c_b_f_l, params.p_b_c_b_f_f, params.p_b_c_b_f_b );   
                    
                    b.insulation = insulationRes.insulation;
                    b.insulation_price = (UpdatePriceRecord && const_var.UpdatedPriceData.front_lean_insulation_price_changed!=true)?frontLeanData.insulation_price:convertToTwoDecimalNumber(insulationRes.insulationPrice);
                    b.insulation_type = const_var.insulationArrayForLeantoFront[params.insulation.frontLean.insulationId];
                    let chkForInsulationPrice = utlis.commonFunctionForInsulationCalculations(b.insulation_price);
                    if(chkForInsulationPrice!=true)
                    {
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                    }
                    //t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                }
            } else {
               b.insulation_price = 0;
            }

            // b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_height_price_changed!=true)?frontLeanData.height_price:(data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side[0].leg_height_cost:0;
            // t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
            if(params.p_b_c_b_f_f=="Gable")
            {
                var ShowPrice = "";
                if(params.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(params.leanF_p_e_i!="" && params.leanF_p_e_i!="other" && params.leanF_p_e_i!="0" && const_var.makeCertificateArrayFront[params.leanF_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)):(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_front_wall_price_changed!=true)?frontLeanData.front_wall_price:(((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified)));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_front_wall_price_changed!=true)?frontLeanData.front_wall_price:((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(params.leanF_p_e_i!="" && params.leanF_p_e_i!="other" && params.leanF_p_e_i!="0" && const_var.makeCertificateArrayFront[params.leanF_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_front_wall_price_changed!=true)?frontLeanData.front_wall_price:((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_front_wall_price_changed!=true)?frontLeanData.front_wall_price:((data.gable_end[0].uncertified));
                    }
                }
                b.front_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndGablePrice = b.front_wall_price;
                //b.back_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
            }if(params.p_b_c_b_f_b=="Gable" && params.add_storage_check_front!=true)
            {
                var ShowPrice = "";
                if(params.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(params.leanF_p_e_i!="" && params.leanF_p_e_i!="other" && params.leanF_p_e_i!="0" && const_var.makeCertificateArrayFront[params.leanF_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)) :(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_back_wall_price_changed!=true)?frontLeanData.back_wall_price:(((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified)));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_back_wall_price_changed!=true)?frontLeanData.back_wall_price:((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(params.leanF_p_e_i!="" && params.leanF_p_e_i!="other" && params.leanF_p_e_i!="0" && const_var.makeCertificateArrayFront[params.leanF_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_back_wall_price_changed!=true)?frontLeanData.back_wall_price:((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_back_wall_price_changed!=true)?frontLeanData.back_wall_price:((data.gable_end[0].uncertified));
                    }
                }  
                //b.front_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                b.back_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndGablePrice = CalCulateRoofEndGablePrice + b.back_wall_price;
            }
            if(params.p_b_c_b_f_f=="Half_Close")
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_front_wall_price_changed!=true)?frontLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(params.p_b_c_b_f_f=="One_Fourth_Close")
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_front_wall_price_changed!=true)?frontLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(params.p_b_c_b_f_f=="Three_Fourth_Close")
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_front_wall_price_changed!=true)?frontLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }
            if(params.p_b_c_b_f_f=="Close")
            {
                // console.log(params.p_b_c_b_f_f,"params.p_b_c_b_f_f");
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_front_wall_price_changed!=true)?frontLeanData.front_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber(((data.end[0].vertical_ends_cost) + (data.end[0].end_close_cost))):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndClosePrice = b.front_wall_price;
                //b.back_wall_price  = (params.p_v_w==true )?(((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost)):(data.end[0].end_close_cost);
            }
            // console.log(params.p_b_c_b_f_f,"params.p_b_c_b_f_f");
            if(params.p_b_c_b_f_b=="Half_Close")
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_back_wall_price_changed!=true)?frontLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(params.p_b_c_b_f_b=="One_Fourth_Close")
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_back_wall_price_changed!=true)?frontLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(params.p_b_c_b_f_b=="Three_Fourth_Close")
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_back_wall_price_changed!=true)?frontLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }
            if(params.p_b_c_b_f_b=="Close" && params.add_storage_check_front!=true)
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_back_wall_price_changed!=true)?frontLeanData.back_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber(((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost)):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndClosePrice = CalCulateRoofEndClosePrice + b.back_wall_price;
            }if(params.p_b_c_b_f_l=="Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_left_wall_price_changed!=true)?frontLeanData.side_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber((data.side[0].vertical_side_cost)+(data.side[0].side_close_cost)):(data.side[0].side_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            }
            if(params.p_b_c_b_f_l=="Half_Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_left_wall_price_changed!=true)?frontLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].half_vertical_side_cost)+(data.side[0].half_side_close_cost)).toFixed(2):(data.side[0].half_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(params.p_b_c_b_f_l=="One_Fourth_Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_left_wall_price_changed!=true)?frontLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].one_fourth_vertical_side_cost)+(data.side[0].one_fourth_side_close_cost)).toFixed(2):(data.side[0].one_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(params.p_b_c_b_f_l=="Three_Fourth_Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_left_wall_price_changed!=true)?frontLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].three_fourth_vertical_side_cost)+(data.side[0].three_fourth_side_close_cost)).toFixed(2):(data.side[0].three_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }
            if(params.p_b_c_b_f_l!=="Close" && params.p_b_c_b_f_l!=="Open" && params.p_b_c_b_f_l!="Half_Close" && params.p_b_c_b_f_l!="One_Fourth_Close" && params.p_b_c_b_f_l!="Three_Fourth_Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_left_wall_price_changed!=true)?frontLeanData.side_wall_price:(params.p_v_w==true )?(data.panel[0].vertical_panel_cost * params.p_b_c_b_f_l):(data.panel[0].cost * params.p_b_c_b_f_l);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            } 
            
            if(params.add_storage_check_front==true && data.utility_side.length>0)
            {   
                if (params.p_f_w != "Close" /* && (!params.p_u_c || !params.cB_addStorage_check_left || !params.cB_addStorage_check_right) */ ) {
                    b.utility_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_utility_price_changed!=true)?frontLeanData.utility_price:(params.p_v_w==true)?((data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)).toFixed(2):((data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)).toFixed(2);
                } else {
                    b.utility_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_utility_price_changed!=true)?frontLeanData.utility_price:(params.p_v_w==true)?((data.utility_side[0].vertical_side_cost)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2)).toFixed(2):((data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2)).toFixed(2);
                }
     
                t_c_b = parseFloat(t_c_b) + parseFloat(b.utility_price);
               b.utility_length = params.add_storage_front;
               b.has_utility = true;
               b.utility_vertical = (params.p_v_w)?true:false;
               b.utility_on_centers = (const_var.DistanceArr[params.p_b_t][params.p_r_s]==undefined)?5:const_var.DistanceArr[params.p_b_t][params.p_r_s];
               CalCulateRoofUtilityEndPrice = parseFloat(b.utility_price); 
            }
            if(const_var.b_r_p_l_to_a.length > 0 && const_var.b_r_p_l_to_a[params.b_l_t_r_pF]!=undefined)
            {            
                if(const_var.b_r_p_l_to_a[params.b_l_t_r_pF].cost_type == "%")
                {
                    // console.log(const_var.b_r_p_l_to_a, const_var.b_r_p_l_to_a[params.b_l_t_r_pF] );
                var splitVal = (const_var.b_r_p_l_to_a[params.b_l_t_r_pF].percentage_of!=undefined && const_var.b_r_p_l_to_a[params.b_l_t_r_pF].percentage_of!=0)?const_var.b_r_p_l_to_a[params.b_l_t_r_pF].percentage_of.split(","):0;
                var splval = 0;
                if(splitVal!=0)
                {
                    if(splitVal.includes("1")!=false)
                    {
                        splval = splval + CalCulateRoofBasePrice;
                    }if(splitVal.includes("2")!=false)
                    {
                        if(CalCulateRoofUtilityEndPrice!=0)
                        {
                            splval = splval + CalCulateRoofUtilityEndPrice;
                        }
                        splval = splval + CalCulateRoofEndClosePrice;
                    }if(splitVal.includes("3")!=false)
                    {
                        splval = splval + CalCulateRoofEndGablePrice;
                    }
                }else
                {
                    splval = splval + CalCulateRoofBasePrice;
                }
                // console.log(splval,"const_var.b_r_p_l_to_a[params.b_l_t_r_pF]",const_var.b_r_p_l_to_a[params.b_l_t_r_pF])
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_roof_pitch_price_changed!=true)?frontLeanData.roof_pitch_price:(const_var.b_r_p_l_to_a[params.b_l_t_r_pF])?(splval * const_var.b_r_p_l_to_a[params.b_l_t_r_pF].cost / 100):0;
                    b.roof_pitch = const_var.b_r_p_l_to_a[params.b_l_t_r_pF].roof_pitch;
                    b.roof_pitch_name = const_var.b_r_p_l_to_a[params.b_l_t_r_pF].roof_pitch;
                    b.roof_pitch_price = finalCertPrice
                    t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);              
                }
                else
                {
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.front_lean_roof_pitch_price_changed!=true)?frontLeanData.roof_pitch_price:(const_var.b_r_p_l_to_a[params.b_l_t_r_pF])?const_var.b_r_p_l_to_a[params.b_l_t_r_pF].cost:0;
                    t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                    b.roof_pitch = const_var.b_r_p_l_to_a[params.b_l_t_r_pF].roof_pitch;
                    b.roof_pitch_name = const_var.b_r_p_l_to_a[params.b_l_t_r_pF].roof_pitch;
                    b.roof_pitch_price = finalCertPrice;                
                }
            }else{
           
                b.roof_pitch = "3/12";
                b.roof_pitch_name = "3/12";
                b.roof_pitch_price = 0;   
            }
            if(const_var.c_f_aCer[params.p_e_i]!=undefined &&  params.p_e_i!= "" && params.p_e_i!= "Select" &&  params.leanF_p_e_i!="" && params.leanF_p_e_i!="0" && params.leanF_p_e_i!="other")
            {
                if(params.p_i_s=="1")
                {
                    if( Object.keys(const_var.makeCertificateArrayFront).length > 0 && const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of!=undefined && const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?frontLeanData.certificate_price:(const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of_cost)?(t_c_b * const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?frontLeanData.certificate_price:(const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                    }else{
                        var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?frontLeanData.certificate_price:(const_var.makeCertificateArrayFront[params.leanF_p_e_i].certification_concrete_cost)?const_var.makeCertificateArrayFront[params.leanF_p_e_i].certification_concrete_cost:0;
                        //t_c_b = parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price = finalCertPrice;
                    }
                }else{
                    if(const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of!=undefined && const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?frontLeanData.certificate_price:(const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of_cost)?(t_c_b * const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?frontLeanData.certificate_price:(const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.makeCertificateArrayFront[params.leanF_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                        
                        //console.log(b.certificate_price,"b.certificate_price",b.certificate_price * certVal);
                    }else
                    {
                        var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?frontLeanData.certificate_price:(const_var.makeCertificateArrayFront[params.leanF_p_e_i].cost)?const_var.makeCertificateArrayFront[params.leanF_p_e_i].cost:0;
                        //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price =finalCertPrice;
                    }
                }
            }
            if(params.leanF_p_e_i=="other")
            {
                b.certificate = {'gauge': 0,'certified': 1,'has_double_leg': 0,'has_ladder_leg': 0,'has_other_leg': 0,'height': 0,'id': -1,'cost':0,'is_default': "no",'length': 0,'map_id': 0,'name': "Other"};
                b.certificate_other_name = (params.leanF_p_e_i_other!='')?params.leanF_p_e_i_other:'Other';
                b.certificate_price  = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?frontLeanData.certificate_price:0;
                //t_c_b =  parseFloat(t_c_b) + parseFloat(b.certificate_price);
            }
            
        if(params.continous_left_lean==true)
        {
            b.continous_lean = true;
        }else
        {
            b.continous_lean = false;
        }
      
        b.pricing_data =  data;
        
        b.t_c_b = parseFloat(t_c_b);
        const_var.leanto.push(b);
        // console.log(const_var.leanto,"const_var.leanto")
        const_var.UpdatedPriceData.leanto.push(b);
        }
        else
        {
            removeDataFromArray(3);
    
        }
        
        cP(const_var.a_p_d_a,true);
        
    }  
    export const cPforBLeanOnly = (data,objIndex,newDW) => 
    {       let t_c_b = 0;
            let b = {};
            if(const_var.UpdatedPriceData.leanto==undefined)
            {
                const_var.UpdatedPriceData.leanto = [];
            }
            // console.log(data,"datatatatat")
            if(params.add_back_lean==true)
            {
                removeDataFromArray(4);
                if(newDW!=undefined)
                {
                   const_var.UpdatedPriceData.leanto.push(newDW); 
                }
            let UpdatePriceRecord = false;
            let backLeanData = "";

            if(const_var.c_f_aCer[params.p_e_i]!=undefined)
            {
                params.leanB_p_e_i = const_var.c_f_aCer[params.p_e_i].name;
            }else
            {
                params.leanB_p_e_i = (params.p_e_i=="Select")?'':params.p_e_i;
            }
            
            b = {"leanto_type":4,"width": params.leanB_p_w,"height": params.leanB_p_h,'length':params.leanB_p_d,"leanto_drop":"","front_wall": ConvStr(params.p_b_c_b_b_f),"back_wall": ConvStr(params.p_b_c_b_b_b),"side_wall": ConvStr(params.p_b_c_b_b_l),"front_wall_price":0,"back_wall_price":0,"side_wall_price":0,"front_wall_vertical":params.p_v_w,"back_wall_vertical":params.p_v_w,"side_wall_vertical":params.p_v_w,"certificate":const_var.makeCertificateArrayBack[params.leanB_p_e_i]};
            //a.concat(b);
            
            
            var data = data;
            var mapVal = const_var.map[params.p_r_s];
            var CalCulateRoofBasePrice = 0;
            var CalCulateRoofEndClosePrice = 0;
            var CalCulateRoofEndGablePrice = 0;
            var CalCulateRoofUtilityEndPrice =0;

            if(params.add_storage_check_back==true)
            {
                data.side = data.side;
                data.panel = data.panel;
            }else
            {
                data.side = (data.full_length_side!=undefined)?data.full_length_side:data.side;
                data.panel = (data.full_length_panel!=undefined)?data.full_length_panel:data.panel;
            }
            if(const_var.UpdatedPriceData.leanto.length>0)
            {
                let leantoData = const_var.UpdatedPriceData.leanto.filter(data=>data.leanto_type==4);
                if(leantoData.length>0)
                {
                    UpdatePriceRecord = true;
                    backLeanData = leantoData[0];
                }

            }

            for(var i=0;i< data.base.length;i++)
            {
                 
                if(const_var.g_v==data.base[i].gauge)
                {
                    b.basic_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_roof_style_price_changed!=true)?backLeanData.basic_price:(data.base[i][mapVal]);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                    CalCulateRoofBasePrice = b.basic_price;
                }
            }
            b.wrappedLength = 0;
            const_var.lengthData.backLean.porchLength = 0;
            if(params.add_left_back_lean_porch==true )
            {
                b.porch = {'type':'back','length':params.lean_p_w+params.leanB_p_d}
                b.wrappedLength = params.lean_p_w + params.leanB_p_d
                const_var.lengthData.backLean.porchLength = params.lean_p_w;
            }if(params.add_right_back_lean_porch==true )
            {
                b.porch = {'type':'back','length':params.leanR_p_w+params.leanB_p_d}
                b.wrappedLength = params.leanR_p_w + params.leanB_p_d
                const_var.lengthData.backLean.porchLength = params.leanR_p_w;
            }if(params.add_right_back_lean_porch==true && params.add_left_back_lean_porch==true)
            {
                b.porch = {'type':'back','length':params.leanR_p_w+params.lean_p_w+params.leanB_p_d}
                b.wrappedLength = params.leanR_p_w + params.lean_p_w + params.leanB_p_d
                const_var.lengthData.backLean.porchLength = params.lean_p_w + params.leanR_p_w;
            }
            let heightFullData = (data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side:undefined;
            b.lean_has_double_leg = params.leanB_p_e_l;
            b.lean_has_double_leg_name = const_var.leanBHasDoublelegName;
            // b.legstype = const_var.leanBLegstype;
            if(const_var.g_v==14)
            {
                if(heightFullData[0].double_leg_baserail_cost!=0 && params.leanB_p_e_l==true)
                {
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_height_price_changed!=true)?backLeanData.height_price:((heightFullData[0].double_leg_baserail_cost!=0)?(heightFullData[0].double_leg_baserail_cost):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    // b.leanB_has_double_leg_price = b.height_price;

                }else{
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_height_price_changed!=true)?backLeanData.height_price:(heightFullData[0].leg_height_cost);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }
            }
            if(const_var.g_v==12)
            {
                if(params.leanB_p_e_l==true)
                {
                  if(heightFullData[0].double_leg_baserail_cost_12 ==0 && heightFullData[0].double_leg_baserail_cost==0)
                    {
                      b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_height_price_changed!=true)?backLeanData.height_price:((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].leg_height_cost));    
                      t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }else
                    {
                      b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_height_price_changed!=true)?backLeanData.height_price:((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].double_leg_baserail_cost));    
                      t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }
                    
                }else{
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_height_price_changed!=true)?backLeanData.height_price:((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                } 
            }


            // b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_height_price_changed!=true)?backLeanData.height_price:(data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side[0].leg_height_cost:0;
            // t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
            
            if(params.insulation.backLean.insulationId != 0) {
                if (params.add_back_lean && data != "" && const_var.insulationArrayForLeantoBack.length>0 && const_var.insulationArrayForLeantoBack[params.insulation.backLean.insulationId] != undefined) {
                    const insulationRes = utlis.calculateInsulation(const_var.insulationArrayForLeantoBack[params.insulation.backLean.insulationId], params.insulation.backLean.fullBuilding, params.insulation.backLean.roofOnly, 'backLean', params.add_storage_check_back, params.p_b_c_b_b_l, params.p_b_c_b_b_f, params.p_b_c_b_b_b);   
                    
                    b.insulation = insulationRes.insulation;
                    b.insulation_price = (UpdatePriceRecord && const_var.UpdatedPriceData.back_lean_insulation_price_changed!=true)?backLeanData.insulation_price:convertToTwoDecimalNumber(insulationRes.insulationPrice);
                    b.insulation_type = const_var.insulationArrayForLeantoBack[params.insulation.backLean.insulationId];
                    let chkForInsulationPrice = utlis.commonFunctionForInsulationCalculations(b.insulation_price);
                    if(chkForInsulationPrice!=true)
                    {
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                    }
                    //t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                }
            } else {
               b.insulation_price = 0;
            }
            
            if(params.p_b_c_b_b_f=="Gable")
            {
                var ShowPrice = "";
                if(params.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(params.leanB_p_e_i!="" && params.leanB_p_e_i!="other" && params.leanB_p_e_i!="0" && const_var.makeCertificateArrayBack[params.leanB_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)):(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_front_wall_price_changed!=true)?backLeanData.front_wall_price:(((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified)));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_front_wall_price_changed!=true)?backLeanData.front_wall_price:((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(params.leanB_p_e_i!="" && params.leanB_p_e_i!="other" && params.leanB_p_e_i!="0" && const_var.makeCertificateArrayBack[params.leanB_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_front_wall_price_changed!=true)?backLeanData.front_wall_price:((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_front_wall_price_changed!=true)?backLeanData.front_wall_price:((data.gable_end[0].uncertified));
                    }
                }

                b.front_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndGablePrice = b.front_wall_price;
                //b.back_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
            }if(params.p_b_c_b_b_b=="Gable" && params.add_storage_check_back!=true)
            {
                var ShowPrice = "";
                if(params.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(params.leanB_p_e_i!="" && params.leanB_p_e_i!="other" && params.leanB_p_e_i!="0" && const_var.makeCertificateArrayBack[params.leanB_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)) :(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_back_wall_price_changed!=true)?backLeanData.back_wall_price:(((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified)));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_back_wall_price_changed!=true)?backLeanData.back_wall_price:((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(params.leanB_p_e_i!="" && params.leanB_p_e_i!="other" && params.leanB_p_e_i!="0" && const_var.makeCertificateArrayBack[params.leanB_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_back_wall_price_changed!=true)?backLeanData.back_wall_price:((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_back_wall_price_changed!=true)?backLeanData.back_wall_price:((data.gable_end[0].uncertified));
                    }
                }  
                //b.front_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                b.back_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndGablePrice = CalCulateRoofEndGablePrice + b.back_wall_price;
            }
            if(params.p_b_c_b_b_f=="Half_Close")
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_front_wall_price_changed!=true)?backLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(params.p_b_c_b_b_f=="One_Fourth_Close")
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_front_wall_price_changed!=true)?backLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(params.p_b_c_b_b_f=="Three_Fourth_Close")
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_front_wall_price_changed!=true)?backLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }
            if(params.p_b_c_b_b_f=="Close")
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_front_wall_price_changed!=true)?backLeanData.front_wall_price:(params.p_v_w==true )?(((data.end[0].vertical_ends_cost) + (data.end[0].end_close_cost))):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndClosePrice = b.front_wall_price;
                //b.back_wall_price  = (params.p_v_w==true )?(((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost)):(data.end[0].end_close_cost);
            }
            // console.log(t_c_b,"t_c_b111",t_c_b)
            if(params.p_b_c_b_b_b=="Half_Close")
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_back_wall_price_changed!=true)?backLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(params.p_b_c_b_b_b=="One_Fourth_Close")
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_back_wall_price_changed!=true)?backLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(params.p_b_c_b_b_b=="Three_Fourth_Close")
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_back_wall_price_changed!=true)?backLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }
            if(params.p_b_c_b_b_b=="Close" && params.add_storage_check_back!=true)
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_back_wall_price_changed!=true)?backLeanData.back_wall_price:(params.p_v_w==true )?(((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost)):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndClosePrice = CalCulateRoofEndClosePrice + b.back_wall_price;
            }
            // console.log(t_c_b,"t_c_b2222",t_c_b)
            if(params.p_b_c_b_b_l=="Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_left_wall_price_changed!=true)?backLeanData.side_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber((data.side[0].vertical_side_cost)+(data.side[0].side_close_cost)):convertToTwoDecimalNumber(data.side[0].side_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            }
            if(params.p_b_c_b_b_l=="Half_Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_left_wall_price_changed!=true)?backLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].half_vertical_side_cost)+(data.side[0].half_side_close_cost)).toFixed(2):(data.side[0].half_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(params.p_b_c_b_b_l=="One_Fourth_Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_left_wall_price_changed!=true)?backLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].one_fourth_vertical_side_cost)+(data.side[0].one_fourth_side_close_cost)).toFixed(2):(data.side[0].one_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(params.p_b_c_b_b_l=="Three_Fourth_Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_left_wall_price_changed!=true)?backLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].three_fourth_vertical_side_cost)+(data.side[0].three_fourth_side_close_cost)).toFixed(2):(data.side[0].three_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }
            if(params.p_b_c_b_b_l!=="Close" && params.p_b_c_b_b_l!=="Open" && params.p_b_c_b_b_l!="Half_Close" && params.p_b_c_b_b_l!="One_Fourth_Close" && params.p_b_c_b_b_l!="Three_Fourth_Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_left_wall_price_changed!=true)?backLeanData.side_wall_price:(params.p_v_w==true )?(data.panel[0].vertical_panel_cost * params.p_b_c_b_b_l):(data.panel[0].cost * params.p_b_c_b_b_l);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            } 
            // console.log(t_c_b,"t_c_b22223333",t_c_b)
            if(params.add_storage_check_back==true && data.utility_side.length>0)
            {   
                // console.log(backLeanData.utility_price,const_var.UpdatedPriceData.back_lean_utility_price_changed,(data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2),"(data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)")
                if (params.p_b_w != "Close" /* && (!params.p_u_c || !params.cB_addStorage_check_left || !params.cB_addStorage_check_right) */) {
                    b.utility_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_utility_price_changed!=true)?backLeanData.utility_price:(params.p_v_w==true)?((data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)).toFixed(2):((data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)).toFixed(2);
                } else {
                    b.utility_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_utility_price_changed!=true)?backLeanData.utility_price:(params.p_v_w==true)?((data.utility_side[0].vertical_side_cost)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2)).toFixed(2):((data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2)).toFixed(2);
                }
                // console.log(b.utility_price,"b.utility_price",t_c_b,(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2))
                t_c_b = parseFloat(t_c_b) + parseFloat(b.utility_price);
               b.utility_length = params.add_storage_back;
               b.has_utility = true;
               b.utility_vertical = (params.p_v_w)?true:false;
               b.utility_on_centers = (const_var.DistanceArr[params.p_b_t][params.p_r_s]==undefined)?5:const_var.DistanceArr[params.p_b_t][params.p_r_s];
               CalCulateRoofUtilityEndPrice = parseFloat(b.utility_price); 
            }
            // console.log(t_c_b,"t_c_b2222444444",t_c_b)
            if(const_var.b_r_p_l_to_a.length > 0 && const_var.b_r_p_l_to_a[params.b_l_t_r_pB]!=undefined)
            {            
                if(const_var.b_r_p_l_to_a[params.b_l_t_r_pB].cost_type == "%")
                {
                    
                var splitVal = (const_var.b_r_p_l_to_a[params.b_l_t_r_pB].percentage_of!=undefined && const_var.b_r_p_l_to_a[params.b_l_t_r_pB].percentage_of!=0)?const_var.b_r_p_l_to_a[params.b_l_t_r_pB].percentage_of.split(","):0;
                var splval = 0;
                if(splitVal!=0)
                {
                    if(splitVal.includes("1")!=false)
                    {
                        splval = splval + CalCulateRoofBasePrice;
                    }if(splitVal.includes("2")!=false)
                    {
                        if(CalCulateRoofUtilityEndPrice!=0)
                        {
                            splval = splval + CalCulateRoofUtilityEndPrice;
                        }
                        splval = splval + CalCulateRoofEndClosePrice;
                    }if(splitVal.includes("3")!=false)
                    {
                        splval = splval + CalCulateRoofEndGablePrice;
                    }
                }else
                {
                    splval = splval + CalCulateRoofBasePrice;
                }
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_roof_pitch_price_changed!=true)?backLeanData.roof_pitch_price:(const_var.b_r_p_l_to_a[params.b_l_t_r_pB])?(splval * const_var.b_r_p_l_to_a[params.b_l_t_r_pB].cost / 100):0;
                    b.roof_pitch = const_var.b_r_p_l_to_a[params.b_l_t_r_pB].roof_pitch;
                    b.roof_pitch_name = const_var.b_r_p_l_to_a[params.b_l_t_r_pB].roof_pitch;
                    b.roof_pitch_price = finalCertPrice
                    t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);              
                }
                else
                {
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.back_lean_roof_pitch_price_changed!=true)?backLeanData.roof_pitch_price:(const_var.b_r_p_l_to_a[params.b_l_t_r_pB])?const_var.b_r_p_l_to_a[params.b_l_t_r_pB].cost:0;
                    t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                    b.roof_pitch = const_var.b_r_p_l_to_a[params.b_l_t_r_pB].roof_pitch;
                    b.roof_pitch_name = const_var.b_r_p_l_to_a[params.b_l_t_r_pB].roof_pitch;
                    b.roof_pitch_price = finalCertPrice;                
                }
            }else{
           
                b.roof_pitch = "3/12";
                b.roof_pitch_name = "3/12";
                b.roof_pitch_price = 0;   
            }
            if(const_var.c_f_aCer[params.p_e_i]!=undefined &&  params.p_e_i!= "" && params.p_e_i!= "Select" && params.leanB_p_e_i!="" && params.leanB_p_e_i!="0" && params.leanB_p_e_i!="other")
            {
                if(params.p_i_s=="1")
                {
                    if(Object.keys(const_var.makeCertificateArrayBack).length > 0 &&  const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of!=undefined && const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?backLeanData.certificate_price:(const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of_cost)?(t_c_b * const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?backLeanData.certificate_price:(const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                    }else{
                        var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?backLeanData.certificate_price:(const_var.makeCertificateArrayBack[params.leanB_p_e_i].certification_concrete_cost)?const_var.makeCertificateArrayBack[params.leanB_p_e_i].certification_concrete_cost:0;
                        //t_c_b = parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price = finalCertPrice;
                    }
                }else{
                    if(const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of!=undefined && const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?backLeanData.certificate_price:(const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of_cost)?(t_c_b * const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?backLeanData.certificate_price:(const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.makeCertificateArrayBack[params.leanB_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                        
                        //console.log(b.certificate_price,"b.certificate_price",b.certificate_price * certVal);
                    }else
                    {
                        var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?backLeanData.certificate_price:(const_var.makeCertificateArrayBack[params.leanB_p_e_i].cost)?const_var.makeCertificateArrayBack[params.leanB_p_e_i].cost:0;
                        //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price =finalCertPrice;
                    }
                }
            }
            if(params.leanB_p_e_i=="other")
            {
                b.certificate = {'gauge': 0,'certified': 1,'has_double_leg': 0,'has_ladder_leg': 0,'has_other_leg': 0,'height': 0,'id': -1,'cost':0,'is_default': "no",'length': 0,'map_id': 0,'name': "Other"};
                b.certificate_other_name = (params.leanB_p_e_i_other!='')?params.leanB_p_e_i_other:'Other';
                b.certificate_price  = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?backLeanData.certificate_price:0;
                //t_c_b =  parseFloat(t_c_b) + parseFloat(b.certificate_price);
            }
            
        if(params.continous_left_lean==true)
        {
            b.continous_lean = true;
        }else
        {
            b.continous_lean = false;
        }
      
        b.pricing_data =  data;
        
        b.t_c_b = parseFloat(t_c_b);
        const_var.leanto.push(b);
        // console.log(const_var.leanto,"const_var.leanto")
        const_var.UpdatedPriceData.leanto.push(b);
        }
        else
        {
            removeDataFromArray(4);
    
        }
        
        cP(const_var.a_p_d_a,true);
        
    }    
    export const cPforLLeanOnly = (data,objIndex,newDW) => 
    {       let t_c_b = 0;
            let b = {};
            if(const_var.UpdatedPriceData.leanto==undefined)
            {
                const_var.UpdatedPriceData.leanto = [];
            }
            // console.log(const_var.makeCertificateArrayLeft,"makeCertificateArrayLeft",const_var.c_f_aCer[params.p_e_i]);
            if(params.add_left_lean==true)
            {
                removeDataFromArray(1);
                if(newDW!=undefined)
                {
                   const_var.UpdatedPriceData.leanto.push(newDW); 
                }
            let UpdatePriceRecord = false;
            let leftLeanData = "";
            if(const_var.c_f_aCer[params.p_e_i]!=undefined)
            {
                params.lean_p_e_i = const_var.c_f_aCer[params.p_e_i].name;
            }else
            {
                params.lean_p_e_i = (params.p_e_i=="Select")?'':params.p_e_i;
            }
            // if(params.p_e_i!='' && params.lean_p_e_i!="")
            // {
            //     const_var.makeCertificateArrayLeft.filter(data=>data.)
            // }
            // console.log(params.p_e_i,params.lean_p_e_i,"params.lean_p_e_i",const_var.c_f_aCer[params.p_e_i])
            //console.log(const_var.makeCertificateArrayLeft,params.lean_p_e_i,params.p_e_i,"makeCertificateArrayLeft",const_var.c_f_aCer[params.p_e_i]);
            
            b = {"leanto_type":1,"width": params.lean_p_w,"height": params.lean_p_h,'length':params.lean_p_d,"leanto_drop":"","front_wall": ConvStr(params.p_b_c_b_l_f),"back_wall": ConvStr(params.p_b_c_b_l_b),"side_wall": ConvStr(params.p_b_c_b_l),"front_wall_price":0,"back_wall_price":0,"side_wall_price":0,"front_wall_vertical":params.p_v_w,"back_wall_vertical":params.p_v_w,"side_wall_vertical":params.p_v_w,"certificate":const_var.makeCertificateArrayLeft[params.lean_p_e_i]};
            //a.concat(b);
            
           var data = data;
            var mapVal = const_var.map[params.p_r_s];
            var CalCulateRoofBasePrice = 0;
            var CalCulateRoofEndClosePrice = 0;
            var CalCulateRoofEndGablePrice = 0;
            var CalCulateRoofUtilityEndPrice =0;

            if(params.add_storage_check==true)
            {
                data.side = data.side;
                data.panel = data.panel;
            }else
            {
                data.side = (data.full_length_side!=undefined)?data.full_length_side:data.side;
                data.panel = (data.full_length_panel!=undefined)?data.full_length_panel:data.panel;
            }
            // console.log(const_var.UpdatedPriceData.left_lean_roof_style_price_changed,"const_var.UpdatedPriceData.left_lean_roof_style_price_changed111")
            
            if(const_var.UpdatedPriceData.leanto.length>0)
            {
                let FindIndex = const_var.UpdatedPriceData.leanto.filter(data=>data.leanto_type==1);
                // console.log(FindIndex,"FindIndex")
                if(FindIndex.length>0)
                {
                    UpdatePriceRecord = true;
                    leftLeanData = FindIndex[0];
                }
                // if(const_var.UpdatedPriceData.leanto[0]!=undefined && const_var.UpdatedPriceData.leanto[0].leanto_type==1)
                // {
                //     UpdatePriceRecord = true;
                //     leftLeanData = const_var.UpdatedPriceData.leanto[letFindIndex];
                // }if(const_var.UpdatedPriceData.leanto[1]!=undefined && const_var.UpdatedPriceData.leanto[1].leanto_type==1)
                // {
                //     UpdatePriceRecord = true;
                //     leftLeanData = const_var.UpdatedPriceData.leanto[1];
                // }

            }
            // console.log(const_var.UpdatedPriceData.left_lean_roof_style_price_changed,"const_var.UpdatedPriceData.left_lean_roof_style_price_changed")
            for(var i=0;i< data.base.length;i++)
            {
                 
                if(const_var.g_v==data.base[i].gauge)
                {
                    b.basic_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_roof_style_price_changed!=true)?leftLeanData.basic_price:(data.base[i][mapVal]);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                    CalCulateRoofBasePrice = b.basic_price;
                }
            }
            if(params.add_left_front_lean_porch==true )
            {
                b.porch = {'type':'left','length':params.lean_p_d+params.leanF_p_d}
            }if(params.add_left_back_lean_porch==true )
            {
                b.porch = {'type':'left','length':params.lean_p_d+params.leanB_p_d}
            }if(params.add_left_back_lean_porch==true && params.add_left_front_lean_porch==true)
            {
                b.porch = {'type':'left','length':params.lean_p_d+params.leanB_p_d+params.leanF_p_d}
            }

            let heightFullData = (data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side:undefined;
            b.lean_has_double_leg = params.lean_p_e_l;
            b.legstype = const_var.leanLegstype;
            b.lean_has_double_leg_name = const_var.leanHasDoublelegName;
           
            if(const_var.g_v==14)
            {
                if(heightFullData[0].double_leg_baserail_cost!=0 && params.lean_p_e_l==true)
                {
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_height_price_changed!=true)?leftLeanData.height_price:((heightFullData[0].double_leg_baserail_cost!=0)?(heightFullData[0].double_leg_baserail_cost):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }else{
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_height_price_changed!=true)?leftLeanData.height_price:(heightFullData[0].leg_height_cost);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }
            }
            if(const_var.g_v==12)
            {
                if(params.lean_p_e_l==true)
                {
                    if(heightFullData[0].double_leg_baserail_cost_12 ==0 && heightFullData[0].double_leg_baserail_cost==0)
                    {
                      b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_height_price_changed!=true)?leftLeanData.height_price:((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }else
                    {
                      b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_height_price_changed!=true)?leftLeanData.height_price:((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].double_leg_baserail_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }
                    
                }else{
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_height_price_changed!=true)?leftLeanData.height_price:((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                } 
            }


            if(params.insulation.leftLean.insulationId != 0) {
                if (params.add_left_lean && data != "" && const_var.insulationArrayForLeantoLeft.length>0 && const_var.insulationArrayForLeantoLeft[params.insulation.leftLean.insulationId] != undefined ) {
                    const insulationRes = utlis.calculateInsulation(const_var.insulationArrayForLeantoLeft[params.insulation.leftLean.insulationId],  params.insulation.leftLean.fullBuilding, params.insulation.leftLean.roofOnly, 'leftLean', params.add_storage_check, params.p_b_c_b_l, params.p_b_c_b_l_f, params.p_b_c_b_l_b );   
                    b.insulation = insulationRes.insulation;
                    b.insulation_price = (UpdatePriceRecord && const_var.UpdatedPriceData.left_lean_insulation_price_changed!=true)?leftLeanData.insulation_price:convertToTwoDecimalNumber(insulationRes.insulationPrice);
                    b.insulation_type = const_var.insulationArrayForLeantoLeft[params.insulation.leftLean.insulationId];
                    let chkForInsulationPrice = utlis.commonFunctionForInsulationCalculations(b.insulation_price);
                    if(chkForInsulationPrice!=true)
                    {
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                    }
                    //t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                }
            } else {
               b.insulation_price = 0;
            }

            // b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_height_price_changed!=true)?leftLeanData.height_price:(data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side[0].leg_height_cost:0;
            // t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
            if(params.p_b_c_b_l_f=="Gable" )
            {
                var ShowPrice = "";
                if(params.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(params.lean_p_e_i!="" && params.lean_p_e_i!="other" && params.lean_p_e_i!="0" && const_var.makeCertificateArrayLeft[params.lean_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)):(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_front_wall_price_changed!=true)?leftLeanData.front_wall_price:(((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified)));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_front_wall_price_changed!=true)?leftLeanData.front_wall_price:((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(params.lean_p_e_i!="" && params.lean_p_e_i!="other" && params.lean_p_e_i!="0" && const_var.makeCertificateArrayLeft[params.lean_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_front_wall_price_changed!=true)?leftLeanData.front_wall_price:((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_front_wall_price_changed!=true)?leftLeanData.front_wall_price:((data.gable_end[0].uncertified));
                    }
                }
                b.front_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndGablePrice = b.front_wall_price;
                //b.back_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
            }if(params.p_b_c_b_l_b=="Gable"  && params.add_storage_check!=true)
            {
                var ShowPrice = "";
                if(params.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(params.lean_p_e_i!="" && params.lean_p_e_i!="other" && params.lean_p_e_i!="0" && const_var.makeCertificateArrayLeft[params.lean_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)) :(parseFloat(data.gable_end[0].vertical_certified)+parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_back_wall_price_changed!=true)?leftLeanData.back_wall_price:(((data.gable_end[0].vertical_certified)+(data.gable_end[0].certified)));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_back_wall_price_changed!=true)?leftLeanData.back_wall_price:((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(params.lean_p_e_i!="" && params.lean_p_e_i!="other" && params.lean_p_e_i!="0" && const_var.makeCertificateArrayLeft[params.lean_p_e_i].certified==1)
                    {  
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified)):parseFloat((data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_back_wall_price_changed!=true)?leftLeanData.back_wall_price:((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ parseFloat((data.gable_end[0].uncertified));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_back_wall_price_changed!=true)?leftLeanData.back_wall_price:((data.gable_end[0].uncertified));
                    }
                }  
                //b.front_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                b.back_wall_price = ShowPrice;//(params.p_v_w==true)?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndGablePrice = CalCulateRoofEndGablePrice + b.back_wall_price;
            }
            if(params.p_b_c_b_l_f=="Half_Close" )
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_front_wall_price_changed!=true)?leftLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(params.p_b_c_b_l_f=="One_Fourth_Close" )
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_front_wall_price_changed!=true)?leftLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(params.p_b_c_b_l_f=="Three_Fourth_Close" )
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_front_wall_price_changed!=true)?leftLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }
            // console.log(params.p_b_c_b_l_f,params.b_h_t2,"params.b_h_t2")
            if(params.p_b_c_b_l_f=="Close" )
            {
            //   console.log(const_var.UpdatedPriceData.left_lean_front_wall_price_changed,"const_var.UpdatedPriceData.left_lean_front_wall_price_changed",data.end[0].end_close_cost)
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_front_wall_price_changed!=true)?leftLeanData.front_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber(((data.end[0].vertical_ends_cost) + (data.end[0].end_close_cost))):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndClosePrice = b.front_wall_price;
                //b.back_wall_price  = (params.p_v_w==true )?(((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost)):(data.end[0].end_close_cost);
            }
            if(params.p_b_c_b_l_b=="Half_Close" )
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_back_wall_price_changed!=true)?leftLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(params.p_b_c_b_l_b=="One_Fourth_Close" )
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_back_wall_price_changed!=true)?leftLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(params.p_b_c_b_l_b=="Three_Fourth_Close" )
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_back_wall_price_changed!=true)?leftLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }
            if(params.p_b_c_b_l_b=="Close"  && params.add_storage_check!=true)
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_back_wall_price_changed!=true)?leftLeanData.back_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber(((data.end[0].vertical_ends_cost)) + (data.end[0].end_close_cost)):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndClosePrice = CalCulateRoofEndClosePrice + b.back_wall_price;
            }if(params.p_b_c_b_l=="Close" )
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_left_wall_price_changed!=true)?leftLeanData.side_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber((data.side[0].vertical_side_cost)+(data.side[0].side_close_cost)):(data.side[0].side_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            }
            if(params.p_b_c_b_l=="Half_Close" )
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_left_wall_price_changed!=true)?leftLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].half_vertical_side_cost)+(data.side[0].half_side_close_cost)).toFixed(2):(data.side[0].half_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(params.p_b_c_b_l=="One_Fourth_Close" )
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_left_wall_price_changed!=true)?leftLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].one_fourth_vertical_side_cost)+(data.side[0].one_fourth_side_close_cost)).toFixed(2):(data.side[0].one_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(params.p_b_c_b_l=="Three_Fourth_Close" )
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_left_wall_price_changed!=true)?leftLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].three_fourth_vertical_side_cost)+(data.side[0].three_fourth_side_close_cost)).toFixed(2):(data.side[0].three_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }
            if(params.p_b_c_b_l!=="Close" && params.p_b_c_b_l!=="Open"  && params.p_b_c_b_l!="Half_Close" && params.p_b_c_b_l!="One_Fourth_Close" && params.p_b_c_b_l!="Three_Fourth_Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_left_wall_price_changed!=true)?leftLeanData.side_wall_price:(params.p_v_w==true )?(data.panel[0].vertical_panel_cost * params.p_b_c_b_l):(data.panel[0].cost * params.p_b_c_b_l);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);  
            } 
            
            if(params.add_storage_check==true && data.utility_side.length>0)
            {   
               if (params.p_l_w != "Close" /* && (!params.p_u_c && !params.cB_addStorage_check_left) */) {
                    b.utility_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_utility_price_changed!=true)?leftLeanData.utility_price:(params.p_v_w==true)?((data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)).toFixed(2):((data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)).toFixed(2);
               } else {
                   b.utility_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_utility_price_changed!=true)?leftLeanData.utility_price:(params.p_v_w==true)?((data.utility_side[0].vertical_side_cost)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2)).toFixed(2):((data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2)).toFixed(2);
                }
                   
                t_c_b = parseFloat(t_c_b) + parseFloat(b.utility_price);
               b.utility_length = params.add_storage;
               b.has_utility = true;
               b.utility_vertical = (params.p_v_w)?true:false;
               b.utility_on_centers = (const_var.DistanceArr[params.p_b_t][params.p_r_s]==undefined)?5:const_var.DistanceArr[params.p_b_t][params.p_r_s];
            //    CalCulateRoofUtilityEndPrice = (params.p_v_w==true)?((data.end[0].vertical_ends_cost * 2)+(data.end[0].end_close_cost * 2)):(data.end[0].end_close_cost * 2); 
               CalCulateRoofUtilityEndPrice = parseFloat(b.utility_price); 
            }
            if(const_var.b_r_p_l_to_a.length > 0 && const_var.b_r_p_l_to_a[params.b_l_t_r_p]!=undefined)
            {            
                if(const_var.b_r_p_l_to_a[params.b_l_t_r_p].cost_type == "%")
                {
                    
                var splitVal = (const_var.b_r_p_l_to_a[params.b_l_t_r_p].percentage_of!=undefined && const_var.b_r_p_l_to_a[params.b_l_t_r_p].percentage_of!=0)?const_var.b_r_p_l_to_a[params.b_l_t_r_p].percentage_of.split(","):0;
                var splval = 0;
                if(splitVal!=0)
                {
                    if(splitVal.includes("1")!=false)
                    {
                        splval = splval + CalCulateRoofBasePrice;
                    }if(splitVal.includes("2")!=false)
                    {
                        if(CalCulateRoofUtilityEndPrice!=0)
                        {
                            splval = parseFloat(splval) + parseFloat(CalCulateRoofUtilityEndPrice);
                        }
                        splval = parseFloat(splval) + parseFloat(CalCulateRoofEndClosePrice);
                    }if(splitVal.includes("3")!=false)
                    {
                        splval = splval + CalCulateRoofUtilityEndPrice;
                    }
                }else
                {
                    splval = splval + CalCulateRoofBasePrice;
                }
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_roof_pitch_price_changed!=true)?leftLeanData.roof_pitch_price:(const_var.b_r_p_l_to_a[params.b_l_t_r_p])?(splval * const_var.b_r_p_l_to_a[params.b_l_t_r_p].cost / 100):0;
                    b.roof_pitch = const_var.b_r_p_l_to_a[params.b_l_t_r_p].roof_pitch;
                    b.roof_pitch_name = const_var.b_r_p_l_to_a[params.b_l_t_r_p].roof_pitch;
                    b.roof_pitch_price = finalCertPrice
                    t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);              
                }
                else
                {
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.left_lean_roof_pitch_price_changed!=true)?leftLeanData.roof_pitch_price:(const_var.b_r_p_l_to_a[params.b_l_t_r_p])?const_var.b_r_p_l_to_a[params.b_l_t_r_p].cost:0;
                    t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                    b.roof_pitch = const_var.b_r_p_l_to_a[params.b_l_t_r_p].roof_pitch;
                    b.roof_pitch_name = const_var.b_r_p_l_to_a[params.b_l_t_r_p].roof_pitch;
                    b.roof_pitch_price = finalCertPrice;                
                }
            }else{
           
                b.roof_pitch = "3/12";
                b.roof_pitch_name = "3/12";
                b.roof_pitch_price = 0;   
            }
            if(const_var.c_f_aCer[params.p_e_i]!=undefined && params.p_e_i!= "" && params.p_e_i!= "Select" && params.lean_p_e_i!="" && params.lean_p_e_i!="0" && params.lean_p_e_i!="other")
            {
                if(params.p_i_s=="1")
                {
                    if(Object.keys(const_var.makeCertificateArrayLeft).length > 0 && const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of!=undefined && const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?leftLeanData.certificate_price:(const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of_cost)?(t_c_b * const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?leftLeanData.certificate_price:(const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                    }else{
                        var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?leftLeanData.certificate_price:(const_var.makeCertificateArrayLeft[params.lean_p_e_i].certification_concrete_cost)?const_var.makeCertificateArrayLeft[params.lean_p_e_i].certification_concrete_cost:0;
                        //t_c_b = parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price = finalCertPrice;
                    }
                }else{
                    if(const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of!=undefined && const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?leftLeanData.certificate_price:(const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of_cost)?(t_c_b * const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?leftLeanData.certificate_price:(const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.makeCertificateArrayLeft[params.lean_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                        
                        //console.log(b.certificate_price,"b.certificate_price",b.certificate_price * certVal);
                    }else
                    {
                        var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?leftLeanData.certificate_price:(const_var.makeCertificateArrayLeft[params.lean_p_e_i].cost)?const_var.makeCertificateArrayLeft[params.lean_p_e_i].cost:0;
                        //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price =finalCertPrice;
                    }
                }
            }
            if(params.lean_p_e_i=="other")
            {
                b.certificate = {'gauge': 0,'certified': 1,'has_double_leg': 0,'has_ladder_leg': 0,'has_other_leg': 0,'height': 0,'id': -1,'cost':0,'is_default': "no",'length': 0,'map_id': 0,'name': "Other"};
                b.certificate_other_name = (params.lean_p_e_i_other!='')?params.lean_p_e_i_other:'Other';
                b.certificate_price  = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?leftLeanData.certificate_price:0;
                //t_c_b =  parseFloat(t_c_b) + parseFloat(b.certificate_price);
            }
            
        if(params.continous_left_lean==true)
        {
            b.continous_lean = true;
        }else
        {
            b.continous_lean = false;
        }
    
        b.pricing_data =  data;
        
        b.t_c_b = parseFloat(t_c_b);
        const_var.leanto.push(b);
        const_var.UpdatedPriceData.leanto.push(b);
        }
        else
        {
            removeDataFromArray(1);
    
        }
        
        cP(const_var.a_p_d_a,true);
        
    }
    
    export const cPforRLeanOnly = (data,objIndex,newDW) =>
    {
            let activeLean;
            let t_c;
            let t_c_b = 0;
            if(const_var.UpdatedPriceData.leanto==undefined)
            {
                const_var.UpdatedPriceData.leanto = [];
            }
            // console.log("rahul here");
            if(params.add_right_lean==true)
            {
                removeDataFromArray(2);
                if(newDW!=undefined)
                {
                   const_var.UpdatedPriceData.leanto.push(newDW); 
                }
                let UpdatePriceRecord = false;
                let rightLeanData = "";

                // console.log("rahul here");
                if(const_var.c_f_aCer[params.p_e_i]!=undefined)
                {
                    params.leanR_p_e_i = const_var.c_f_aCer[params.p_e_i].name;
                }else
                {
                    params.leanR_p_e_i = (params.p_e_i=="Select")?'':params.p_e_i;
                }
                // if(const_var.UpdatedPriceData.leanto.length>0)
                // {
                //     if(const_var.UpdatedPriceData.leanto[0]!=undefined && const_var.UpdatedPriceData.leanto[0].leanto_type==2)
                //     {
                //         UpdatePriceRecord = true;
                //         rightLeanData = const_var.UpdatedPriceData.leanto[0];
                //     }if(const_var.UpdatedPriceData.leanto[1]!=undefined && const_var.UpdatedPriceData.leanto[1].leanto_type==2)
                //     {
                //         UpdatePriceRecord = true;
                //         rightLeanData = const_var.UpdatedPriceData.leanto[1];
                //     }
                    
                // }
                if(const_var.UpdatedPriceData.leanto.length>0)
                {
                    let FindIndex = const_var.UpdatedPriceData.leanto.filter(data=>data.leanto_type==2);
                    if(FindIndex.length>0)
                    {
                        UpdatePriceRecord = true;
                        rightLeanData = FindIndex[0];
                    }
                    // if(const_var.UpdatedPriceData.leanto[0]!=undefined && const_var.UpdatedPriceData.leanto[0].leanto_type==1)
                    // {
                    //     UpdatePriceRecord = true;
                    //     leftLeanData = const_var.UpdatedPriceData.leanto[letFindIndex];
                    // }if(const_var.UpdatedPriceData.leanto[1]!=undefined && const_var.UpdatedPriceData.leanto[1].leanto_type==1)
                    // {
                    //     UpdatePriceRecord = true;
                    //     leftLeanData = const_var.UpdatedPriceData.leanto[1];
                    // }

                }
                
            let b = {"leanto_type":2,"width": params.leanR_p_w,"height": params.leanR_p_h,'length':params.leanR_p_d,"leanto_drop":"","front_wall": ConvStr(params.p_b_c_b_r_f),"back_wall": ConvStr(params.p_b_c_b_r_b),"side_wall": ConvStr(params.p_b_c_b_r),"front_wall_price":0,"back_wall_price":0,"side_wall_price":0,"front_wall_vertical":params.p_v_w,"back_wall_vertical":params.p_v_w,"side_wall_vertical":params.p_v_w,"certificate":const_var.makeCertificateArrayRight[params.leanR_p_e_i]};
            //a.concat(b);
            
            
            var data = data;
            var mapVal = const_var.map[params.p_r_s];
            let CalCulateRoofBasePrice = 0;
            let CalCulateRoofEndClosePrice = 0;
            let CalCulateRoofEndGablePrice = 0;
            let CalCulateRoofUtilityEndPrice =0;
            if(params.add_storage_check_right==true)
            {
                data.side = data.side;
                data.panel = data.panel;
            }else
            {
                data.side = (data.full_length_side!=undefined)?data.full_length_side:data.side;
                data.panel = (data.full_length_panel!=undefined)?data.full_length_panel:data.panel;
            }
            for(var i=0;i< data.base.length;i++)
            {
                 
                if(const_var.g_v==data.base[i].gauge)
                {
                    b.basic_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_roof_style_price_changed!=true)?rightLeanData.basic_price:(data.base[i][mapVal]);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.basic_price);
                    CalCulateRoofBasePrice = b.basic_price;
                }
            }
            if(params.add_right_front_lean_porch==true )
            {
                b.porch = {'type':'right','length':params.leanR_p_d+params.leanF_p_d}
            }if(params.add_right_back_lean_porch==true )
            {
                b.porch = {'type':'right','length':params.leanR_p_d+params.leanB_p_d}
            }if(params.add_right_back_lean_porch==true && params.add_right_front_lean_porch==true)
            {
                b.porch = {'type':'right','length':params.leanR_p_d+params.leanB_p_d+params.leanF_p_d}
            }

            let heightFullData = (data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side:undefined;
            b.lean_has_double_leg = params.leanR_p_e_l;
            b.lean_has_double_leg_name = const_var.leanRHasDoublelegName;
            // b.legstype = const_var.leanRLegstype;
            if(const_var.g_v==14)
            {
                if(heightFullData[0].double_leg_baserail_cost!=0 && params.leanR_p_e_l==true)
                {
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_height_price_changed!=true)?rightLeanData.height_price:((heightFullData[0].double_leg_baserail_cost!=0)?(heightFullData[0].double_leg_baserail_cost):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    // b.leanR_has_double_leg_price = b.height_price;
                }else{
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_height_price_changed!=true)?rightLeanData.height_price:(heightFullData[0].leg_height_cost);
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                }
            }
            if(const_var.g_v==12)
            {
                if(params.leanR_p_e_l==true)
                {
                    if(heightFullData[0].double_leg_baserail_cost_12 ==0 && heightFullData[0].double_leg_baserail_cost==0)
                    {
                      b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_height_price_changed!=true)?rightLeanData.height_price:((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));    
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }else
                    {
                      b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_height_price_changed!=true)?rightLeanData.height_price:((heightFullData[0].double_leg_baserail_cost_12!=0)?(heightFullData[0].double_leg_baserail_cost_12):(heightFullData[0].double_leg_baserail_cost));    
                      t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                    }
                }else{
                    b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_height_price_changed!=true)?rightLeanData.height_price:((heightFullData[0].leg_height_cost_12!=0)?(heightFullData[0].leg_height_cost_12):(heightFullData[0].leg_height_cost));
                    t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
                } 
            }

            // b.height_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_height_price_changed!=true)?rightLeanData.height_price:(data.full_length_side!=undefined && data.full_length_side.length>0)?data.full_length_side[0].leg_height_cost:0;
            // t_c_b = parseFloat(t_c_b) + parseFloat(b.height_price); 
            
            if(params.insulation.rightLean.insulationId != 0) {
                if (params.add_right_lean && data != "" && const_var.insulationArrayForLeantoRight.length>0 && const_var.insulationArrayForLeantoRight[params.insulation.rightLean.insulationId] != undefined) {
                    const insulationRes = utlis.calculateInsulation(const_var.insulationArrayForLeantoRight[params.insulation.rightLean.insulationId],  params.insulation.rightLean.fullBuilding, params.insulation.rightLean.roofOnly, 'rightLean', params.add_storage_check_right, params.p_b_c_b_r, params.p_b_c_b_r_f, params.p_b_c_b_r_b );   
                    
                    b.insulation = insulationRes.insulation;
                    b.insulation_price = (UpdatePriceRecord && const_var.UpdatedPriceData.right_lean_insulation_price_changed!=true)?rightLeanData.insulation_price:convertToTwoDecimalNumber(insulationRes.insulationPrice);
                    b.insulation_type = const_var.insulationArrayForLeantoRight[params.insulation.rightLean.insulationId];
                    let chkForInsulationPrice = utlis.commonFunctionForInsulationCalculations(b.insulation_price);
                    if(chkForInsulationPrice!=true)
                    {
                        t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                    }
                    //t_c_b = parseFloat(t_c_b) + parseFloat(b.insulation_price);
                }
            } else {
               b.insulation_price = 0;
            }

            if(params.p_b_c_b_r_f=="Gable" )
            {
                var ShowPrice = "";
                if(params.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(params.leanR_p_e_i!="" && params.leanR_p_e_i!="other" && params.leanR_p_e_i!="0" && const_var.makeCertificateArrayRight[params.leanR_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)):(parseFloat(data.gable_end[0].vertical_certified) + parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_front_wall_price_changed!=true)?rightLeanData.front_wall_price:(((data.gable_end[0].vertical_certified) + (data.gable_end[0].certified)));
                    }else{
                        //t_c_b = parseFloat(t_c_b) + (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_front_wall_price_changed!=true)?rightLeanData.front_wall_price:((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(params.leanR_p_e_i!="" && params.leanR_p_e_i!="other" && params.leanR_p_e_i!="0" && const_var.makeCertificateArrayRight[params.leanR_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified)):(parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_front_wall_price_changed!=true)?rightLeanData.front_wall_price:((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ ((data.gable_end[0].uncertified));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_front_wall_price_changed!=true)?rightLeanData.front_wall_price:((data.gable_end[0].uncertified));
                    }
                }
                b.front_wall_price = ShowPrice;//(params.p_v_w==true )?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndGablePrice = b.front_wall_price;
                //b.back_wall_price = ShowPrice / 2;//(params.p_v_w==true )?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
            }if(params.p_b_c_b_r_b=="Gable"  && params.add_storage_check_right!=true)
            {
                var ShowPrice = "";
                if(params.p_v_w==true )
                {
                    //t_c_b = t_c_b + (data.gable_end[0].vertical);
                    if(params.leanR_p_e_i!="" && params.leanR_p_e_i!="other" && params.leanR_p_e_i!="0" && const_var.makeCertificateArrayRight[params.leanR_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical)):(parseFloat(data.gable_end[0].vertical_certified) + parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_back_wall_price_changed!=true)?rightLeanData.back_wall_price:(((data.gable_end[0].vertical_certified) + (data.gable_end[0].certified)));
                    }else{
                        //t_c_b = parseFloat(t_c_b) + (parseFloat(data.gable_end[0].uncertified) + parseFloat(data.gable_end[0].vertical));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_back_wall_price_changed!=true)?rightLeanData.back_wall_price:((data.gable_end[0].uncertified) + (data.gable_end[0].vertical));
                    }
                }else{
                    if(params.leanR_p_e_i!="" && params.leanR_p_e_i!="other" && params.leanR_p_e_i!="0" && const_var.makeCertificateArrayRight[params.leanR_p_e_i].certified==1)
                    {
                        //t_c_b = ((data.gable_end[0].certified)==0)?parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified)):(parseFloat(data.gable_end[0].certified)) + parseFloat(t_c_b);
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_back_wall_price_changed!=true)?rightLeanData.back_wall_price:((data.gable_end[0].certified));
                    }else{
                        //t_c_b = parseFloat(t_c_b)+ (parseFloat(data.gable_end[0].uncertified));
                        ShowPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_back_wall_price_changed!=true)?rightLeanData.back_wall_price:((data.gable_end[0].uncertified));
                    }
                }
                //b.front_wall_price = ShowPrice / 2;//(params.p_v_w==true )?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                b.back_wall_price = ShowPrice;//(params.p_v_w==true )?(data.gable_end[0].vertical):(data.gable_end[0].uncertified);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndGablePrice = CalCulateRoofEndGablePrice + b.back_wall_price;
            }
            if(params.p_b_c_b_r_f=="Close" )
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_front_wall_price_changed!=true)?rightLeanData.front_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber(((data.end[0].vertical_ends_cost)+(data.end[0].end_close_cost))):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.front_wall_price);
                CalCulateRoofEndClosePrice = b.front_wall_price;
                //b.back_wall_price  = (params.p_v_w==true )?(((data.end[0].vertical_ends_cost)+(data.end[0].end_close_cost))):(data.end[0].end_close_cost);       
            }if(params.p_b_c_b_r_b=="Close"  && params.add_storage_check_right!=true)
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_back_wall_price_changed!=true)?rightLeanData.back_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber(((data.end[0].vertical_ends_cost)+(data.end[0].end_close_cost))):(data.end[0].end_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.back_wall_price);
                CalCulateRoofEndClosePrice = CalCulateRoofEndClosePrice + b.back_wall_price;  
            }

            if(params.p_b_c_b_r_f=="Half_Close" )
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_front_wall_price_changed!=true)?rightLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(params.p_b_c_b_r_f=="One_Fourth_Close" )
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_front_wall_price_changed!=true)?rightLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }if(params.p_b_c_b_r_f=="Three_Fourth_Close" )
            {
                b.front_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_front_wall_price_changed!=true)?rightLeanData.front_wall_price:(params.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.front_wall_price);
            }

            if(params.p_b_c_b_r_b=="Half_Close" )
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_back_wall_price_changed!=true)?rightLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].half_vertical_ends_cost)+(data.end[0].half_end_close_cost)).toFixed(2):(data.end[0].half_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(params.p_b_c_b_r_b=="One_Fourth_Close" )
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_back_wall_price_changed!=true)?rightLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].one_fourth_vertical_ends_cost)+(data.end[0].one_fourth_end_close_cost)).toFixed(2):(data.end[0].one_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }if(params.p_b_c_b_r_b=="Three_Fourth_Close" )
            {
                b.back_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_back_wall_price_changed!=true)?rightLeanData.back_wall_price:(params.p_v_w==true)?((data.end[0].three_fourth_vertical_ends_cost)+(data.end[0].three_fourth_end_close_cost)).toFixed(2):(data.end[0].three_fourth_end_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.back_wall_price);
            }

            if(params.p_b_c_b_r=="Close" )
            {
                // b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_right_wall_price_changed!=true)?rightLeanData.side_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber((data.side[0].vertical_side_cost) +(data.side[0].side_close_cost)):convertToTwoDecimalNumber(data.side[0].side_close_cost);
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_right_wall_price_changed!=true)?rightLeanData.side_wall_price:(params.p_v_w==true )?convertToTwoDecimalNumber((data.side[0].vertical_side_cost)+(data.side[0].side_close_cost)):(data.side[0].side_close_cost);
                
                //b.side_wall_price = (params.p_v_w==true) ? convertToTwoDecimalNumber((data.side[0].vertical_side_cost) +(data.side[0].side_close_cost)):convertToTwoDecimalNumber(data.side[0].side_close_cost);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);
            }if(params.p_b_c_b_r!=="Close" && params.p_b_c_b_r!=="Open"  && params.p_b_c_b_r!="Half_Close" && params.p_b_c_b_r!="One_Fourth_Close" && params.p_b_c_b_r!="Three_Fourth_Close")
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_right_wall_price_changed!=true)?rightLeanData.side_wall_price:(params.p_v_w==true )?(data.panel[0].vertical_panel_cost * params.p_b_c_b_r):(data.panel[0].cost * params.p_b_c_b_r);
                t_c_b = parseFloat(t_c_b)  + parseFloat(b.side_wall_price);
            }
            if(params.p_b_c_b_r=="Half_Close" )
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_right_wall_price_changed!=true)?rightLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].half_vertical_side_cost)+(data.side[0].half_side_close_cost)).toFixed(2):(data.side[0].half_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(params.p_b_c_b_r=="One_Fourth_Close" )
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_right_wall_price_changed!=true)?rightLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].one_fourth_vertical_side_cost)+(data.side[0].one_fourth_side_close_cost)).toFixed(2):(data.side[0].one_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }if(params.p_b_c_b_r=="Three_Fourth_Close" )
            {
                b.side_wall_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_right_wall_price_changed!=true)?rightLeanData.side_wall_price:(params.p_v_w==true)?((data.side[0].three_fourth_vertical_side_cost)+(data.side[0].three_fourth_side_close_cost)).toFixed(2):(data.side[0].three_fourth_side_close_cost).toFixed(2);
                t_c_b = parseFloat(t_c_b) + parseFloat(b.side_wall_price);
            }
            
           //t_c_b = (params.p_v_w==true && params.p_b_c_b=="Close")?(data.lengths[0].vertical_side_close_height_prices.length>0)?t_c_b +(data.lengths[0].vertical_side_close_height_prices[0].cost)*2:t_c_b+0:t_c_b + 0;
            
            //t_c_b = (params.b_h_t4==false)?0:t_c_b;
            if(params.add_storage_check_right==true && data.utility_side.length>0)
            {   
                if (params.p_r_w != "Close"/*  && (!params.p_u_c && !params.cB_addStorage_check_right) */) {
                    b.utility_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_utility_price_changed!=true)?rightLeanData.utility_price:(params.p_v_w==true)?((data.utility_side[0].vertical_side_cost *2)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)).toFixed(2):((data.utility_side[0].side_close_cost * 2)+(data.end[0].end_close_cost * 2)).toFixed(2);
                } else {
                    b.utility_price = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_utility_price_changed!=true)?rightLeanData.utility_price:(params.p_v_w==true)?((data.utility_side[0].vertical_side_cost)+(data.end[0].vertical_ends_cost * 2)+(data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2)).toFixed(2):((data.utility_side[0].side_close_cost)+(data.end[0].end_close_cost * 2)).toFixed(2);
                }
            
               t_c_b = parseFloat(t_c_b) + parseFloat(b.utility_price);
               b.utility_length = params.add_storage_right;
               b.has_utility = true;
               b.utility_vertical = (params.p_v_w)?true:false;
               b.utility_on_centers = (const_var.DistanceArr[params.p_b_t][params.p_r_s]==undefined)?5:const_var.DistanceArr[params.p_b_t][params.p_r_s];
            //    CalCulateRoofUtilityEndPrice = (params.p_v_w==true)?((data.end[0].vertical_ends_cost * 2)+(data.end[0].end_close_cost * 2)):(data.end[0].end_close_cost * 2);     
               CalCulateRoofUtilityEndPrice = parseFloat(b.utility_price);     
            }

            if(const_var.b_r_p_l_to_a.length > 0 && const_var.b_r_p_l_to_a[params.b_l_t_r_pR]!=undefined)
            {            
                if(const_var.b_r_p_l_to_a[params.b_l_t_r_pR].cost_type == "%")
                {
                    var splitVal = (const_var.b_r_p_l_to_a[params.b_l_t_r_pR].percentage_of!=undefined && const_var.b_r_p_l_to_a[params.b_l_t_r_pR].percentage_of!=0)?const_var.b_r_p_l_to_a[params.b_l_t_r_pR].percentage_of.split(","):0;
                    var splval = 0;
                    if(splitVal!=0)
                    {
                        if(splitVal.includes("1")!=false)
                        {
                            splval = splval + CalCulateRoofBasePrice;
                        }if(splitVal.includes("2")!=false)
                        {
                            if(CalCulateRoofUtilityEndPrice!=0)
                            {
                                splval = splval + CalCulateRoofUtilityEndPrice;
                            }
                            splval = splval + CalCulateRoofEndClosePrice;
                        }if(splitVal.includes("3")!=false)
                        {
                            splval = splval + CalCulateRoofEndGablePrice;
                        }
                    }else
                    {
                        splval = splval + CalCulateRoofBasePrice;
                    }
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_roof_pitch_price_changed!=true)?rightLeanData.roof_pitch_price:(const_var.b_r_p_l_to_a[params.b_l_t_r_pR])?convertToTwoDecimalNumber(splval * const_var.b_r_p_l_to_a[params.b_l_t_r_pR].cost / 100):0;
                    b.roof_pitch = const_var.b_r_p_l_to_a[params.b_l_t_r_pR].roof_pitch;
                    b.roof_pitch_name = const_var.b_r_p_l_to_a[params.b_l_t_r_pR].roof_pitch;
                    b.roof_pitch_price = finalCertPrice;   
                    t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);             
                }
                else
                {
                    var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.right_lean_roof_pitch_price_changed!=true)?rightLeanData.roof_pitch_price:(const_var.b_r_p_l_to_a[params.b_l_t_r_pR])?const_var.b_r_p_l_to_a[params.b_l_t_r_pR].cost:0;
                    b.roof_pitch = const_var.b_r_p_l_to_a[params.b_l_t_r_pR].roof_pitch;
                    b.roof_pitch_name = const_var.b_r_p_l_to_a[params.b_l_t_r_pR].roof_pitch;
                    b.roof_pitch_price = finalCertPrice;    
                    t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);            
                }
            }else{
           
                b.roof_pitch = "3/12";
                b.roof_pitch_name = "3/12";
                b.roof_pitch_price = 0;   
            }
            if(const_var.c_f_aCer[params.p_e_i]!=undefined && params.p_e_i!= "" && params.p_e_i!= "Select" && params.leanR_p_e_i!="" && params.leanR_p_e_i!="0" && params.leanR_p_e_i!="other")
            {
                if(params.p_i_s=="1")
                {
                    if( Object.keys(const_var.makeCertificateArrayRight).length > 0 && const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of!=undefined && const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?rightLeanData.certificate_price:(const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of_cost)?(t_c_b * const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?rightLeanData.certificate_price:(const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                    }else{
                        var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?rightLeanData.certificate_price:(const_var.makeCertificateArrayRight[params.leanR_p_e_i].certification_concrete_cost)?const_var.makeCertificateArrayRight[params.leanR_p_e_i].certification_concrete_cost:0;
                        //t_c_b = parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price = finalCertPrice;
                    }
                }else{
                    if(const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of_cost!=0)
                    {
                        if(const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of!=undefined && const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of=="building_amount")
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?rightLeanData.certificate_price:(const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of_cost)?(t_c_b * const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }else
                        {
                            var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?rightLeanData.certificate_price:(const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of_cost)?(CalCulateRoofBasePrice * const_var.makeCertificateArrayRight[params.leanR_p_e_i].percentage_of_cost / 100):0;
                            //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                            b.certificate_price = finalCertPrice;
                        }
                        
                        //console.log(b.certificate_price,"b.certificate_price",b.certificate_price * certVal);
                    }else
                    {
                        var finalCertPrice = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?rightLeanData.certificate_price:(const_var.makeCertificateArrayRight[params.leanR_p_e_i].cost)?const_var.makeCertificateArrayRight[params.leanR_p_e_i].cost:0;
                        //t_c_b =  parseFloat(t_c_b) + parseFloat(finalCertPrice);
                        b.certificate_price =finalCertPrice;
                    }
                }
            }if(params.leanR_p_e_i=="other")
            {
                b.certificate = {'gauge': 0,'certified': 1,'has_double_leg': 0,'has_ladder_leg': 0,'has_other_leg': 0,'height': 0,'id': -1,'cost':0,'is_default': "no",'length': 0,'map_id': 0,'name': "Other"};
                b.certificate_other_name = (params.leanR_p_e_i_other!='')?params.leanR_p_e_i_other:'Other';
                b.certificate_price  = (UpdatePriceRecord==true && const_var.UpdatedPriceData.certificate_price_changed!=true)?rightLeanData.certificate_price:0;
                //t_c_b =  parseFloat(t_c_b) + parseFloat(b.certificate_price);
            }
        if(params.continous_right_lean==true)
        {
            b.continous_lean = true;
        }else
        {
            b.continous_lean = false;
        }
        
        b.pricing_data =  data;
        b.t_c_b = parseFloat(t_c_b);
        const_var.leanto.push(b);
        const_var.UpdatedPriceData.leanto.push(b);
        }
        else
        {
            removeDataFromArray(2);
        }
       
        // console.log("rahul here");
        cP(const_var.a_p_d_a,true);

    }
export const removeDataFromArray = (val) =>
{
    // console.log(const_var.leanto,"const_var.leanto",val);
    for(var i=0;i<=const_var.leanto.length-1;i++)
    {
        if(const_var.leanto[i].leanto_type==val)
        {
            const_var.leanto.splice(i,1);
            const_var.UpdatedPriceData.leanto.splice(i,1);
        }
    }
    // console.log(const_var.leanto,"const_var.leanto",val);
    
}
export const removeDataFromArrayCompare = (val) =>
{
    for(var i=0;i<=const_var.leantoCompare.length-1;i++)
    {
        if(const_var.leantoCompare[i].leanto_type==val)
        {
            const_var.leantoCompare.splice(i,1);
        }
    }
    
}
export const SetPriceforComponent = (data)=>
{
    //const_var.entry_points = data;
    data.map((val, index) => {
            
        const_var.entry_points.map((res, i) => {
            if(res.uniqueId==val.uniqueId)
            {
                const_var.entry_points[i].entry_price = val.entry_price;
                const_var.entry_points[i].entry_trim_kit_price = val.entry_trim_kit_price;
                const_var.entry_points[i].entry_header_seal_price = val.entry_header_seal_price;
                const_var.entry_points[i].entry_chain_hoist_price = val.entry_chain_hoist_price;
                const_var.entry_points[i].entry_automatic_openers_price = val.entry_automatic_openers_price;
                const_var.entry_points[i].entry_garageDoor_color_price = (val.entry_garageDoor_color_price==undefined)?0:Number(val.entry_garageDoor_color_price);
            }
        })
    })
    // console.log(const_var.entry_points,"const_var.entry_points")
    // data.entry_points.map((val, index) => {
    //     var i = const_var.d_w_a_r.length;
    //     while (i--) {
    //         if(const_var.d_w_a_r[i].uniqueId==val.uniqueId)
    //         {
    //             if((const_var.d_w_a_r[i].pos=="left" || const_var.d_w_a_r[i].pos=="right"))
    //             {
    //                const_var.d_w_a_r[i].SidePrice = parseInt(val.entry_price);
    //             }if((const_var.d_w_a_r[i].pos=="front" || const_var.d_w_a_r[i].pos=="back"))
    //             {
    //                 const_var.d_w_a_r[i].price = parseInt(val.entry_price);
    //             }
    //             const_var.d_w_a_r[i].trimkitPrice = parseInt(val.entry_trim_kit_price);
    //             const_var.d_w_a_r[i].header_seal_price = parseInt(val.entry_header_seal_price);
    //             const_var.d_w_a_r[i].chain_hoist_price = parseInt(val.entry_chain_hoist_price);
    //         } 
    //     }
    //     var ii = const_var.entry_points.length;
    //     while (ii--) {
    //         if(const_var.entry_points[ii].uniqueId ==val.uniqueId)
    //         {
    //             const_var.entry_points[ii]['entry_price'] = parseInt(val.entry_price);
    //             const_var.entry_points[ii]['entry_chain_hoist_price'] = parseInt(val.entry_chain_hoist_price);
    //             const_var.entry_points[ii]['entry_header_seal_price'] = parseInt(val.entry_header_seal_price);
    //             const_var.entry_points[ii]['entry_trim_kit_price'] = parseInt(val.entry_trim_kit_price);
    //         }
    //     }  
    // })
    
}
const IsNumeric = (newVal) => /^-{0,1}\d*\.{0,1}\d+$/.test(newVal);
export const updatePriceCalculation =(newVal,oldVal,pointKey,leanVal,objIndex,uniqueId, elementObjIndex, extraItemType,cupolaId)=>{
    //newVal = parseFloat(newVal);
    // console.log({newVal,oldVal,pointKey,leanVal,objIndex,uniqueId, elementObjIndex, extraItemType,cupolaId,})
    let data = IsNumeric(newVal);
    let finalPrice = 0;
    newVal = newVal.replace(/^0+/, '');
    var regex = /^\d+(\.\d{0,2})?$/g;
    if (!regex.test(newVal)) {
        if(isNaN(parseFloat(newVal))==true || newVal=="")
        {
            newVal = 0;
        }else
        {
            newVal = newVal.split(".");
            newVal = newVal[0]+'.'+newVal[1].substring(0, 2);
        }
    }
    // var regex = /^\d+(\.\d{0,2})?$/g;
    // if (!regex.test(newVal)) {
    //     newVal = 0;
    // }
    if(isNaN(parseFloat(newVal))==true)
    {
        newVal = 0;
        const_var.UpdatedPriceData[pointKey] = 0;
    }
    if(oldVal!="extraitems" && leanVal==undefined)
    {

        if(pointKey == "order_extra_items") {
            const_var.UpdatedPriceData[pointKey].order_permit_fee = newVal;
        } else {
            const_var.UpdatedPriceData[pointKey] = newVal;
        }
    }
    // if(pointKey=="certificate_price")
    // {
    //     if(const_var.UpdatedPriceData.leanto.length>0)
    //     {
    //         for (var i = 0; i <=const_var.UpdatedPriceData.leanto.length-1; i++) {
    //             const_var.UpdatedPriceData.leanto[i].certificate_price = 0;
    //             const_var.post_data.building.leanto[i].certificate_price = 0;
    //         }
    //     }
    // }
    // if(oldVal=="extraitems" && isNaN(pointKey)==false && leanVal==undefined)
    // {
    //     const_var.ExtraItemsFeaturesArray[pointKey].cost = parseInt(newVal);
    // }
    let holdComponentIndex = '';
    if(uniqueId!=undefined)
    {

        var ii = const_var.entry_points.length;
        
        while (ii--) {
            if(const_var.entry_points[ii].uniqueId ==uniqueId)
            {
                holdComponentIndex = ii;
                //console.log(const_var.entry_points[ii][pointKey],"const_var.entry_points[ii][pointKey]")
                
                const_var.entry_points[ii][pointKey] = (newVal);
                if (const_var.garageDoorColor[params.g_d_c_id].percentage_of_cost > 0) {
                    const_var.entry_points[ii].entry_garageDoor_color_price = const_var.entry_points[ii].entry_price * const_var.garageDoorColor[params.g_d_c_id].cost / 100;
                }

            }
        }
       
    }
    let cupolaIndex = '';
    if (cupolaId != undefined) {
        let cupolaEntriesLength = const_var.cupolaEntries.length;
        while (cupolaEntriesLength--) {
            if (const_var.cupolaEntries[cupolaEntriesLength].uniqueId == cupolaId) {
                cupolaIndex = cupolaEntriesLength;
                const_var.cupolaEntries[cupolaEntriesLength][pointKey] = (newVal);
            }
        }
    }

    if(oldVal=="extraitems" && leanVal==undefined)
    {
        
        const_var.UpdatedPriceData.elements[pointKey].item_price = (newVal);
        const_var.UpdatedPriceData.elements[pointKey].is_edit = true;
        // console.log(const_var.additionalFeaturesArray,"const_var.additionalFeaturesArray", pointKey,"elementObjIndex",elementObjIndex );
        if(elementObjIndex !== undefined && extraItemType == "additionalFeatures"){
            const_var.UpdatedPriceData['elements'][pointKey.toString()].item_price = newVal;
            const_var.UpdatedPriceData['elements'][pointKey.toString()].is_edit = true;
        }
        if(elementObjIndex !== undefined && extraItemType == "extraitemsCheckbox"){
            const_var.ExtraItemsFeaturesArray[elementObjIndex].cost = newVal;
        }
        
        if(elementObjIndex!== undefined && extraItemType == "extraitemsCheckboxwithQuantity") {            
            const_var.ExtraItemsFeaturesQuantityArray[elementObjIndex].cost = newVal;
            
        }
        //console.log(const_var.UpdatedPriceData['elements'],"const_var.UpdatedPriceData['elements']")
    }
    // if(const_var.UpdatedPriceData['roof_style_price']==0)
    // {
    //     const_var.UpdatedPriceData['roof_style_price'] = oldVal;
    // }
    if(leanVal!=undefined)
    {
        if(const_var.UpdatedPriceData.leanto.length>0)
        {
            // console.log(const_var.UpdatedPriceData ,"UpdatedPriceData");
            const_var.UpdatedPriceData.leanto[objIndex][pointKey] =  (newVal);
            // if(const_var.UpdatedPriceData.leanto[objIndex]['basic_price']==0)
            // {
            //     const_var.UpdatedPriceData.leanto[objIndex]['basic_price'] = oldVal;
            // }
            if(leanVal=="left")
            {
                const_var.UpdatedPriceData.surcharge_amount = undefined;
                cPforLLeanOnly(const_var.leanGetDataLeft,objIndex,const_var.UpdatedPriceData.leanto[objIndex]);
            }if(leanVal=="right")
            {
                const_var.UpdatedPriceData.surcharge_amount = undefined;
                cPforRLeanOnly(const_var.leanGetDataRight,objIndex,const_var.UpdatedPriceData.leanto[objIndex]);
            }
            if(leanVal=="front")
            {
                const_var.UpdatedPriceData.surcharge_amount = undefined;
                cPforFLeanOnly(const_var.leanGetDataFront,objIndex,const_var.UpdatedPriceData.leanto[objIndex]);
            }
            if(leanVal=="back")
            {
                const_var.UpdatedPriceData.surcharge_amount = undefined;
                cPforBLeanOnly(const_var.leanGetDataBack,objIndex,const_var.UpdatedPriceData.leanto[objIndex]);
            }
        }
    }else
    {
        const_var.UpdatedPriceData.surcharge_amount = undefined;
        cP('',undefined,holdComponentIndex);
    }
    
}


export const makeCertificateArrayLeft = (type)=>
{
    // console.log(const_var.makeCertificateArrayLeft,"const_var.makeCertificateArrayLeft")
    if(type=="left")
    {
        // const_var.leftCertArr = {};
        const_var.leftCertArr["Select"] = 0;
        // console.log(const_var.leanGetDataLeft.certificate.length,"const_var.leanGetDataLeft.certificate.length");
        if(const_var.leanGetDataLeft.certificate!=undefined){
        if(const_var.leanGetDataLeft!=undefined && const_var.leanGetDataLeft.certificate.length>0)
        {
             let newData = const_var.leanGetDataLeft.certificate.filter(certificate => certificate.certificate_id == params.lean_p_e_i);
             if(newData!=undefined && newData.length==0)
             {
                params.lean_p_e_i = "0";
             }   
            
        }
    }
        if(const_var.leanGetDataLeft!=undefined && const_var.leanGetDataLeft.certificate!=undefined && const_var.leanGetDataLeft.certificate.length>0)
        {
            for(var i=0;i<=const_var.leanGetDataLeft.certificate.length-1;i++)
            {
                
                if(params.lean_p_e_l ==true)
                {
                    if(const_var.leanGetDataLeft.certificate[i].has_other_leg==1)
                    {
                        
                        if(const_var.leanGetDataLeft.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataLeft.certificate[i].gauge)
                         {
                             const_var.leftCertArr[const_var.leanGetDataLeft.certificate[i].name] =const_var.leanGetDataLeft.certificate[i].certificate_id;
                             const_var.makeCertificateArrayLeft[const_var.leanGetDataLeft.certificate[i].name] = const_var.leanGetDataLeft.certificate[i];
                         }                
                         if(const_var.leanGetDataLeft.certificate[i].is_default=="yes" && (const_var.leanGetDataLeft.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataLeft.certificate[i].gauge) )
                         {
                             //params.lean_p_e_i =(params.lean_p_e_i=="Select")?const_var.leanGetDataLeft.certificate[i].certificate_id:params.lean_p_e_i;
                            if(const_var.crmSetting.is_Edit==true)
                            {
                                params.lean_p_e_i = (params.lean_p_e_i!="" || params.lean_p_e_i!="Select")?params.lean_p_e_i:const_var.leanGetDataLeft.certificate[i].certificate_id;
                            }else
                            {
                                params.lean_p_e_i =(params.lean_p_e_i=="Select")?const_var.leanGetDataLeft.certificate[i].certificate_id:params.lean_p_e_i;
                                if(params.lean_p_e_i==0)
                                {
                                    params.lean_p_e_i =(params.lean_p_e_i==0)?const_var.leanGetDataLeft.certificate[i].certificate_id:params.lean_p_e_i;
                                }
                            }
                         }
                    }
                }else
                {
                    if(const_var.leanGetDataLeft.certificate[i].has_other_leg==0)
                    {
                        //const_var.makeCertificateArrayLeft[const_var.leanGetDataLeft.certificate[i].name] = const_var.leanGetDataLeft.certificate[i];
                        if(const_var.leanGetDataLeft.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataLeft.certificate[i].gauge)
                         {
                             const_var.leftCertArr[const_var.leanGetDataLeft.certificate[i].name] =const_var.leanGetDataLeft.certificate[i].certificate_id;
                             const_var.makeCertificateArrayLeft[const_var.leanGetDataLeft.certificate[i].name] = const_var.leanGetDataLeft.certificate[i];
                         }                
                         if(const_var.leanGetDataLeft.certificate[i].is_default=="yes" && (const_var.leanGetDataLeft.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataLeft.certificate[i].gauge) )
                         {
                             //params.lean_p_e_i =(params.lean_p_e_i=="Select")?const_var.leanGetDataLeft.certificate[i].certificate_id:params.lean_p_e_i;
                            if(const_var.crmSetting.is_Edit==true)
                            {
                                params.lean_p_e_i = (params.lean_p_e_i!="" || params.lean_p_e_i!="Select")?params.lean_p_e_i:const_var.leanGetDataLeft.certificate[i].certificate_id;
                            }else
                            {
                                
                                params.lean_p_e_i =(params.lean_p_e_i=="Select")?const_var.leanGetDataLeft.certificate[i].certificate_id:params.lean_p_e_i;
                                if(params.lean_p_e_i==0)
                                {
                                    params.lean_p_e_i =(params.lean_p_e_i==0)?const_var.leanGetDataLeft.certificate[i].certificate_id:params.lean_p_e_i;
                                }
                            }
                         }
                    }
                }
            }
        }
        if(const_var.loginSession==true)
        {
            const_var.leftCertArr['Other Rating/Certification'] = 'other';
        }
    }
    if(type=="front")
    {
        // const_var.leftCertArr = {};
        const_var.frontCertArr["Select"] = 0;
        // console.log(const_var.leanGetDataFront.certificate.length,"const_var.leanGetDataLeft.certificate.length");
        if(const_var.leanGetDataFront.certificate!=undefined && const_var.leanGetDataFront.certificate.length>0)
        {
             let newData = const_var.leanGetDataFront.certificate.filter(certificate => certificate.certificate_id == params.leanF_p_e_i);
             if(newData!=undefined && newData.length==0)
             {
                params.leanF_p_e_i = "0";
             }   
            
        }
        if(const_var.leanGetDataFront!=undefined && const_var.leanGetDataFront.certificate!=undefined && const_var.leanGetDataFront.certificate.length>0)
        {
            for(var i=0;i<=const_var.leanGetDataFront.certificate.length-1;i++)
            {
                
                if(params.leanF_p_e_l ==true)
                {
                    if(const_var.leanGetDataFront.certificate[i].has_other_leg==1)
                    {
                        if(const_var.leanGetDataFront.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataFront.certificate[i].gauge)
                         {
                             const_var.leftCertArr[const_var.leanGetDataFront.certificate[i].name] =const_var.leanGetDataFront.certificate[i].certificate_id;
                             const_var.makeCertificateArrayFront[const_var.leanGetDataFront.certificate[i].name] = const_var.leanGetDataFront.certificate[i];
                         }                
                         if(const_var.leanGetDataFront.certificate[i].is_default=="yes" && (const_var.leanGetDataFront.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataFront.certificate[i].gauge) )
                         {
                             //params.leanF_p_e_i =(params.leanF_p_e_i=="Select")?const_var.leanGetDataFront.certificate[i].certificate_id:params.leanF_p_e_i;
                            if(const_var.crmSetting.is_Edit==true)
                            {
                                params.leanF_p_e_i = (params.leanF_p_e_i!="" || params.leanF_p_e_i!="Select")?params.leanF_p_e_i:const_var.leanGetDataFront.certificate[i].certificate_id;
                            }else
                            {
                                params.leanF_p_e_i =(params.leanF_p_e_i=="Select")?const_var.leanGetDataFront.certificate[i].certificate_id:params.leanF_p_e_i;
                                if(params.leanF_p_e_i==0)
                                {
                                    params.leanF_p_e_i =(params.leanF_p_e_i==0)?const_var.leanGetDataFront.certificate[i].certificate_id:params.leanF_p_e_i;
                                }
                            }
                         }
                    }
                }else
                {
                    if(const_var.leanGetDataFront.certificate[i].has_other_leg==0)
                    {
                        if(const_var.leanGetDataFront.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataFront.certificate[i].gauge)
                         {
                             const_var.leftCertArr[const_var.leanGetDataFront.certificate[i].name] =const_var.leanGetDataFront.certificate[i].certificate_id;
                             const_var.makeCertificateArrayFront[const_var.leanGetDataFront.certificate[i].name] = const_var.leanGetDataFront.certificate[i];
                         }                
                         if(const_var.leanGetDataFront.certificate[i].is_default=="yes" && (const_var.leanGetDataFront.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataFront.certificate[i].gauge) )
                         {
                             //params.leanF_p_e_i =(params.leanF_p_e_i=="Select")?const_var.leanGetDataFront.certificate[i].certificate_id:params.leanF_p_e_i;
                            if(const_var.crmSetting.is_Edit==true)
                            {
                                params.leanF_p_e_i = (params.leanF_p_e_i!="" || params.leanF_p_e_i!="Select")?params.leanF_p_e_i:const_var.leanGetDataFront.certificate[i].certificate_id;
                            }else
                            {
                                
                                params.leanF_p_e_i =(params.leanF_p_e_i=="Select")?const_var.leanGetDataFront.certificate[i].certificate_id:params.leanF_p_e_i;
                                if(params.leanF_p_e_i==0)
                                {
                                    params.leanF_p_e_i =(params.leanF_p_e_i==0)?const_var.leanGetDataFront.certificate[i].certificate_id:params.leanF_p_e_i;
                                }
                            }
                         }
                    }
                }
            }
        }
        if(const_var.loginSession==true)
        {
            const_var.frontCertArr['Other Rating/Certification'] = 'other';
        }
    }
    if(type=="back")
    {
        // const_var.leftCertArr = {};
        const_var.backCertArr["Select"] = 0;
        if(const_var.leanGetDataBack!='' && const_var.leanGetDataBack!=undefined && const_var.leanGetDataBack.certificate.length>0)
        {
             let newData = const_var.leanGetDataBack.certificate.filter(certificate => certificate.certificate_id == params.leanB_p_e_i);
             if(newData!=undefined && newData.length==0)
             {
                params.leanB_p_e_i = "0";
             }   
            
        }
        if(const_var.leanGetDataBack!=undefined && const_var.leanGetDataBack.certificate!=undefined && const_var.leanGetDataBack.certificate.length>0)
        {
            for(var i=0;i<=const_var.leanGetDataBack.certificate.length-1;i++)
            {
                
                if(params.leanB_p_e_l ==true)
                {
                    if(const_var.leanGetDataBack.certificate[i].has_other_leg==1)
                    {
                        if(const_var.leanGetDataBack.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataBack.certificate[i].gauge)
                         {
                             const_var.leftCertArr[const_var.leanGetDataBack.certificate[i].name] =const_var.leanGetDataBack.certificate[i].certificate_id;
                             const_var.makeCertificateArrayBack[const_var.leanGetDataBack.certificate[i].name] = const_var.leanGetDataBack.certificate[i];
                         }                
                         if(const_var.leanGetDataBack.certificate[i].is_default=="yes" && (const_var.leanGetDataBack.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataBack.certificate[i].gauge) )
                         {
                             //params.leanB_p_e_i =(params.leanB_p_e_i=="Select")?const_var.leanGetDataBack.certificate[i].certificate_id:params.leanB_p_e_i;
                            if(const_var.crmSetting.is_Edit==true)
                            {
                                params.leanB_p_e_i = (params.leanB_p_e_i!="" || params.leanB_p_e_i!="Select")?params.leanB_p_e_i:const_var.leanGetDataBack.certificate[i].certificate_id;
                            }else
                            {
                                params.leanB_p_e_i =(params.leanB_p_e_i=="Select")?const_var.leanGetDataBack.certificate[i].certificate_id:params.leanB_p_e_i;
                                if(params.leanB_p_e_i==0)
                                {
                                    params.leanB_p_e_i =(params.leanB_p_e_i==0)?const_var.leanGetDataBack.certificate[i].certificate_id:params.leanB_p_e_i;
                                }
                            }
                         }
                    }
                }else
                {
                    if(const_var.leanGetDataBack.certificate[i].has_other_leg==0)
                    {
                        if(const_var.leanGetDataBack.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataBack.certificate[i].gauge)
                         {
                             const_var.leftCertArr[const_var.leanGetDataBack.certificate[i].name] =const_var.leanGetDataBack.certificate[i].certificate_id;
                             const_var.makeCertificateArrayBack[const_var.leanGetDataBack.certificate[i].name] = const_var.leanGetDataBack.certificate[i];
                         }                
                         if(const_var.leanGetDataBack.certificate[i].is_default=="yes" && (const_var.leanGetDataBack.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataBack.certificate[i].gauge) )
                         {
                             //params.leanB_p_e_i =(params.leanB_p_e_i=="Select")?const_var.leanGetDataBack.certificate[i].certificate_id:params.leanB_p_e_i;
                            if(const_var.crmSetting.is_Edit==true)
                            {
                                params.leanB_p_e_i = (params.leanB_p_e_i!="" || params.leanB_p_e_i!="Select")?params.leanB_p_e_i:const_var.leanGetDataBack.certificate[i].certificate_id;
                            }else
                            {
                                
                                params.leanB_p_e_i =(params.leanB_p_e_i=="Select")?const_var.leanGetDataBack.certificate[i].certificate_id:params.leanB_p_e_i;
                                if(params.leanB_p_e_i==0)
                                {
                                    params.leanB_p_e_i =(params.leanB_p_e_i==0)?const_var.leanGetDataBack.certificate[i].certificate_id:params.leanB_p_e_i;
                                }
                            }
                         }
                    }
                }
            }
        }
        if(const_var.loginSession==true)
        {
            const_var.backCertArr['Other Rating/Certification'] = 'other';
        }
    }
    if(type=="right")
    {
        // const_var.rightCertArr = {};
        const_var.rightCertArr['Select'] = 0;
        if(const_var.leanGetDataRight!='' && const_var.leanGetDataRight!=undefined && const_var.leanGetDataRight.certificate.length>0)
        {
             let newData = const_var.leanGetDataRight.certificate.filter(certificate => certificate.certificate_id == params.leanR_p_e_i);
             if(newData!=undefined && newData.length==0)
             {
                params.leanR_p_e_i = "0";
             }   
            
        }
        if(const_var.leanGetDataRight!=undefined && const_var.leanGetDataRight.certificate!=undefined && const_var.leanGetDataRight.certificate.length>0)
        {
            for(var i=0;i<=const_var.leanGetDataRight.certificate.length-1;i++)
            {
                if(params.leanR_p_e_l ==true)
                {
                    if(const_var.leanGetDataRight.certificate[i].has_other_leg==1)
                    {
                        if(const_var.leanGetDataRight.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataRight.certificate[i].gauge)
                         {
                             const_var.rightCertArr[const_var.leanGetDataRight.certificate[i].name] =const_var.leanGetDataRight.certificate[i].certificate_id;
                             const_var.makeCertificateArrayRight[const_var.leanGetDataRight.certificate[i].name] = const_var.leanGetDataRight.certificate[i];
                         }                
                         if(const_var.leanGetDataRight.certificate[i].is_default=="yes" && (const_var.leanGetDataRight.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataRight.certificate[i].gauge) )
                         {
                            if(const_var.crmSetting.is_Edit==true)
                            {
                                params.leanR_p_e_i = (params.leanR_p_e_i!="" || params.leanR_p_e_i!="Select")?params.leanR_p_e_i:const_var.leanGetDataRight.certificate[i].certificate_id;
                            }else
                            {
                                params.leanR_p_e_i =(params.leanR_p_e_i=="Select")?const_var.leanGetDataRight.certificate[i].certificate_id:params.leanR_p_e_i;
                                if(params.leanR_p_e_i==0)
                                {
                                    params.leanR_p_e_i =(params.leanR_p_e_i==0)?const_var.leanGetDataRight.certificate[i].certificate_id:params.leanR_p_e_i;
                                }
                            }
                        }
                    }
                }else
                {
                    if(const_var.leanGetDataRight.certificate[i].has_other_leg==0)
                    {
                        if(const_var.leanGetDataRight.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataRight.certificate[i].gauge)
                         {
                             const_var.rightCertArr[const_var.leanGetDataRight.certificate[i].name] =const_var.leanGetDataRight.certificate[i].certificate_id;
                             const_var.makeCertificateArrayRight[const_var.leanGetDataRight.certificate[i].name] = const_var.leanGetDataRight.certificate[i];
                         }                
                         if(const_var.leanGetDataRight.certificate[i].is_default=="yes" && (const_var.leanGetDataRight.certificate[i].gauge==0 || params.gauge_val == const_var.leanGetDataRight.certificate[i].gauge) )
                         {
                            if(const_var.crmSetting.is_Edit==true)
                            {
                                params.leanR_p_e_i = (params.leanR_p_e_i!="" || params.leanR_p_e_i!="Select")?params.leanR_p_e_i:const_var.leanGetDataRight.certificate[i].certificate_id;
                            }else
                            {
                                params.leanR_p_e_i =(params.leanR_p_e_i=="Select")?const_var.leanGetDataRight.certificate[i].certificate_id:params.leanR_p_e_i;
                                if(params.leanR_p_e_i==0)
                                {
                                    params.leanR_p_e_i =(params.leanR_p_e_i==0)?const_var.leanGetDataRight.certificate[i].certificate_id:params.leanR_p_e_i;
                                }
                            }
                             //params.leanR_p_e_i =(params.leanR_p_e_i=="Select")?const_var.leanGetDataRight.certificate[i].certificate_id:params.leanR_p_e_i;
                         }
                    }
                }
            }
        }
        if(const_var.loginSession==true)
        {
            const_var.rightCertArr['Other Rating/Certification'] ='other';
        }
    }
}
export const makeCertificateArray = () =>{
    const_var.c_f_a = [];
    const_var.c_f_a_per = [];
    const_var.c_f_a_sCer = [];
    const_var.c_f_aCer = [];
    const_var.c_f_i_a = [];
    const_var.main_extraItems_arr = {};
    const_var.c_f_b_a = [];
    const_var.e_i_a = [];
    var data = const_var.a_p_d_a; 
    params.p_e_i = (params.p_e_i!="")?params.p_e_i:"Select";    
    if(data.certificate.length==0)
    {
        const_var.main_extraItems_arr = [];
    } 
    let legChk = params.p_e_l ==true ?1:0;
    let newDistanceData = data.certificate.find((data)=>data && data.distance_on_center==4 && data.has_other_leg==legChk && (data.gauge==0 || data.gauge==params.gauge_val));
    if ( params.isDefaultfourFeet && newDistanceData != undefined && (!const_var.crmSetting.is_Edit || const_var.isPriceAPIcalled)) {
        params.isDefaultfourFeet = false;
    }
    if((const_var.a_p_d_a.extra_items) && const_var.a_p_d_a.extra_items.length>0 && const_var.a_p_d_a.extra_items[0].checkbox!=undefined)
    {
        let dataNew = const_var.a_p_d_a.extra_items[0].checkbox.filter(data=>data.name == "fourth_center_cost" || data.label == "4ft on Center");
        if(dataNew.length==0)
        {
            params.isDefaultfourFeet = false;
            params.fourth_center_cost = false;
            if(const_var.a_p_d_a && const_var.a_p_d_a.building_structure!=undefined && const_var.a_p_d_a.building_structure.length > 0 && const_var.a_p_d_a.building_structure[0].distance_on_center!=undefined){
                const_var.DistanceArr[params.p_b_t][params.p_r_s] = const_var.a_p_d_a.building_structure[0].distance_on_center;
            }
        }
    }
    for(var i=0;i<=data.certificate.length-1;i++)
    {
        
         if(params.p_e_l ==true)
         {
             if(data.certificate[i].has_other_leg==1)
             {
                 const_var.c_f_aCer[data.certificate[i].certificate_id] = data.certificate[i];
                 const_var.c_f_a_sCer[data.certificate[i].certificate_id] = data.certificate[i].certified;
                 const_var.c_f_a[data.certificate[i].certificate_id] = (data.certificate[i].cost);// + (data.Certificate[i].certification_concrete_cost);

                 const_var.c_f_a_per[data.certificate[i].certificate_id] = (data.certificate[i].percentage_of_cost !=undefined)?data.certificate[i].percentage_of_cost:0;
                 const_var.c_f_i_a[data.certificate[i].certificate_id] = data.certificate[i].certification_concrete_cost;
                 const_var.e_i_a.push(data.certificate[i]);
                 if(data.certificate[i].gauge==0 || params.gauge_val == data.certificate[i].gauge)
                 {
                     const_var.main_extraItems_arr[data.certificate[i].name] =data.certificate[i].certificate_id;
                 }                
                 const_var.g_v_a[data.certificate[i].certificate_id] = data.certificate[i].gauge;
                 if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || params.gauge_val == data.certificate[i].gauge) )
                 {
                    if(const_var.crmSetting.is_Edit==true)
                    {
                        params.p_e_i = (params.p_e_i!="")?params.p_e_i:data.certificate[i].certificate_id;
                        let checkCer = data.certificate.filter(data=>data.certificate_id==params.p_e_i);
                       if(checkCer.length==0 && params.p_e_i!="other" && params.p_e_i!="Select")
                        {
                            params.p_e_i = data.certificate[i].certificate_id;
                        }
                    }else
                    {
                        params.p_e_i = data.certificate[i].certificate_id;
                    }
                    if(newDistanceData!=undefined && (!const_var.crmSetting.is_Edit /* || const_var.isPriceAPIcalled */))
                    {
                        if(params.p_e_i == data.certificate[i].certificate_id && data.certificate[i].distance_on_center!=undefined && data.certificate[i].distance_on_center!=0)
                        {
                            params.fourth_center_cost = (data.certificate[i].distance_on_center==4)?true:params.fourth_center_cost;
                            const_var.DistanceArr[params.p_b_t][params.p_r_s] = (data.certificate[i].distance_on_center==4)?4:const_var.DistanceArr[params.p_b_t][params.p_r_s];
                            params.isDefaultfourFeet = (data.certificate[i].distance_on_center==4)?true:params.isDefaultfourFeet;
                        }else{
                            if(const_var.a_p_d_a.building_structure!=undefined && const_var.a_p_d_a.building_structure[0].distance_on_center!=undefined)
                            {
                                params.fourth_center_cost = (const_var.a_p_d_a.building_structure[0].distance_on_center==4)?true:false;
                                const_var.DistanceArr[params.p_b_t][params.p_r_s] = (const_var.a_p_d_a.building_structure[0].distance_on_center==4)?4:const_var.a_p_d_a.building_structure[0].distance_on_center;
                                params.isDefaultfourFeet = (const_var.a_p_d_a.building_structure[0].distance_on_center==4)?true:false;
                            }
                        }
                        if((const_var.a_p_d_a.extra_items) && const_var.a_p_d_a.extra_items.length>0 && const_var.a_p_d_a.extra_items[0].checkbox!=undefined && const_var.ExtraItemsFeaturesArray.length>0)
                        {
                            let dataNew = JSON.parse(JSON.stringify(const_var.a_p_d_a.extra_items[0].checkbox));
                            dataNew.map((val, index)=> {
                                if(val.name == "fourth_center_cost" || val.label == "4ft on Center")
                                {
                                    if(params.fourth_center_cost==true)
                                    {
                                        const_var.ExtraItemsFeaturesArray[index] = val;
                                        const_var.ExtraItemsFeaturesArray[index].quantity = 1;
                                        const_var.ExtraItemsFeaturesArray[index].is_checked = (params.fourth_center_cost==true)?true:false;
                                        const_var.ExtraItemsFeaturesArray[index].cost = 0;
                                        if (const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!= undefined){
                                            const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit = false;
                                            const_var.UpdatedPriceData['elements'][val.label.toString()].item_price = 0;
                                        }
                                    }else{
                                        if(const_var.ExtraItemsFeaturesArray[index]!=undefined)
                                        {
                                        const_var.ExtraItemsFeaturesArray[index].cost = val.cost;
                                        const_var.ExtraItemsFeaturesArray[index] = val;
                                        const_var.ExtraItemsFeaturesArray[index].is_checked = false;
                                        const_var.ExtraItemsFeaturesArray[index].quantity = 1;
                                        if (const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!= undefined){
                                            const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit = false;
                                            const_var.UpdatedPriceData['elements'][val.label.toString()].item_price = val.cost;
                                        }
                                        if ( const_var.crmSetting.is_Edit && const_var.ExtraItemsFeaturesQuantityArray.length > 0 ) {
                                            let filteredIndex = const_var.ExtraItemsFeaturesQuantityArray.findIndex(data=> data && data.name=="bows" && data.is_disabled!=undefined && data.is_disabled == true);
                                            if (filteredIndex >= 0) {
                                                const_var.ExtraItemsFeaturesQuantityArray.splice(filteredIndex,1);
                                            }
                                        }
                                        }
                                    }
                                    BuildingUpdate(true, "");
                                    if (params.add_front_lean == true) UpdateFrontLean();
                                    if (params.add_left_lean == true) UpdateLeftLean();
                                    if (params.add_right_lean == true) UpdateRightLean();
                                    if (params.add_back_lean == true) UpdateBackLean();
                                    DoorCSG(); 
                                }
                            })
                            
                        }
                    }
                 }
                if(const_var.crmSetting.is_Edit==true)
                {

                    if(params.p_e_i == data.certificate[i].certificate_id && data.certificate[i].distance_on_center!=undefined && data.certificate[i].distance_on_center!=0)
                    {
                        params.isDefaultfourFeet = (data.certificate[i].distance_on_center==4)?true:params.isDefaultfourFeet;
                    }
                }
                 
             }
         }else{ 
             if(data.certificate[i].has_other_leg==0)
             {
                // console.log( params.p_e_i ,"params.p_e_i11 22", const_var.b_o_J_1[params.p_b_t]);

                 const_var.c_f_aCer[data.certificate[i].certificate_id] = data.certificate[i];
                 const_var.c_f_a_sCer[data.certificate[i].certificate_id] = data.certificate[i].certified;
                 const_var.c_f_a[data.certificate[i].certificate_id] = (data.certificate[i].cost);// + (data.Certificate[i].certification_concrete_cost);

                 const_var.c_f_a_per[data.certificate[i].certificate_id] = (data.certificate[i].percentage_of_cost !=undefined)?data.certificate[i].percentage_of_cost:0;
                 const_var.c_f_i_a[data.certificate[i].certificate_id] = data.certificate[i].certification_concrete_cost;
                 const_var.e_i_a.push(data.certificate[i]);
                 if(data.certificate[i].gauge==0 || params.gauge_val == data.certificate[i].gauge)
                 {
                     const_var.main_extraItems_arr[data.certificate[i].name] =data.certificate[i].certificate_id;
                 }                 
                 const_var.g_v_a[data.certificate[i].certificate_id] = data.certificate[i].gauge;
                 if(data.certificate[i].is_default=="yes" && (data.certificate[i].gauge==0 || params.gauge_val == data.certificate[i].gauge) )
                 {
                    // console.log( params.p_e_i ,"params.p_e_i11 33 ", const_var.b_o_J_1[params.p_b_t]);

                    if(const_var.crmSetting.is_Edit==true)
                    {
                        params.p_e_i = (params.p_e_i!="")?params.p_e_i:data.certificate[i].certificate_id;
                        let checkCer = data.certificate.filter(data=>data.certificate_id==params.p_e_i);
                        if(checkCer.length==0 && params.p_e_i!="other" && params.p_e_i!="Select")
                        {
                            params.p_e_i = data.certificate[i].certificate_id;
                        }
                    }else
                    {
                        // console.log( params.p_e_i ,"params.p_e_i11 44", const_var.b_o_J_1[params.p_b_t]);

                        params.p_e_i = data.certificate[i].certificate_id;
                    }
                    if(newDistanceData!=undefined && (const_var.crmSetting.is_Edit!=true /* || const_var.isPriceAPIcalled */) )
                    {
                        //let distanceData = (const_var.crmSetting.is_Edit==true)?
                        if(params.p_e_i == data.certificate[i].certificate_id && data.certificate[i].distance_on_center!=undefined && data.certificate[i].distance_on_center!=0)
                        {
                            params.fourth_center_cost = (data.certificate[i].distance_on_center==4)?true:params.fourth_center_cost;
                            const_var.DistanceArr[params.p_b_t][params.p_r_s] = (data.certificate[i].distance_on_center==4)?4:const_var.DistanceArr[params.p_b_t][params.p_r_s];
                            params.isDefaultfourFeet = (data.certificate[i].distance_on_center==4)?true:params.isDefaultfourFeet;
                        }else{
                            if(const_var.a_p_d_a.building_structure!=undefined && const_var.a_p_d_a.building_structure[0].distance_on_center!=undefined)
                            {
                                params.fourth_center_cost = (const_var.a_p_d_a.building_structure[0].distance_on_center==4)?true:false;
                                const_var.DistanceArr[params.p_b_t][params.p_r_s] = (const_var.a_p_d_a.building_structure[0].distance_on_center==4)?4:const_var.a_p_d_a.building_structure[0].distance_on_center;
                                params.isDefaultfourFeet = (const_var.a_p_d_a.building_structure[0].distance_on_center==4)?true:false;
                            }
                        }

                        if((const_var.a_p_d_a.extra_items) && const_var.a_p_d_a.extra_items.length>0 && const_var.a_p_d_a.extra_items[0].checkbox!=undefined && const_var.ExtraItemsFeaturesArray.length>0)
                        {
                            let dataNew = JSON.parse(JSON.stringify(const_var.a_p_d_a.extra_items[0].checkbox));
                            dataNew.map((val, index)=> {
                                if(val.name == "fourth_center_cost" || val.label == "4ft on Center")
                                {
                                    if(params.fourth_center_cost==true)
                                    {
                                        const_var.ExtraItemsFeaturesArray[index] = val;
                                        const_var.ExtraItemsFeaturesArray[index].quantity = 1;
                                        const_var.ExtraItemsFeaturesArray[index].is_checked = (params.fourth_center_cost==true)?true:false;
                                        const_var.ExtraItemsFeaturesArray[index].cost = 0;
                                        if (const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!= undefined){
                                            const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit = false;
                                            const_var.UpdatedPriceData['elements'][val.label.toString()].item_price = 0;
                                        }
                                    }else{
                                        if(const_var.ExtraItemsFeaturesArray[index]!=undefined)
                                        {
                                            const_var.ExtraItemsFeaturesArray[index].cost = val.cost;
                                            const_var.ExtraItemsFeaturesArray[index] = val;
                                            const_var.ExtraItemsFeaturesArray[index].is_checked = false;
                                            const_var.ExtraItemsFeaturesArray[index].quantity = 1;
                                            if (const_var.UpdatedPriceData['elements']!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()]!=undefined && const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit!= undefined){
                                                const_var.UpdatedPriceData['elements'][val.label.toString()].is_edit = false;
                                                const_var.UpdatedPriceData['elements'][val.label.toString()].item_price = val.cost;
                                            }
                                        }
                                    }
                                    BuildingUpdate(true, "");
                                    if (params.add_front_lean == true) UpdateFrontLean();
                                    if (params.add_left_lean == true) UpdateLeftLean();
                                    if (params.add_right_lean == true) UpdateRightLean();
                                    if (params.add_back_lean == true) UpdateBackLean();
                                    DoorCSG();
                                }
                            })

                        }
                    }
                 }
                if(const_var.crmSetting.is_Edit==true)
                {
                    if(params.p_e_i == data.certificate[i].certificate_id && data.certificate[i].distance_on_center!=undefined && data.certificate[i].distance_on_center!=0)
                    {
                        params.isDefaultfourFeet = (data.certificate[i].distance_on_center==4)?true:params.isDefaultfourFeet;
                    }
                }
             }
         }
          

    }
    if(const_var.loginSession==true)
    {
        if(const_var.b_o_J_1[params.p_b_t]=="Custom Buildings")
        {
            // params.p_e_i = "other";
        }
        const_var.main_extraItems_arr['Other Rating/Certification'] = "other";
    }
    //console.log(params.gauge_val,"params.gauge_val",const_var.main_extraItems_arr) 
} 
export const EditloadDefaultBuilding = (state,data,sourceData,building_images,personlInfo,statesRec, allData)=>
{
    let installationValueArray = {"Concrete":1,"Asphalt":2,"Ground":3,"Gravel":4};
    let editData = data.building;
    const_var.defaultProData = editData;
    params.p_w=editData.width;
    params.p_d= editData.length;
    params.p_h= editData.height;
    params.isShowCenter = false;
    params.isBuildingStyleChange = true;

    params.p_w_c_n= (editData.wainscot && editData.wainscot_type!=undefined)?true:false;
    params.p_b_t = editData.building_type;
    // console.log(editData,"editData")
    let deductVal = parseInt(editData.roof_style) - 1;
    state.defaultRoof = const_var.TypeEnumINDEX[editData.roof_style];//String(deductVal);
    params.p_r_s = parseInt(editData.roof_style);//const_var.roof_style[state.defaultRoof].roof_id;
    params.building_type_name = (editData.display_building_type_name!=undefined)?editData.display_building_type_name:editData.building_type_name;
    params.other_building_type_name = editData.other_building_type_name;
    params.p_s_n = editData.state;
    params.m_s_n = editData.manufacturer;
    const_var.stateChangeflag = params.p_s_n;
    const_var.stateMenuChangeflag = params.m_s_n;
    params.checkeditName = (editData.checkeditName!=undefined)?editData.checkeditName:false;
    const_var.state_mfg_zipcode = (editData.state_mfg_zipcode!=undefined)?editData.state_mfg_zipcode:'';
    if(const_var.state_mfg_zipcode==undefined || const_var.state_mfg_zipcode=='')
    {
        const_var.is_State_Edit = true;
    }    
    if (const_var.editAPIDataByResponse.data!=undefined && const_var.editAPIDataByResponse.data.created_at <= "2023-12-13") const_var.isTBSOldQuotesForVerticalRoof = true;

    
    var newVal = editData.installation_surface.substring(0, 4);
    if(newVal=="grav")
    {
        editData.installation_surface = "gravel";
    }else if(newVal=="asph")
    {
        editData.installation_surface = "asphalt";
    }else if(newVal=="grou")
    {
        editData.installation_surface = "ground";
    }else
    {
        editData.installation_surface = "concrete";
    }
    //const_var.state_mfg_zipcode = (editData.state_mfg_zipcode!=undefined)?editData.state_mfg_zipcode:'';
    params.p_i_s = installationValueArray[upperCaseFirst(editData.installation_surface)];
    params.p_b_c_b_l_f=(const_var.newLeanArr['left']!=undefined && const_var.newLeanArr['left'].front_wall!=null)?const_var.TypeWallNameForEdit[const_var.newLeanArr['left'].front_wall]:params.p_b_c_b_l_f;
    params.p_b_c_b_l_b=(const_var.newLeanArr['left']!=undefined && const_var.newLeanArr['left'].back_wall!=null)?const_var.TypeWallNameForEdit[const_var.newLeanArr['left'].back_wall]:params.p_b_c_b_l_b;
    if((const_var.newLeanArr['left']!=undefined && const_var.newLeanArr['left'].side_wall!=null))
    {
        if(const_var.newLeanArr['left'].side_wall=="one_fourth_close" || const_var.newLeanArr['left'].side_wall=="three_fourth_close" || const_var.newLeanArr['left'].side_wall=="half_close")
        {
            params.p_b_c_b_l=const_var.TypeWallNameForEdit[const_var.newLeanArr['left'].side_wall];
        }else
        {
            params.p_b_c_b_l=(const_var.newLeanArr['left']!=undefined && const_var.newLeanArr['left'].side_wall!=null)?upperCaseFirst(const_var.newLeanArr['left'].side_wall):params.p_b_c_b_l;
        }
    }else
    {
        params.p_b_c_b_l=(const_var.newLeanArr['left']!=undefined && const_var.newLeanArr['left'].side_wall!=null)?upperCaseFirst(const_var.newLeanArr['left'].side_wall):params.p_b_c_b_l;
    }
    params.p_b_c_b_r_f=(const_var.newLeanArr['right']!=undefined && const_var.newLeanArr['right']!=null && const_var.newLeanArr['right'].front_wall!=null)?const_var.TypeWallNameForEdit[const_var.newLeanArr['right'].front_wall]:params.p_b_c_b_r_f;
    params.p_b_c_b_r_b=(const_var.newLeanArr['right']!=undefined  && const_var.newLeanArr['right']!=null && const_var.newLeanArr['right'].back_wall!=null)?const_var.TypeWallNameForEdit[const_var.newLeanArr['right'].back_wall]:params.p_b_c_b_r_b;
    if((const_var.newLeanArr['right']!=undefined && const_var.newLeanArr['right'].side_wall!=null))
    {
        if(const_var.newLeanArr['right'].side_wall=="one_fourth_close" || const_var.newLeanArr['right'].side_wall=="three_fourth_close" || const_var.newLeanArr['right'].side_wall=="half_close")
        {
           params.p_b_c_b_r=const_var.TypeWallNameForEdit[const_var.newLeanArr['right'].side_wall]; 
       }else
       {
           params.p_b_c_b_r=(const_var.newLeanArr['right']!=undefined && const_var.newLeanArr['right']!=null && const_var.newLeanArr['right'].side_wall!=null)?upperCaseFirst(const_var.newLeanArr['right'].side_wall):params.p_b_c_b_r;
       }
        
    }else
    {
        params.p_b_c_b_r=(const_var.newLeanArr['right']!=undefined && const_var.newLeanArr['right']!=null && const_var.newLeanArr['right'].side_wall!=null)?upperCaseFirst(const_var.newLeanArr['right'].side_wall):params.p_b_c_b_r;
    }


    params.p_b_c_b_f_f=(const_var.newLeanArr['front']!=undefined && const_var.newLeanArr['front'].front_wall!=null)?const_var.TypeWallNameForEdit[const_var.newLeanArr['front'].front_wall]:params.p_b_c_b_f_f;
    params.p_b_c_b_f_b=(const_var.newLeanArr['front']!=undefined && const_var.newLeanArr['front'].back_wall!=null)?const_var.TypeWallNameForEdit[const_var.newLeanArr['front'].back_wall]:params.p_b_c_b_f_b;
    if((const_var.newLeanArr['front']!=undefined && const_var.newLeanArr['front'].side_wall!=null))
    {
        if(const_var.newLeanArr['front'].side_wall=="one_fourth_close" || const_var.newLeanArr['front'].side_wall=="three_fourth_close" || const_var.newLeanArr['front'].side_wall=="half_close")
        {
            params.p_b_c_b_f_l=const_var.TypeWallNameForEdit[const_var.newLeanArr['front'].side_wall];
        }else
        {
            params.p_b_c_b_f_l=(const_var.newLeanArr['front']!=undefined && const_var.newLeanArr['front'].side_wall!=null)?upperCaseFirst(const_var.newLeanArr['front'].side_wall):params.p_b_c_b_f_l;
        }
    }else
    {
        params.p_b_c_b_f_l=(const_var.newLeanArr['front']!=undefined && const_var.newLeanArr['front'].side_wall!=null)?upperCaseFirst(const_var.newLeanArr['front'].side_wall):params.p_b_c_b_f_l;
    }


    params.p_b_c_b_b_f=(const_var.newLeanArr['back']!=undefined && const_var.newLeanArr['back'].front_wall!=null)?const_var.TypeWallNameForEdit[const_var.newLeanArr['back'].front_wall]:params.p_b_c_b_b_f;
    params.p_b_c_b_b_b=(const_var.newLeanArr['back']!=undefined && const_var.newLeanArr['back'].back_wall!=null)?const_var.TypeWallNameForEdit[const_var.newLeanArr['back'].back_wall]:params.p_b_c_b_b_b;
    if((const_var.newLeanArr['back']!=undefined && const_var.newLeanArr['back'].side_wall!=null))
    {
        if(const_var.newLeanArr['back'].side_wall=="one_fourth_close" || const_var.newLeanArr['back'].side_wall=="three_fourth_close" || const_var.newLeanArr['back'].side_wall=="half_close")
        {
            params.p_b_c_b_b_l=const_var.TypeWallNameForEdit[const_var.newLeanArr['back'].side_wall];
        }else
        {
            params.p_b_c_b_b_l=(const_var.newLeanArr['back']!=undefined && const_var.newLeanArr['back'].side_wall!=null)?upperCaseFirst(const_var.newLeanArr['back'].side_wall):params.p_b_c_b_b_l;
        }
    }else
    {
        params.p_b_c_b_b_l=(const_var.newLeanArr['back']!=undefined && const_var.newLeanArr['back'].side_wall!=null)?upperCaseFirst(const_var.newLeanArr['back'].side_wall):params.p_b_c_b_b_l;
    }

    params.b_l_l_t_l = params.p_b_c_b_l;
    params.b_l_l_t_f = params.p_b_c_b_l_f;
    params.b_l_l_t_b = params.p_b_c_b_l_b;

    params.b_r_l_t_r = params.p_b_c_b_r;
    params.b_r_l_t_f = params.p_b_c_b_r_f;
    params.b_r_l_t_b = params.p_b_c_b_r_b;

    params.p_b_c_b_f_f=params.p_b_c_b_f_f;
    params.p_b_c_b_f_b=params.p_b_c_b_f_b;
    params.p_b_c_b_f_l=params.p_b_c_b_f_l;

    params.p_b_c_b_b_f=params.p_b_c_b_b_f;
    params.p_b_c_b_b_b=params.p_b_c_b_b_b;
    params.p_b_c_b_b_l=params.p_b_c_b_b_l;

    
    params.leantoHeight = (editData.leanto_height!=null)?editData.leanto_height:params.leantoHeight;
    params.p_l_b_l = (const_var.newLeanArr['left']!=undefined &&  (const_var.newLeanArr['left'].leanto_type==1))?false:true;
    params.p_r_b_l = (const_var.newLeanArr['right']!=undefined && (const_var.newLeanArr['right'].leanto_type==2))?false:true;
    
    params.p_f_w = const_var.TypeWallNameForEdit[editData.front_wall];
    params.p_f_w_f = params.p_f_w;
    params.b_r_p = editData.roof_pitch;
    params.p_c_p_l = (editData.left_wall_cutpanel==true)?editData.left_wall_cutpanel:false;
    params.p_c_p_r = (editData.right_wall_cutpanel==true)?editData.right_wall_cutpanel:false;
    params.a_c_p_l = editData.left_wall_cutpanel == undefined && params.p_c_p_l == false ? true : params.p_c_p_l
    params.a_c_p_r = editData.right_wall_cutpanel == undefined && params.p_c_p_r == false ? true : params.p_c_p_r
    
    params.p_b_w = const_var.TypeWallNameForEdit[editData.back_wall];
    if(editData.left_wall=="one_fourth_close" || editData.left_wall=="three_fourth_close" || editData.left_wall=="half_close")
    {
        params.p_l_w = const_var.TypeWallNameForEdit[editData.left_wall];
    }else
    {
        params.p_l_w=upperCaseFirst(editData.left_wall);
    }
    
    //params.p_l_w=upperCaseFirst(editData.left_wall);
    if(editData.right_wall=="one_fourth_close" || editData.right_wall=="three_fourth_close" || editData.right_wall=="half_close")
    {
        params.p_r_w = const_var.TypeWallNameForEdit[editData.right_wall];
    }else
    {
        params.p_r_w=upperCaseFirst(editData.right_wall);
    }
    
    if(const_var.isFromCompare == true && params.m_s_n == 97 && (params.p_l_w == 'Half_Close' || params.p_l_w == 'One_Fourth_Close' || params.p_l_w == 'Three_Fourth_Close')){
        params.p_l_w = 'Open'
    }
    if(const_var.isFromCompare == true && params.m_s_n == 97 && (params.p_r_w == 'Half_Close' || params.p_r_w == 'One_Fourth_Close' || params.p_r_w == 'Three_Fourth_Close')){
        params.p_r_w = 'Open'
    }

    if(params.p_c_p_l==true && editData.left_wall_cut_panel_price!=undefined && editData.left_wall_cut_panel_price!=0)
    {
        const_var.UpdatedPriceData.left_wall_price = parseFloat(editData.left_wall_price) - parseFloat(editData.left_wall_cut_panel_price);
    }if(params.p_c_p_r==true && editData.right_wall_cut_panel_price!=undefined && editData.right_wall_cut_panel_price!=0)
    {
        const_var.UpdatedPriceData.right_wall_price = parseFloat(editData.right_wall_price) - parseFloat(editData.right_wall_cut_panel_price);
    }
    if(params.p_c_p_r==true && editData.right_wall_cut_panel_price==undefined && params.p_r_w=="Open")
    {
        const_var.UpdatedPriceData.right_wall_cut_panel_price = parseFloat(editData.right_wall_price);
    }if(params.p_c_p_l==true && editData.left_wall_cut_panel_price==undefined && params.p_l_w=="Open")
    {
        const_var.UpdatedPriceData.left_wall_cut_panel_price = parseFloat(editData.left_wall_price);
    }
    //console.log(editData.left_wall_price, const_var.UpdatedPriceData.left_wall_price," const_var.UpdatedPriceData.left_wall_price")
    

    params.p_c_a_w= ((params.p_b_w=="Close" && params.p_l_w=="Close" && params.p_r_w=="Close" && params.p_f_w=="Close"))?true:false;
    params.p_c_a_l_l_w=((params.p_b_c_b_l_f=="Close" && params.p_b_c_b_l_b=="Close" && params.p_b_c_b_l=="Close"))?true:false;
    params.p_c_a_r_l_w=((params.p_b_c_b_r_f=="Close" && params.p_b_c_b_r_b=="Close" && params.p_b_c_b_r=="Close"))?true:false;
    params.p_c_a_f_l_w=((params.p_b_c_b_f_f=="Close" && params.p_b_c_b_f_b=="Close" && params.p_b_c_b_f_l=="Close"))?true:false;
    params.p_c_a_b_l_w=((params.p_b_c_b_b_f=="Close" && params.p_b_c_b_b_b=="Close" && params.p_b_c_b_b_l=="Close"))?true:false;

    params.tax_zipcode = (editData.tax_zipcode)?(editData.tax_zipcode):params.tax_zipcode;
    const_var.showDefaultInsullation = (editData.insulation_type && editData.insulation_type.insulation_id != 0) ? true : false;

    params.p_e_l = (editData.has_double_leg)?editData.has_double_leg:false;
    params.p_t_u = 0;
    params.singleSlope = (editData.singleSlope!=undefined)?editData.singleSlope:false;
    
    params.p_i_o = (editData.insulation_type)?(editData.insulation_type.insulation_id):0;
    params.insulation.center.isCheked = params.p_i_o !=0 ? true : false;
    params.insulation.center.insulationId = params.p_i_o;
    if (params.p_i_o!=0) params.selectedInsulationId = params.p_i_o;
    const_var.showDefaultInsullation = (editData.insulation_type && editData.insulation_type.insulation_id != 0) ? true : false;
    const_var.isInsulaltionForOldQuotes = (editData.isInsulaltionForOldQuotes != undefined && editData.isInsulaltionForOldQuotes == false) ? editData.isInsulaltionForOldQuotes : true;
    // console.log(const_var.isInsulaltionForOldQuotes , "isInsulaltionForOldQuotes");
    if (const_var.isInsulaltionForOldQuotes) {
        params.insulation.frontLean.insulationId = 0;
        params.insulation.leftLean.insulationId = 0;
        params.insulation.rightLean.insulationId = 0;
        params.insulation.backLean.insulationId = 0;
    }
    if(editData.insulation_type!=undefined && editData.insulation=="roof_only")
    {
        params.p_r_o = true;
    }else
    {
        params.p_r_o = params.p_r_o;
    }
    
    const_var.CheckSnowLoadValue = (editData.heavy_snow)?(editData.heavy_snow==0)?35:65:35;
    if(const_var.CheckSnowLoadValue==65)
    {
        params.isSnowLoad = true;
    }
    if(editData.certificate!=undefined && editData.certificate.certificate_id==undefined && editData.certificate != "unCertified")
    {
        params.p_e_i = (editData.certificate!='')?editData.certificate.name.toLowerCase():"";
    }if(editData.certificate!=undefined && editData.certificate.certificate_id!=undefined)
    {
        params.p_e_i = (editData.certificate!=undefined)?editData.certificate.certificate_id:params.p_e_i;
    }
    if(params.p_e_i=="other")
    {
        params.p_e_i_other = editData.certificate_name;
    }
    if ((editData.certificate == "unCertified" && editData.certificate_name == "unCertified")  || (editData.certificate == undefined && editData.certificate_name == null)){
        params.p_e_i = "Select";
    }

    if((const_var.newLeanArr['left']!=undefined) && (const_var.newLeanArr['left'].leanto_type==1) && const_var.newLeanArr['left'].pricing_data && const_var.newLeanArr['left'].pricing_data != '' )
    {
        params.ShowLeanRecord = true;
        params.continous_left_lean = (const_var.newLeanArr['left'].continous_lean==true)?true:false;
        params.add_left_lean = true;
        params.lean_p_w = parseInt(const_var.newLeanArr['left'].width);
        params.lean_p_d = parseInt(const_var.newLeanArr['left'].length);
        params.lean_p_h = parseInt(const_var.newLeanArr['left'].height);
        params.lean_p_e_l =  const_var.newLeanArr['left'].lean_has_double_leg != undefined ? const_var.newLeanArr['left'].lean_has_double_leg : false;
        const_var.lengthData.leftLean.length = params.lean_p_d;
        if(const_var.newLeanArr['left'].has_utility==undefined)
        {
            params.add_storage_check = false;
            params.add_storage = 5;
            
        }else
        {
            params.add_storage_check = (const_var.newLeanArr['left'].has_utility==true)?true:false;
            params.add_storage = (const_var.newLeanArr['left'].utility_length)?const_var.newLeanArr['left'].utility_length:5;
            
        }
        params.insulation.leftLean.insulationId = (const_var.newLeanArr['left'].insulation_type)?(const_var.newLeanArr['left'].insulation_type.insulation_id): 0;
        if (params.insulation.leftLean.insulationId !=0) params.selectedInsulationId = params.insulation.leftLean.insulationId;
        params.insulation.leftLean.fullBuilding =  const_var.newLeanArr['left'].insulation !=undefined && const_var.newLeanArr['left'].insulation == "full" ? true : false ;
        params.insulation.leftLean.roofOnly =  const_var.newLeanArr['left'].insulation !=undefined && const_var.newLeanArr['left'].insulation == "roof_only" ? true : false ;
        params.insulation.leftLean.isCheked = params.insulation.leftLean.insulationId != 0 ? true :false; 
        params.insulation.leftLean.showInsulationOptions = params.insulation.leftLean.insulationId != 0 ? true :false; 

        if(const_var.newLeanArr['left'].certificate!=undefined && const_var.newLeanArr['left'].certificate.certificate_id==undefined)
        {
            params.lean_p_e_i = const_var.newLeanArr['left'].certificate.name.toLowerCase();
        }if(const_var.newLeanArr['left'].certificate!=undefined && const_var.newLeanArr['left'].certificate.certificate_id!=undefined)
        {
            params.lean_p_e_i = (const_var.newLeanArr['left'].certificate!=undefined)?const_var.newLeanArr['left'].certificate.certificate_id:params.lean_p_e_i;
        }
        if(params.lean_p_e_i=="other")
        {
            params.lean_p_e_i_other = const_var.newLeanArr['left'].certificate_other_name;
        }
        // console.log(const_var.newLeanArr,const_var.newLeanArr['left'], const_var.TypeAlingnmentReverse,"const_var.TypeAlingnmentReverse",const_var.TypeAlingnmentReverse[const_var.newLeanArr['left']],const_var.TypeAlingnmentReverse[const_var.newLeanArr['left'].alignment]);
        params.leantoAlignmentLeft = const_var.TypeAlingnmentReverse[const_var.newLeanArr['left'].alignment];
        params.leantoAlignmentLeft = (params.leantoAlignmentLeft!=undefined)?params.leantoAlignmentLeft:1;
        if(params.add_storage_check==true)
        {
            params.p_b_c_b_l_b = "Close";
        }
        if(const_var.newLeanArr['left'].roof_pitch_name!=undefined)
        {
            params.b_l_t_r_p = const_var.newLeanArr['left'].roof_pitch_name.slice(0,1);
            //params.b_l_t_r_p = const_var.newLeanArr['left'].roof_pitch.replace("/","");
        }
        // console.log(const_var.newLeanArr['left'],"const_var.newLeanArr['left']")
        if(const_var.newLeanArr['left'].porch!=undefined)
        {
            for (var i = 0; i <= const_var.newLeanArr['left'].porch.wrap_with.length-1; i++) {
                if(const_var.newLeanArr['left'].porch.wrap_with[i]=="front")
                {
                    params.add_left_front_lean_porch = true;
                }
                if(const_var.newLeanArr['left'].porch.wrap_with[i]=="back")
                {
                    params.add_left_back_lean_porch = true;
                }
            }
            // if(const_var.newLeanArr['right'].porch.wrap_with[0]!=undefined && const_var.newLeanArr['right'].porch.wrap_with[0]=="")
        } else {
            if (const_var.AllBuildingData.data.manufacture_data[0].wrap_around == false ){
                params.add_left_front_lean_porch = false;
                params.add_left_back_lean_porch = false;
                UpdateLeanPorches();
            }
        }
    }else
    {
        params.continous_left_lean = false;
        params.add_left_lean = false;
        params.lean_p_e_l = false;
        params.lean_p_w = 12;
        params.lean_p_d = 21;
        params.lean_p_h = 6;
        const_var.lengthData.leftLean.length = params.lean_p_d;
        //$(".LeftBranLean input:checkbox").prop('checked',false);
    }
    // console.log(const_var.newLeanArr['front'],"const_var.newLeanArr['front']")
    if((const_var.newLeanArr['front']!=undefined) && (const_var.newLeanArr['front'].leanto_type==3))
    {
        params.ShowLeanRecord = true;
        params.continous_left_lean = (const_var.newLeanArr['front'].continous_lean==true)?true:false;
        params.add_front_lean = true;
        params.leanF_p_w = parseInt(const_var.newLeanArr['front'].width);
        params.leanF_p_d = parseInt(const_var.newLeanArr['front'].length);
        params.leanF_p_h = parseInt(const_var.newLeanArr['front'].height);
        params.leanF_p_e_l =  const_var.newLeanArr['front'].lean_has_double_leg != undefined ? const_var.newLeanArr['front'].lean_has_double_leg : false;
        const_var.lengthData.frontLean.length = params.leanF_p_d;
        if(const_var.newLeanArr['front'].has_utility==undefined)
        {
            params.add_storage_check_front = false;
            params.add_storage_front = 5;
            
        }else
        {
            params.add_storage_check_front = (const_var.newLeanArr['front'].has_utility==true)?true:false;
            params.add_storage_front = (const_var.newLeanArr['front'].utility_length)?const_var.newLeanArr['front'].utility_length:5;
            
        }

        params.insulation.frontLean.insulationId = (const_var.newLeanArr['front'].insulation_type)?(const_var.newLeanArr['front'].insulation_type.insulation_id): 0;
        if (params.insulation.frontLean.insulationId !=0) params.selectedInsulationId = params.insulation.frontLean.insulationId;
        params.insulation.frontLean.fullBuilding =  const_var.newLeanArr['front'].insulation !=undefined && const_var.newLeanArr['front'].insulation == "full" ? true : false ;
        params.insulation.frontLean.roofOnly =  const_var.newLeanArr['front'].insulation !=undefined && const_var.newLeanArr['front'].insulation == "roof_only" ? true : false ;
        params.insulation.frontLean.isCheked = params.insulation.frontLean.insulationId != 0 ? true :false; 
        params.insulation.frontLean.showInsulationOptions = params.insulation.frontLean.insulationId != 0 ? true :false; 
        
        if(const_var.newLeanArr['front'].certificate!=undefined && const_var.newLeanArr['front'].certificate.certificate_id==undefined)
        {
            params.leanF_p_e_i = const_var.newLeanArr['front'].certificate.name.toLowerCase();
        }if(const_var.newLeanArr['front'].certificate!=undefined && const_var.newLeanArr['front'].certificate.certificate_id!=undefined)
        {
            params.leanF_p_e_i = (const_var.newLeanArr['front'].certificate!=undefined)?const_var.newLeanArr['front'].certificate.certificate_id:params.leanF_p_e_i;
        }      
        if (state.params.p_b_c_b_f_l=="Close" && state.params.p_b_c_b_f_f=="Close" && state.params.p_b_c_b_f_b=="Close") {
            state.isFullyEnclosedCheckedForFrontLeanTo = true
        }
        if (state.params.p_b_c_b_f_l=="Open" && state.params.p_b_c_b_f_f=="Open" && state.params.p_b_c_b_f_b=="Open") {
            state.isFullyOpenedCheckedForFrontLeanTo = true
        }
        if(params.leanF_p_e_i=="other")
        {
            params.leanF_p_e_i_other = const_var.newLeanArr['front'].certificate_other_name;
        }
        // console.log(const_var.newLeanArr, const_var.newLeanArr['front'],"const_var.newLeanArr['front']",params.leantoAlignmentFront);
   /*          if(const_var.newLeanArr['front'].alignment=="front")
            {
                params.leantoAlignmentFront = 2;
            }
            if(const_var.newLeanArr['front'].alignment=="back")
            {
                params.leantoAlignmentFront = 3;
            }
            if(const_var.newLeanArr['front'].alignment=="center")
            {
                params.leantoAlignmentFront = 1;
            }  */
            if(const_var.newLeanArr['front'].alignment=="front")
            {
                const_var.newLeanArr['front'].alignment = "Left";
            }
            if(const_var.newLeanArr['front'].alignment=="back")
            {
                const_var.newLeanArr['front'].alignment = "Right";
            }
         params.leantoAlignmentFront = const_var.endLeanAlingnmentTypeReverse[const_var.newLeanArr['front'].alignment];

        params.leantoAlignmentFront = (params.leantoAlignmentFront!=undefined)?params.leantoAlignmentFront:1;
        
        // console.log(params.leantoAlignmentFront,"params.leantoAlignmentFront",const_var.newLeanArr['front'],const_var.TypeAlingnment,const_var.newLeanArr['front'],const_var.TypeAlingnment[const_var.newLeanArr['front'].alignment])
        if(params.add_storage_check_front==true)
        {
            params.p_b_c_b_f_b = "Close";
        }
        if(const_var.newLeanArr['front'].roof_pitch_name!=undefined)
        {
            params.b_l_t_r_pF = const_var.newLeanArr['front'].roof_pitch_name.slice(0,1);
            //params.b_l_t_r_p = const_var.newLeanArr['left'].roof_pitch.replace("/","");
        }

    }else
    {
        params.continous_left_lean = false;
        params.add_front_lean = false;
        params.leanF_p_e_l = false;
        params.leanF_p_w = 12;
        params.leanF_p_d = 21;
        params.leanF_p_h = 6;
        const_var.lengthData.frontLean.length = params.leanF_p_d;
        //$(".LeftBranLean input:checkbox").prop('checked',false);
    }
    if((const_var.newLeanArr['back']!=undefined) && (const_var.newLeanArr['back'].leanto_type==4))
    {
        params.ShowLeanRecord = true;
        params.continous_left_lean = (const_var.newLeanArr['back'].continous_lean==true)?true:false;
        params.add_back_lean = true;
        params.leanB_p_w = parseInt(const_var.newLeanArr['back'].width);
        params.leanB_p_d = parseInt(const_var.newLeanArr['back'].length);
        params.leanB_p_h = parseInt(const_var.newLeanArr['back'].height);
        params.leanB_p_e_l =  const_var.newLeanArr['back'].lean_has_double_leg != undefined ? const_var.newLeanArr['back'].lean_has_double_leg : false;
        const_var.lengthData.backLean.length = params.leanB_p_d;
        if(const_var.newLeanArr['back'].has_utility==undefined)
        {
            params.add_storage_check_back = false;
            params.add_storage_back = 5;
            
        }else
        {
            params.add_storage_check_back = (const_var.newLeanArr['back'].has_utility==true)?true:false;
            params.add_storage_back = (const_var.newLeanArr['back'].utility_length)?const_var.newLeanArr['back'].utility_length:5;
            
        }

        params.insulation.backLean.insulationId = (const_var.newLeanArr['back'].insulation_type)?(const_var.newLeanArr['back'].insulation_type.insulation_id): 0;
        if (params.insulation.backLean.insulationId !=0) params.selectedInsulationId = params.insulation.backLean.insulationId;
        params.insulation.backLean.fullBuilding = const_var.newLeanArr['back'].insulation !=undefined && const_var.newLeanArr['back'].insulation == "full" ? true : false ;
        params.insulation.backLean.roofOnly = const_var.newLeanArr['back'].insulation !=undefined && const_var.newLeanArr['back'].insulation == "roof_only" ? true : false ;
        params.insulation.backLean.isCheked = params.insulation.backLean.insulationId != 0 ? true :false;
        params.insulation.backLean.showInsulationOptions = params.insulation.backLean.insulationId != 0 ? true :false;

        if(const_var.newLeanArr['back'].certificate!=undefined && const_var.newLeanArr['back'].certificate.certificate_id==undefined)
        {
            params.leanB_p_e_i = const_var.newLeanArr['back'].certificate.name.toLowerCase();
        }if(const_var.newLeanArr['back'].certificate!=undefined && const_var.newLeanArr['back'].certificate.certificate_id!=undefined)
        {
            params.leanB_p_e_i = (const_var.newLeanArr['back'].certificate!=undefined)?const_var.newLeanArr['back'].certificate.certificate_id:params.leanB_p_e_i;
        }
        if(state.params.p_b_c_b_b_l=="Close" && state.params.p_b_c_b_b_f=="Close" && state.params.p_b_c_b_b_b=="Close") {
              state.isFullyEnclosedCheckedForBackLeanTo = true
        }
        if(state.params.p_b_c_b_b_l=="Open" && state.params.p_b_c_b_b_b=="Open" && state.params.p_b_c_b_b_f=="Open") {
              state.isFullyOpenedCheckedForBackLeanTo = true
        }
        if(params.leanB_p_e_i=="other")
        {
            params.leanB_p_e_i_other = const_var.newLeanArr['back'].certificate_other_name;
        }
        // console.log(const_var.newLeanArr['back'],"const_var.newLeanArr['front'] back", const_var.newLeanArr);
        // if(const_var.newLeanArr['back'].alignment=="front")
        // {
        //     params.leantoAlignmentBack = 3;
        // }
        // if(const_var.newLeanArr['back'].alignment=="back")
        // {
        //     params.leantoAlignmentBack = 2;
        // }
       /*      if(const_var.newLeanArr['back'].alignment=="back")
            {
                params.leantoAlignmentBack = 3;
            }
            if(const_var.newLeanArr['back'].alignment=="front")
            {
                params.leantoAlignmentBack = 2;
            }
            if(const_var.newLeanArr['back'].alignment=="center")
            {
                params.leantoAlignmentBack = 1;
            } */

            if(const_var.newLeanArr['back'].alignment=="back")
            {
                const_var.newLeanArr['back'].alignment = "Right";
            }
            if(const_var.newLeanArr['back'].alignment=="front")
            {
                const_var.newLeanArr['back'].alignment = "Left";
            }
         params.leantoAlignmentBack = const_var.endLeanAlingnmentTypeReverse[const_var.newLeanArr['back'].alignment];
        params.leantoAlignmentBack = (params.leantoAlignmentBack!=undefined)?params.leantoAlignmentBack:1;
        
        if(params.add_storage_check_back==true)
        {
            params.p_b_c_b_b_b = "Close";
        }
        if(const_var.newLeanArr['back'].roof_pitch_name!=undefined)
        {
            params.b_l_t_r_pB = const_var.newLeanArr['back'].roof_pitch_name.slice(0,1);
            //params.b_l_t_r_p = const_var.newLeanArr['left'].roof_pitch.replace("/","");
        }

    }else
    {
        params.continous_left_lean = false;
        params.add_back_lean = false;
        params.leanB_p_e_l = false;
        params.leanB_p_w = 12;
        params.leanB_p_d = 21;
        params.leanB_p_h = 6;
        const_var.lengthData.backLean.length = state.params.leanB_p_d;
        //$(".LeftBranLean input:checkbox").prop('checked',false);
    }
    if((const_var.newLeanArr['right']!=undefined) && (const_var.newLeanArr['right'].leanto_type==2) && const_var.newLeanArr['right'].pricing_data && const_var.newLeanArr['right'].pricing_data != '')
    {
         params.ShowLeanRecord = true;
        params.continous_right_lean = (const_var.newLeanArr['right'].continous_lean==true)?true:false;
        params.add_right_lean = true;
        params.leanR_p_w = parseInt(const_var.newLeanArr['right'].width);
        params.leanR_p_d = parseInt(const_var.newLeanArr['right'].length);
        params.leanR_p_h = parseInt(const_var.newLeanArr['right'].height);
        params.leanR_p_e_l =  const_var.newLeanArr['right'].lean_has_double_leg != undefined ? const_var.newLeanArr['right'].lean_has_double_leg : false;
        const_var.lengthData.rightLean.length = params.leanR_p_d;
        if(const_var.newLeanArr['right'].has_utility==undefined)
        {
            params.add_storage_check_right = false;
            params.add_storage_right = 5;
        }else
        {
            params.add_storage_check_right = (const_var.newLeanArr['right'].has_utility==true)?true:false;
            params.add_storage_right = (const_var.newLeanArr['right'].utility_length)?const_var.newLeanArr['right'].utility_length:5;
        }

        params.insulation.rightLean.insulationId = (const_var.newLeanArr['right'].insulation_type)?(const_var.newLeanArr['right'].insulation_type.insulation_id): 0;
        if (params.insulation.rightLean.insulationId !=0) params.selectedInsulationId = params.insulation.rightLean.insulationId;
        params.insulation.rightLean.fullBuilding = const_var.newLeanArr['right'].insulation !=undefined && const_var.newLeanArr['right'].insulation == "full" ? true : false ;
        params.insulation.rightLean.roofOnly = const_var.newLeanArr['right'].insulation !=undefined && const_var.newLeanArr['right'].insulation == "roof_only" ? true : false ;
        params.insulation.rightLean.isCheked = params.insulation.rightLean.insulationId != 0 ? true : false;
        params.insulation.rightLean.showInsulationOptions = params.insulation.rightLean.insulationId != 0 ? true : false;

        if(const_var.newLeanArr['right'].certificate!=undefined && const_var.newLeanArr['right'].certificate.certificate_id==undefined)
        {
            params.leanR_p_e_i = const_var.newLeanArr['right'].certificate.name.toLowerCase();
        }if(const_var.newLeanArr['right'].certificate!=undefined && const_var.newLeanArr['right'].certificate.certificate_id!=undefined)
        {
            params.leanR_p_e_i = (const_var.newLeanArr['right'].certificate!=undefined)?const_var.newLeanArr['right'].certificate.certificate_id:params.leanR_p_e_i;
        }
        if(params.leanR_p_e_i=="other")
        {
            params.leanR_p_e_i_other = const_var.newLeanArr['right'].certificate_other_name;
        }
        params.leantoAlignmentRight = const_var.TypeAlingnmentReverse[const_var.newLeanArr['right'].alignment];
        params.leantoAlignmentRight = (params.leantoAlignmentRight!=undefined)?params.leantoAlignmentRight:1;
        if(params.add_storage_check_right==true)
        {
            params.p_b_c_b_r_b = "Close";
        }
        if(const_var.newLeanArr['right'].roof_pitch_name!=undefined)
        {
            params.b_l_t_r_pR = const_var.newLeanArr['right'].roof_pitch_name.slice(0,1);
            //params.b_l_t_r_pR = const_var.newLeanArr['right'].roof_pitch.replace("/","");
        }
        // console.log(const_var.newLeanArr['right'].porch.wrap_with,"const_var.newLeanArr['right'].porch.wrap_with")

        if(const_var.newLeanArr['right'].porch!=undefined)
        {
            for (var i = 0; i <= const_var.newLeanArr['right'].porch.wrap_with.length-1; i++) {
                if(const_var.newLeanArr['right'].porch.wrap_with[i]=="front")
                {
                    params.add_right_front_lean_porch = true;
                }
                if(const_var.newLeanArr['right'].porch.wrap_with[i]=="back")
                {
                    params.add_right_back_lean_porch = true;
                }
            }
            // if(const_var.newLeanArr['right'].porch.wrap_with[0]!=undefined && const_var.newLeanArr['right'].porch.wrap_with[0]=="")
        }
        else{
            if (const_var.AllBuildingData.data.manufacture_data[0].wrap_around == false ){
                params.add_right_front_lean_porch = false;
                params.add_right_back_lean_porch = false;
                UpdateLeanPorches();
            }
        }
    }else
    {
        params.continous_right_lean = false;
        params.add_right_lean = false;
        params.leanR_p_e_l = false;
        params.leanR_p_w = 12;
        params.leanR_p_d = 21;
        params.leanR_p_h = 6;
        const_var.lengthData.rightLean.length = params.leanR_p_d;
        //$(".RightBranLean input:checkbox").prop('checked',false);
    }
    
    
    if(editData.has_utility!=undefined && editData.has_utility==true)
    {
        if(editData.utility_name=="back")
        {
            params.p_u_c = (editData.has_utility==true)?editData.has_utility:params.p_u_c;
            params.p_u_t = (editData.utility_length!=null)?editData.utility_length:params.p_u_t;
        }
        if(editData.utility_name=="left")
        {
          params.cB_addStorage_check_left = true;
          params.cB_addStorage_left = editData.utility_length;
        }if(editData.utility_name=="right")
        {
          params.cB_addStorage_check_right = true;
          params.cB_addStorage_right = editData.utility_length;
        }
        params.nostorage = false;
    }else{
        params.nostorage = true;
    }

    params.isBreezeway = ( editData.isBreezeway != undefined ) ? editData.isBreezeway : false;
    if (editData.has_utility_front !=undefined) {
        params.cB_addStorage_check_front = (editData.has_utility_front == true) ? editData.has_utility_front : params.cB_addStorage_check_front;
        params.cB_addStorage_front = (editData.utility_front_length!=null) ? editData.utility_front_length : params.cB_addStorage_front;
    }
    
    if(editData.lift_type!=undefined)
    {
        params.lift_type = editData.lift_type;
        params.lifttype_name = editData.lifttype_name;
        params.lifttype_price = editData.lifttype_price;
    }
    params.display_product_status = data.status; 
    params.add_storage_check_1 = params.add_storage_check;
    params.add_storage_check_right_1 = params.add_storage_check_right;

    params.gauge_val=editData.gauge;
    params.p_f_i = (editData.insulation == "Fully Insulated" || editData.insulation == "full")?true:false;
    params.p_r_o = (editData.insulation == "Roof Only" ||  editData.insulation == "roof_only")?true:false;
    params.p_v_w = (editData.vertical_walls == true)?true:false;

    params.cupola = (editData.cupola_obj!=undefined)?true:false;
    params.cupolasize = (editData.cupola_obj!=undefined)?editData.cupola_obj.id:'';
    params.cupolaQty = (editData.cupola_qty!=undefined)?editData.cupola_qty:params.cupolaQty;
    params.cupolaObj = (editData.cupola_obj!=undefined)?editData.cupola_obj:{};
    const_var.cupolaPosition = (editData.cupola_pos!=undefined)?editData.cupola_pos:const_var.cupolaPosition;
    // const_var.cupolaEntries = (editData.cupolaEntries) ? editData.cupolaEntries : [];

    params.newtrussType = (editData.edit_truss_name!=undefined)?editData.edit_truss_name:'';
    params.truss_type_name = (editData.truss_type_name!=undefined)?editData.truss_type_name:'';

    const_var.controls.maxPolarAngle = Math.PI;
    // const_var.controls.maxDistance = (params.p_d <= 150)?(params.add_front_lean == true|| params.add_left_lean == true|| params.add_right_lean == true|| params.add_back_lean == true) ?  120 :((params.p_d/2)+(params.p_w/2)+40):240;
let fLength = params.p_d;
    let fWidth = params.p_w;                        
    params.add_front_lean && (fLength += params.leanF_p_w);
    params.add_back_lean && (fLength += params.leanB_p_w);
    params.add_left_lean && (fWidth += params.lean_p_w);
    params.add_right_lean && (fWidth += params.leanR_p_w);
    let diag = new THREE.Vector3(fLength, fWidth, params.p_h).length();
    let zMul = 2;
    if (window.innerWidth < 1000) {
        zMul = 3;
    }
    const_var.controls.maxDistance =  (diag  >= 100) ? 290: (diag * 3);
    const_var.controls.target.set(0, params.p_h / 2, 0);
    //camera.position.set(0, params.p_h + 0, 2.05 * params.p_d);

    const_var.camera.position.set(0 , params.p_h + 0, 1.25 * params.p_d);
    const_var.controls.update();
    params.tax_exempt = (editData.tax_exempt==1)?editData.tax_exempt:params.tax_exempt;
    if((editData.payment_mode!=undefined && editData.payment_mode.type!=undefined))
    {
        params.paymentmode = const_var.getPaymentValue[editData.payment_mode.type];
        const_var.paymentOptionObj[params.paymentmode] = editData.payment_mode;
    }
    
    if(editData.garage_door_color!=undefined && Object.keys(editData.garage_door_color).length>0)
    {
        params.g_d_c = editData.garage_door_color.hex_value.replace('#', '0x');
        params.g_d_c_name = editData.garage_door_color.name;
        params.g_d_c_id = editData.garage_door_color;
    }
    for(var i=0;i<=editData.extra_items.length-1;i++)
    {
        if(editData.extra_items[i].item_name=="Jtrim")
        {
            params.p_j_t=true;
        }
        if(editData.extra_items[i].item_name=="End Jtrim")
        {
            params.p_j_t_end=true;
        }
        if(editData.extra_items[i].item_name=="Side Cross Bracing")
        {
            params.p_s_c_b=true;
        }if(editData.extra_items[i].item_name=="End Cross Bracing")
        {
            params.p_e_c_b=true;
        }
        if(editData.extra_items[i].other_item_name=="fourth_center_cost")
        {
            params.fourth_center_cost = true;
        }
        // if(editData.extra_items[i].other_item_name=="overhang" && (const_var.a_p_d_a.overhang == undefined || ((const_var.a_p_d_a.overhang.end == undefined || const_var.a_p_d_a.overhang.end.length == 0) && (const_var.a_p_d_a.overhang.side == undefined || const_var.a_p_d_a.overhang.side.length ==0) && (const_var.a_p_d_a.overhang.both == undefined || const_var.a_p_d_a.overhang.both == '' || const_var.a_p_d_a.overhang.both == null) )))
        if(editData.extra_items[i].other_item_name=="overhang")
        {
            params.o_v_h_n_g = true;
            params.o_v_h_n_g_e = true;
            if(editData.extra_items[i].item_name == "1' Overhang on Sides")
            {
                params.o_v_h_n_g = true;
            }
            if(editData.extra_items[i].item_name == "1' Overhang on Ends")
            {
                params.o_v_h_n_g_e = true;
            }
            //params.o_v_h_n_g_e
        }
        if(editData.extra_items[i].is_edit==undefined)
        {
            editData.extra_items[i].is_edit = false;
        }
        // if(editData.extra_items[i].is_edit!=undefined && editData.extra_items[i].is_edit==false)
        // {
        //     editData.extra_items[i].is_edit = true;
        // }
    }
    if(editData.surcharge_amount==undefined)
    {
        editData.surcharge_amount = 0;
    }
    if(editData.surcharge_amount)
    {
        if(editData.surcharge_taxable==undefined)
        {
            const_var.UpdatedPriceData.surcharge_taxable = 0;
        }
    }
    const_var.estimator_QuestionAnswer = (data.questions!=undefined)?data.questions:const_var.estimator_QuestionAnswer;
    if(editData.order_extra_items!=undefined && editData.order_extra_items.surchargeFees==undefined)
    {
        editData.order_extra_items.surchargeFees = 0;
    }
    if(editData.order_extra_items!=undefined && editData.order_extra_items.concrete_work==undefined)
    {
        editData.order_extra_items.concrete_work = 0;
    }
    if(editData.order_extra_items!=undefined && editData.order_extra_items.ground_work==undefined)
    {
        editData.order_extra_items.ground_work = 0;
    }
    // if(const_var.crmSetting.is_module_name == "inventory"){  
    //     if((params.p_s_n == 29 && (params.m_s_n == 3 || params.m_s_n == 9)) && editData.order_extra_items['permit']== "yes" && editData.order_extra_items['extra_labour'] != null){
    //         let Permit_fee = editData.old_permit_Fee!= undefined ? editData.old_permit_Fee : 0;
    //         editData.order_extra_items['extra_labour'] = Math.abs(parseFloat(Permit_fee) -  parseFloat(editData.order_extra_items['extra_labour']));
    //         editData.order_extra_items['order_permit_fee'] = 0 
    //     }
    // }else{
    //     if((params.p_s_n == 29 && (params.m_s_n == 3 || params.m_s_n == 9)) && editData.order_extra_items['permit']== "yes" && editData.order_extra_items['extra_labour'] != null ){
    //         if(editData.order_extra_items['order_permit_fee']==undefined)
    //         {
    //             editData.order_extra_items['order_permit_fee'] = 0 ;
    //         }
    //         editData.order_extra_items['extra_labour'] = parseFloat(editData.order_extra_items['order_permit_fee']) +  parseFloat(editData.order_extra_items['extra_labour']);            
    //         editData.order_extra_items['order_permit_fee'] = 0 
    //     }
    // }
    const_var.order_extra_items = (editData.order_extra_items!=undefined)?editData.order_extra_items:const_var.order_extra_items;
    if(editData.permit!=undefined)
    {
        if((editData.order_extra_items!=undefined))
        {
            editData.order_extra_items['permit'] = editData.permit;
        }
    }
    
    const_var.order_extra_items.grvy_value = (const_var.order_extra_items.grvy_value==undefined)?0:const_var.order_extra_items.grvy_value;

    const_var.dealer_discount_label = editData.dealer_discount_label != undefined ? editData.dealer_discount_label :"";
    const_var.manufacturer_discount_label = editData.manufacturer_discount_label != undefined ? editData.manufacturer_discount_label :"";
    const_var.inputs = (editData.inputs!=undefined)?editData.inputs:const_var.inputs;
    const_var.Componentinputs = (editData.Componentinputs!=undefined)?editData.Componentinputs:const_var.Componentinputs;
    const_var.ExtraItemsFeaturesArray = (editData.ExtraItemsFeaturesArray!=undefined)?editData.ExtraItemsFeaturesArray:const_var.ExtraItemsFeaturesArray;
    if(editData.ExtraItemsFeaturesArray != undefined && editData.ExtraItemsFeaturesArray.length > 0){
        let overhangOpt = editData.ExtraItemsFeaturesArray.filter(obj => obj!= null && ((obj.name != undefined && obj.name == 'overhang') || (obj.sheet_name != undefined && obj.sheet_name.toLowerCase().includes("overhang"))))

        // overhangOpt=overhangOpt[0]
        let endOverhang = []
        let sideOverhang = []
        let bothOverhang = []
        let EndSize = 0.5;
        let SideSize = 0.5;
        let BothSize = 0.5;

        // if(overhangOpt.length > 0 && overhangOpt[0].sheet_type == undefined){
        //     endOverhang = overhangOpt.filter(obj => obj.label && obj.label != undefined ? (obj.label.toLowerCase().includes('ends')) : (obj.sheet_name.toLowerCase().includes('ends')));

        //     sideOverhang = overhangOpt.filter(obj => obj.label && obj.label != undefined ? (obj.label.toLowerCase().includes('sides')) : (obj.sheet_name.toLowerCase().includes('sides')));
        // }
        
        // if(overhangOpt.length > 0 && overhangOpt[0].sheet_type != undefined){
        //     endOverhang = overhangOpt[0].sheet_type != 'both' ? overhangOpt.filter(obj => obj.label && obj.label != undefined ? (obj.label.toLowerCase().includes('ends')) : (obj.sheet_name.toLowerCase().includes('ends'))) : [];

        //     sideOverhang = overhangOpt[0].sheet_type != 'both' ? overhangOpt.filter(obj => obj.label && obj.label != undefined ? (obj.label.toLowerCase().includes('sides')) : (obj.sheet_name.toLowerCase().includes('sides'))) : [];

        //     bothOverhang = overhangOpt[0].sheet_type == 'both' ? overhangOpt.filter(obj => obj.sheet_type && obj.sheet_type != undefined && obj.sheet_type == 'both') : [];
        // }





        endOverhang = overhangOpt.length > 0 && (overhangOpt[0].sheet_type == undefined || overhangOpt[0].sheet_type != 'both') ? overhangOpt.filter(obj => obj.label && obj.label != undefined ? (obj.label.toLowerCase().includes('end')) : (obj.sheet_name.toLowerCase().includes('end'))) : [];

        sideOverhang = overhangOpt.length > 0 && (overhangOpt[0].sheet_type == undefined || overhangOpt[0].sheet_type != 'both') ? overhangOpt.filter(obj => obj.label && obj.label != undefined ? (obj.label.toLowerCase().includes('side')) : (obj.sheet_name.toLowerCase().includes('side'))) : [];

        // if(overhangOpt.length > 0 && overhangOpt[0].sheet_type != undefined && overhangOpt[0].sheet_type != 'both'){
        //     overhangOpt.filter(obj => (console.log('obj',obj),obj.sheet_type != 'both' && obj.label && obj.label != undefined ? 
        //         (console.log('obj',obj.label.toLowerCase().includes('sides')),obj.label.toLowerCase().includes('sides')) 
        //         : 
        //         (console.log('obj',obj.sheet_name.toLowerCase().includes('sides')),obj.sheet_name.toLowerCase().includes('sides')))
        //     )
        // }

        bothOverhang = overhangOpt.length > 0 && overhangOpt[0].sheet_type != undefined && overhangOpt[0].sheet_type == 'both' ? overhangOpt.filter(obj => obj.sheet_type && obj.sheet_type != undefined && obj.sheet_type == 'both') : [];

        if(const_var.a_p_d_a.overhang!=undefined && ((const_var.a_p_d_a.overhang.end != undefined && const_var.a_p_d_a.overhang.end.length > 0) || (const_var.a_p_d_a.overhang.side != undefined && const_var.a_p_d_a.overhang.side.length > 0) || (const_var.a_p_d_a.overhang.both != undefined && const_var.a_p_d_a.overhang.both!= '' && const_var.a_p_d_a.overhang.both!= null))){
            
            EndSize = endOverhang.length > 0 ? (endOverhang[0].sheet_name != undefined ? calcOverhangSize(endOverhang[0].sheet_name) : calcOverhangSize(endOverhang[0].label)) : 0.5
            SideSize = sideOverhang.length > 0 ? (sideOverhang[0].sheet_name != undefined ? calcOverhangSize(sideOverhang[0].sheet_name) : calcOverhangSize(sideOverhang[0].label)) : 0.5
            BothSize = bothOverhang.length > 0 ? 1 : 0.5

            
            // EndSize = endOverhang.length > 0 ? (endOverhang[0].sheet_name != undefined ? endOverhang[0].sheet_name.split(`'`)[0] : endOverhang[0].label.split(`'`)[0]) : 0.5
            // SideSize = sideOverhang.length > 0 ? (sideOverhang[0].sheet_name != undefined ? sideOverhang[0].sheet_name.split(`'`)[0] : sideOverhang[0].label.split(`'`)[0]) : 0.5
            // BothSize = bothOverhang.length > 0 ? 1 : 0.5
            // console.log('check33',params.o_v_h_n_g, params.o_v_h_n_g_e)
            // debugger
            // params.o_v_h_n_g = (SideSize != 0.5 || BothSize != 0.5) ? true : false
            // params.o_v_h_n_g_e = (EndSize != 0.5 || BothSize != 0.5) ? true : false
            // console.log('check33',params.o_v_h_n_g, params.o_v_h_n_g_e)
            // debugger
        }
        else{
            EndSize = endOverhang.length > 0 ? 1 : 0.5
            SideSize = sideOverhang.length > 0 ? 1 : 0.5
            BothSize = bothOverhang.length > 0 ? 1 : 0.5
        }                   
        
        const_var.isOverhang = {
            'end' : {
                isChecked: (endOverhang.length > 0 || bothOverhang.length > 0) ? true : false,
                selected: bothOverhang.length > 0 ? "1' Overhang on Ends" : (endOverhang.length > 0 ? (endOverhang[0].sheet_name ? endOverhang[0].sheet_name : endOverhang[0].label) : ''),
                size: bothOverhang.length > 0 ? 1 : EndSize
            },
            'side' : {
                isChecked: (sideOverhang.length > 0 || bothOverhang.length > 0) ? true : false,
                selected: bothOverhang.length > 0 ? "1' Overhang on Sides" : (sideOverhang.length > 0 ? (sideOverhang[0].sheet_name ? sideOverhang[0].sheet_name : sideOverhang[0].label) : ''),
                size: bothOverhang.length > 0 ? 1 : SideSize
            },
            'both' : {
                isChecked: bothOverhang.length > 0 ? true : false,
                selected: bothOverhang.length > 0 ? (bothOverhang[0].sheet_name ? bothOverhang[0].sheet_name : bothOverhang[0].label) : '',
                size: BothSize
            }
        }    
        
        if(const_var.isOverhang.both.isChecked == true){
            params.o_v_h_n_g = true;
            params.o_v_h_n_g_e = true;

            // const_var.ExtraItemsFeaturesArray
        }
        else{
            
            let isSideChecked = const_var.ExtraItemsFeaturesArray.filter(obj => obj && (obj.sheet_name ? obj.sheet_name.toLowerCase().includes('sides') : obj.label.toLowerCase().includes('sides')))
            let isEndChecked = const_var.ExtraItemsFeaturesArray.filter(obj => obj && (obj.sheet_name ? obj.sheet_name.toLowerCase().includes('ends') : obj.label.toLowerCase().includes('ends')))

            params.o_v_h_n_g = isSideChecked.length > 0 ? (isSideChecked[0].is_checked == true ? true : false) : false;
            params.o_v_h_n_g_e = isEndChecked.length > 0 ? (isEndChecked[0].is_checked == true ? true : false) : false;

            const_var.isOverhang.end.isChecked = params.o_v_h_n_g_e
            const_var.isOverhang.side.isChecked = params.o_v_h_n_g

        }
    }

    const_var.ExtraItemsFeaturesQuantityArray = (editData.ExtraItemsFeaturesQuantityArray!=undefined)?editData.ExtraItemsFeaturesQuantityArray:const_var.ExtraItemsFeaturesQuantityArray;
    if(editData.parentTax!=undefined && !const_var.checkPickThisBuilding)
    {
        if(typeof editData.parentTax.percentage=='string')
        {
            editData.parentTax.percentage = editData.parentTax.percentage.replace(/[^\d.-]/g, '');
        }if(editData.parentTax.percentage.length>0)
        {
            editData.parentTax.percentage = editData.parentTax.percentage[0].replace(/[^\d.-]/g, '');
        }
        if(editData.parentTax.type=="amt")
        {
            if(typeof editData.parentTax.amount=='string')
            {
                editData.parentTax.amount = editData.parentTax.amount.replace(/[^\d.-]/g, '');
            }if(editData.parentTax.amount.length>0)
            {
                editData.parentTax.amount = editData.parentTax.amount[0].replace(/[^\d.-]/g, '');
            }
        }
        
    }

    //console.log(editData.parentTax,"editData.parentTax1")
    const_var.tax = (editData.parentTax!=undefined)?editData.parentTax:const_var.tax;
    const_var.MoreTaxinputs = (editData.MoreTaxinputs!=undefined)?editData.MoreTaxinputs:const_var.MoreTaxinputs;
    if(const_var.MoreTaxinputs!=undefined && !const_var.checkPickThisBuilding)
    {
        const_var.MoreTaxinputs.map((val, index) => {
                
                if(val.name==null && val.percentage==null)
                {
                    const_var.MoreTaxinputs.splice(index,1);
                }
                if(typeof val.percentage=="string")
                {
                    const_var.MoreTaxinputs[index].percentage = val.percentage.replace(/[^\d.-]/g, '');
                }if(val.percentage!=null && val.percentage.length>0)
                {
                    const_var.MoreTaxinputs[index].percentage = val.percentage[0].replace(/[^\d.-]/g, '');
                }
                if(typeof val.more_tax_amount=="string")
                {
                    const_var.MoreTaxinputs[index].more_tax_amount = val.more_tax_amount.replace(/[^\d.-]/g, '');
                }if(val.more_tax_amount!=undefined && val.more_tax_amount.length>0)
                {
                    const_var.MoreTaxinputs[index].more_tax_amount = val.more_tax_amount[0].replace(/[^\d.-]/g, '');
                }
                if(val.type =="amt")
                {
                    if(typeof val.amount=="string")
                    {
                        const_var.MoreTaxinputs[index].amount = val.amount.replace(/[^\d.-]/g, '');
                    }if(val.amount!=undefined && val.amount.length>0)
                    {
                        const_var.MoreTaxinputs[index].amount = val.amount[0].replace(/[^\d.-]/g, '');
                    }
                }
                
        })
    }
//     const_var.ExtraItemsFeaturesArray = const_var.ExtraItemsFeaturesArray.filter(function (el) {
//   return el != null;
// });
//     const_var.ExtraItemsFeaturesQuantityArray = const_var.ExtraItemsFeaturesQuantityArray.filter(function (el) {
//   return el != null;
// });
    
    if(sourceData!=undefined && sourceData!='')
    {
        if(Object.keys(sourceData).length>0)
        {
            sourceData.map((val, index) => {
                if(editData.parentTax!=undefined)
                {
                    if(index==0)
                    { 
                        const_var.tax = val; 
                        const_var.tax.tax_value = val.percentage; 
                    }
                    if(index>0)
                    {
                       const_var.MoreTaxinputs[index-1] = val;
                       const_var.MoreTaxinputs[index-1].more_tax_amount = val.more_tax_amount;
                    }
                }else
                {
                    const_var.MoreTaxinputs[index] = val;
                    const_var.MoreTaxinputs[index].more_tax_amount = val.more_tax_amount;
                }
                
            })
        }
        //const_var.tax = (Object.keys(sourceData).length>0)?sourceData[0]:const_var.tax;
    }
    if(editData.connection_fee_side!=undefined && editData.connection_fee_side!=0)
    {
        const_var.UpdatedPriceData.connection_fee_side = editData.connection_fee_side;
    }
    if(editData.connection_fee_end!=undefined && editData.connection_fee_end!=0)
    {
        const_var.UpdatedPriceData.connection_fee_end = editData.connection_fee_end;
    }
    
    params.oncenter_val_with_action = (editData.custom_distance_on_center!=undefined)?editData.custom_distance_on_center:"";
    params.oncenter_val = (editData.custom_distance_on_center!=undefined)?editData.custom_distance_on_center:0;


    // const_var.additionalFeaturesArray = (editData.additionalFeaturesArray!=undefined && editData.additionalFeaturesArray.length>0)?editData.additionalFeaturesArray:const_var.additionalFeaturesArray;
    // let additionalFeatures = const_var.additionalFeaturesArray;
    // let checkedAdditionalFeatures = additionalFeatures;
    // if(const_var.additionalFeaturesArray!=undefined && const_var.additionalFeaturesArray.length>0)
    // {
    //     additionalFeatures =  JSON.parse(JSON.stringify(const_var.additionalFeaturesArray));
    //     checkedAdditionalFeatures = additionalFeatures.filter((af)=> {
    //       return  af != null
    //     });
    // }
    // const_var.additionalFeaturesArrayWithPosition = JSON.parse(JSON.stringify(const_var.additionalFeaturesArray));


    const_var.additionalFeaturesArray = (editData.additionalFeaturesArray!=undefined && editData.additionalFeaturesArray.length>0)?editData.additionalFeaturesArray:const_var.additionalFeaturesArray;
    let additionalFeatures = const_var.additionalFeaturesArray;
    let checkedAdditionalFeatures = additionalFeatures;
    if(const_var.additionalFeaturesArray!=undefined && const_var.additionalFeaturesArray.length>0)
    {
        additionalFeatures =  JSON.parse(JSON.stringify(const_var.additionalFeaturesArray));
        checkedAdditionalFeatures = additionalFeatures.filter((af)=> {
          return  af != null
        });
    }
    const_var.additionalFeaturesArrayWithPosition = (editData.additionalFeaturesArray!=undefined)? JSON.parse(JSON.stringify(additionalFeatures)) :JSON.parse(JSON.stringify(const_var.additionalFeaturesArray));
    const_var.UpdatedPriceData.elements = [];
    editData.extra_items.map((val, index) => {
        if(val.item_name!=null)
        {
           const_var.UpdatedPriceData['elements'][val.item_name.toString()] = val;
        }
    })
    const_var.LeadCustomerData['first_name'] = (personlInfo.first_name=='')?undefined:personlInfo.first_name;
    const_var.LeadCustomerData['last_name'] = personlInfo.last_name;
    const_var.LeadCustomerData['email'] = personlInfo.email;
    const_var.LeadCustomerData['phone_no'] = (personlInfo.phone_no!=undefined)?personlInfo.phone_no:'';
    const_var.LeadCustomerData['mobile_no'] = (personlInfo.mobile_no!=undefined)?personlInfo.mobile_no:'';
    const_var.leadSourceStateData = (statesRec!=undefined)?statesRec:'';
    if(personlInfo.address!=undefined)
    {
        let priceData = personlInfo.address.filter(address => address.is_billing == 1);
        const_var.LeadCustomerData['address'] = personlInfo.address;
        personlInfo.address.map((val, index) => {
            const_var.LeadCustomerData['address'][index].notRemove = true;
            const_var.addressBook.push({'new_address_line_1':val.address_line_1,'new_address_line_2':val.address_line_2,'new_zipcode':val.zipcode,'new_state':val.state,'new_city':val.city,'new_county':val.county});
        });
    }
    

    const_var.crmSetting.is_show_background = (editData.is_showBackgroundImage!=undefined && editData.is_showBackgroundImage!='')?editData.is_showBackgroundImage:const_var.crmSetting.is_show_background;
    makeBackgroundwithImage();
    // if(data.phone_no_2!=undefined)
    // {
    //     const_var.LeadCustomerData['phone_no_2'] = personlInfo.phone_no_2;
    //     if(const_var.LeadCustomerData['phone_no']=='' || const_var.LeadCustomerData['phone_no']==undefined)
    //     {
    //         const_var.LeadCustomerData['phone_no'] = personlInfo.phone_no_2;
    //     }
    // }
    // if(data.mobile_no!=undefined)
    // {
    //     const_var.LeadCustomerData['mobile_no'] = personlInfo.mobile_no;
    //     if(const_var.LeadCustomerData['phone_no']=='' || const_var.LeadCustomerData['phone_no']==undefined)
    //     {
    //         const_var.LeadCustomerData['phone_no'] = personlInfo.mobile_no;
    //     }
    // }
    const_var.LeadCustomerData['billing_address_line_1'] = const_var.LeadCustomerData['address_line_1'] = data.billing_address_line_1;
    const_var.LeadCustomerData['billing_address_line_2'] = const_var.LeadCustomerData['address_line_2'] = data.billing_address_line_2;
    const_var.LeadCustomerData['billing_city'] = const_var.LeadCustomerData['city'] = data.billing_city;
    const_var.LeadCustomerData['billing_country'] = const_var.LeadCustomerData['country'] = data.billing_country;
    const_var.LeadCustomerData['billing_state'] = const_var.LeadCustomerData['state'] = data.billing_state;
    const_var.LeadCustomerData['billing_zipcode'] = const_var.LeadCustomerData['zipcode'] = data.billing_zipcode;
    const_var.LeadCustomerData['shipping_address_line_1'] = data.shipping_address_line_1;
    const_var.LeadCustomerData['shipping_address_line_2'] = data.shipping_address_line_2;
    const_var.LeadCustomerData['shipping_city'] = data.shipping_city;
    const_var.LeadCustomerData['shipping_state'] = data.shipping_state;
    const_var.LeadCustomerData['shipping_country'] = data.shipping_country;
    const_var.LeadCustomerData['shipping_zipcode'] = data.shipping_zipcode;
    const_var.LeadCustomerData['ShowEdit'] = (data.ShowEdit!=undefined)?data.ShowEdit:((data.shipping_address_line_1 != undefined || data.shipping_zipcode != undefined) ? true : false);
   
    if(data.ShowEdit==undefined && data.shipping_address_line_1 == undefined && data.shipping_zipcode == undefined && personlInfo.address != undefined && personlInfo.address.length > 0){
        let defaultAdd = personlInfo.address.filter(obj => obj.is_default == 1)
        const_var.LeadCustomerData['ShowEdit']  = defaultAdd.length > 0 ? true : const_var.LeadCustomerData['ShowEdit']
    }  
    
    const_var.LeadCustomerData['is_Action'] = data.is_Action;
    const_var.LeadCustomerData['lead_source'] = data.lead_source;
    //building_images = {"pdf_images":[{"image":"https://crm.senseicrm.com/files/9439ba437d163d2160130862d9bc60d8","image_name":"Front"},{"image":"https://crm.senseicrm.com/files/91959a48760feaccffa2f21af7eff2db","image_name":"Left"},{"image":"https://crm.senseicrm.com/files/106a6debb6427fe2e98530bc34ae46d6","image_name":"Back"},{"image":"https://crm.senseicrm.com/files/75bbfc5d5c66f2c9872efd1282b0dd2a","image_name":"Right"},{"image":"https://crm.senseicrm.com/files/3781774ebccb98c74176fec9cbe9f1cd","image_name":"2D Layout","is_checked":true},{"type":"html","image":"https://crm.senseicrm.com/files/1ef631fbd19b88fba3f18f55c1005c7d","image_name":"2D Layout"},{"image":"https://crm.senseicrm.com/files/fdde4772d62b74d65df9b69ed8b1934d","image_name":"2D Layout"}]};
    if(building_images!=undefined && building_images.length>0 && const_var.crmSetting.form_action!="duplicate")
    {
        // building_images.map((val, index) => {
        //     if(val.image_name!="2D Layout" && val.image_name!="2D Layout1")
        //       {  
        //             const_var.i_g_A_y.push({"image":val.image,"image_name":val.image_name,'description':val.description});
        //       }else{
        //             if(val.image_name=="2D Layout1" && val.is_checked==true)
        //             {
        //                 const_var.i_g_A_y.push({"image":val.image,"image_name":val.image_name,'is_checked':val.is_checked});
        //             }
        //       }
        // })
        // const_var.checkCaptuareImage = true;
        // building_images.map((val, index) => {
        //     converImageIntoBase64(val.image, function(dataUrl) {
        //       if(val.image_name!="2D Layout" && val.image_name!="2D Layout1")
        //       {  
        //             const_var.i_g_A_y[index] = {"image":dataUrl,"image_name":val.image_name,'description':val.description};
        //       }else{
        //             if(val.image_name=="2D Layout1" && val.is_checked==false)
        //             {
        //                 const_var.i_g_A_y.splice(index,1);
        //             }
        //             if(val.image_name=="2D Layout1" && val.is_checked==true)
        //             {
        //                 const_var.i_g_A_y[index] = {"image":dataUrl,"image_name":val.image_name,'is_checked':val.is_checked};
        //             }
        //       }
              
        //     })
            
        // })
        // let checkImages = building_images.filter(data=>data.is_checked!=undefined && data.is_checked==true);
        // if(checkImages.length>0)
        // {
        //     const_var.ShowTwodLayoutDefault = true;
        // }
    }
    const_var.i_g_A_y = [];
    const_var.crmSetting.sub_module = data.sub_module!='' && data.sub_module!=null ? data.sub_module:const_var.crmSetting.sub_module;
    const_var.crmSetting.sub_module_id = data.sub_module_id;
    const_var.editstateColorAcordingAPI[params.p_s_n] = {"wall_color":Object.keys(editData.wall_color).length>0?editData.wall_color:undefined,"roof_color":editData.roof_color,"trim_color":editData.trim_color,"wainscot":editData.wainscot,"garageDoorColor":editData.garageDoorColor};
    if(Object.keys(editData.wall_color).length>0)
    {
        const_var.showWallColorJSX = false;
    }                

    if(editData.roof_pitch!=undefined)
    {
        params.b_r_p =  editData.roof_pitch.replace("/","");
        //const_var.editAPIDataByResponse.created_at>="2024-01-24"
        let chkSingleSlopeBuilding = '';
        if(const_var.editAPIDataByResponse.data.building_data!=undefined)
        {
            chkSingleSlopeBuilding = const_var.editAPIDataByResponse.data.building_data.building.filter((data)=>data.fixed_new_leg_width!=undefined && data.fixed_new_leg_width.length>0)
        }

        if(params.singleSlope == true && chkSingleSlopeBuilding != '' && chkSingleSlopeBuilding.length>0 && const_var.editAPIDataByResponse.data.created_at>="2024-01-24" ){
            let newRoofPitch = Number((editData.roof_pitch).split("/")[0])-1
            params.p_r_p = newRoofPitch;
        }else{
            params.p_r_p = editData.roof_pitch.split("/")[0];
        }
     }
     
}
export const converImageIntoBase64 = (url, callback)=>{
      var xhr = new XMLHttpRequest();
      xhr.onload = function() {
        var reader = new FileReader();
        reader.onloadend = function() {
          callback(reader.result);
        }
        reader.readAsDataURL(xhr.response);
      };
      xhr.open('GET', url);
      xhr.responseType = 'blob';
      xhr.send();
}
export const loadDefaultBuilding =(state,data)=>{
    let editData = data;
    //const_var.defaultBuildingArr = data;
    let filterRecord = "";
    if(data!=''){
        for(let i=0; i < data.length; i++){
            if(const_var.stateManufacturerAcordingAPI[params.p_s_n].building_type!=undefined && const_var.stateManufacturerAcordingAPI[params.p_s_n].building_type.length>0)
            {
                filterRecord = const_var.stateManufacturerAcordingAPI[params.p_s_n].building_type.filter(newData=>newData==data[i].id);
                if(filterRecord.length>0 && filterRecord[0]==data[i].id)
                {
                    if(data[i].heavy_snow==1 && const_var.CheckSnowLoadValue==65)
                    {
                        const_var.defaultBuildingArr[data[i].id] = data[i];
                        if(state.defaultBuilding==undefined)
                        {
                            params.p_b_t = data[0].building_id;
                            params.p_r_s = data[0].roof_id;
                        }
                    }if(data[i].heavy_snow==0 && const_var.CheckSnowLoadValue!=65)
                    {
                        const_var.defaultBuildingArr[data[i].id] = data[i];
                        if(state.defaultBuilding==undefined)
                        {
                            params.p_b_t = data[0].building_id;
                            params.p_r_s = data[0].roof_id;
                        }
                    }
                }else
                {
                    if(data[i].heavy_snow==1 && const_var.CheckSnowLoadValue==65)
                    {
                        const_var.defaultBuildingArr[data[i].id] = data[i];
                        if(state.defaultBuilding==undefined)
                        {
                            params.p_b_t = data[0].building_id;
                            params.p_r_s = data[0].roof_id;
                        }
                    }if(data[i].heavy_snow==0 && const_var.CheckSnowLoadValue!=65)
                    {
                        const_var.defaultBuildingArr[data[i].id] = data[i];
                        if(state.defaultBuilding==undefined)
                        {
                            params.p_b_t = data[0].building_id;
                            params.p_r_s = data[0].roof_id;
                        }
                        
                    }
                }
            }else
            {
                if(data[i].heavy_snow==1 && const_var.CheckSnowLoadValue==65)
                {
                    let filterResult = const_var.AllBuildingData.data.default_building.filter(rec=>rec.heavy_snow==data[i].heavy_snow && rec.image_name.includes("Garages.png"));
                    const_var.defaultBuildingArr[data[i].id] = data[i];
                    if(state.defaultBuilding==undefined)
                    {
                        params.p_b_t = filterResult[0].building_id;
                        params.p_r_s = filterResult[0].roof_id;
                    }
                }if(data[i].heavy_snow==0 && const_var.CheckSnowLoadValue!=65)
                {
                    const_var.defaultBuildingArr[data[i].id] = data[i];
                    if(state.defaultBuilding==undefined)
                    {
                      params.p_b_t = data[0].building_id;
                      params.p_r_s = data[0].roof_id;
                    }
                }
            }
            
        }
        
    }
    // console.log(const_var.defaultBuildingArr,"const_var.defaultBuildingArr",const_var.stateManufacturerAcordingAPI[params.p_s_n].building_type)
    if(const_var.defaultBuildingArr[state.defaultBuilding]==undefined)
    {
        return true;
    }
    let checkLeanto = const_var.defaultBuildingArr[state.defaultBuilding].leanto;
    let newLeanArray = [];
    if(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data!=undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto_data!=null && Object.keys(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data).length>0 )
    {
        const_var.leantofront = {};
        const_var.leantoback = {};
        for (let leanData in const_var.defaultBuildingArr[state.defaultBuilding].leanto_data) {
            if(Object.keys(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data[leanData]).length>0)
            {
                if(leanData=="left" )
                {
                    const_var.leantoleft.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].size.split('x')[0]);
                    const_var.leantoleft.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].size.split('x')[1]);
                    const_var.leantoleft.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].size.split('x')[2]);
                    const_var.leantoleft.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].wall.front_wall;
                    const_var.leantoleft.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].wall.back_wall;
                    const_var.leantoleft.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].wall.side_wall;
                    params.p_b_c_b_l_f=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].wall.front_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].wall.front_wall):params.p_b_c_b_l_f;
                    params.p_b_c_b_l_b=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].wall.back_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].wall.back_wall):params.p_b_c_b_l_b;
                    params.p_b_c_b_l=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].wall.side_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].wall.side_wall):params.p_b_c_b_l;
                    
                    if(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].roof_pitch!=undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].roof_pitch!=null)
                    {
                        params.isDefault_l_t_r_p = params.b_l_t_r_p = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].roof_pitch.split("/")[0];
                        state.const_var.BuildingLRoofPitch[const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].roof_pitch] = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['left'].roof_pitch.split("/")[0];
                    }
                    const_var.newLeanArr['left'] = const_var.leantoleft;
                    params.ShowLeanRecord = true;
                }
                if(leanData=="right" )
                {
                    const_var.leantoright.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].size.split('x')[0]);
                    const_var.leantoright.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].size.split('x')[1]);
                    const_var.leantoright.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].size.split('x')[2]);
                    const_var.leantoright.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].wall.front_wall;
                    const_var.leantoright.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].wall.back_wall;
                    const_var.leantoright.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].wall.side_wall;
                    params.p_b_c_b_r_f=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].wall.front_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].wall.front_wall):params.p_b_c_b_r_f;
                    params.p_b_c_b_r_b=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].wall.back_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].wall.back_wall):params.p_b_c_b_r_b;
                    params.p_b_c_b_r=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].wall.side_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].wall.side_wall):params.p_b_c_b_r;
                    
                    if(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].roof_pitch!=undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].roof_pitch!=null)
                    {
                        params.isDefault_l_t_r_p = params.b_l_t_r_pR = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].roof_pitch.split("/")[0];
                        state.const_var.BuildingLRoofPitch[const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].roof_pitch] = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].roof_pitch.split("/")[0];
                    }

                    const_var.newLeanArr['right'] = const_var.leantoright;
                    params.ShowLeanRecord = true;
                }
                if(leanData=="front" )
                {
                    const_var.leantofront.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].size.split('x')[0]);
                    const_var.leantofront.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].size.split('x')[1]);
                    const_var.leantofront.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].size.split('x')[2]);
                    const_var.leantofront.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].wall.front_wall;
                    const_var.leantofront.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].wall.back_wall;
                    const_var.leantofront.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].wall.side_wall;
                    params.p_b_c_b_f_f=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].wall.front_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].wall.front_wall):params.p_b_c_b_f_f;
                    params.p_b_c_b_f_b=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].wall.back_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].wall.back_wall):params.p_b_c_b_f_b;
                    params.p_b_c_b_f_l=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].wall.side_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].wall.side_wall):params.p_b_c_b_f_l;
                    
                    if(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].roof_pitch!=undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].roof_pitch!=null)
                    {
                        params.isDefault_l_t_r_p = params.b_l_t_r_pF = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].roof_pitch.split("/")[0];
                        state.const_var.BuildingLRoofPitch[const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['front'].roof_pitch] = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].roof_pitch.split("/")[0];
                    }

                    const_var.leantofront.leanto_type = 3;
                    const_var.newLeanArr['front'] = const_var.leantofront;
                    params.ShowLeanRecord = true;
                }
                if(leanData=="back" )
                {
                    const_var.leantoback.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].size.split('x')[0]);
                    const_var.leantoback.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].size.split('x')[1]);
                    const_var.leantoback.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].size.split('x')[2]);
                    const_var.leantoback.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].wall.front_wall;
                    const_var.leantoback.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].wall.back_wall;
                    const_var.leantoback.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].wall.side_wall;
                    params.p_b_c_b_b_f=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].wall.front_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].wall.front_wall):params.p_b_c_b_b_f;
                    params.p_b_c_b_b_b=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].wall.back_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].wall.back_wall):params.p_b_c_b_b_b;
                    params.p_b_c_b_b_l=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].wall.side_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].wall.side_wall):params.p_b_c_b_b_l;
                    
                    if(const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].roof_pitch!=undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].roof_pitch!=null)
                    {
                        params.isDefault_l_t_r_p = params.b_l_t_r_pB = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].roof_pitch.split("/")[0];
                        state.const_var.BuildingLRoofPitch[const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['back'].roof_pitch] = const_var.defaultBuildingArr[state.defaultBuilding].leanto_data['right'].roof_pitch.split("/")[0];
                    }

                    const_var.leantoback.leanto_type = 4;
                    const_var.newLeanArr['back'] = const_var.leantoback;
                    params.ShowLeanRecord = true;
                }    
                
            }else
            {
                const_var.newLeanArr[leanData] = undefined;
                if(const_var.defaultBuildingArr[state.defaultBuilding].leanto=="both")
                {
                    const_var.leantoleft.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[0]);
                    const_var.leantoleft.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[1]);
                    const_var.leantoleft.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[2]);
                    const_var.leantoleft.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
                    const_var.leantoleft.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
                    const_var.leantoleft.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;

                    const_var.leantoright.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[0]);
                    const_var.leantoright.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[1]);
                    const_var.leantoright.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[2]);
                    const_var.leantoright.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
                    const_var.leantoright.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
                    const_var.leantoright.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;

                    if(const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch!=undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch!=null)
                    {
                        params.isDefault_l_t_r_p = params.b_l_t_r_p = const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch.split("/")[0];
                        state.const_var.BuildingLRoofPitch[const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch] = const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch.split("/")[0];
                        
                        params.isDefault_l_t_r_p = params.b_l_t_r_pR = const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch.split("/")[0];
                        state.const_var.BuildingLRoofPitch[const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch] = const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch.split("/")[0];
                    }

                    const_var.newLeanArr['left'] = const_var.leantoleft;
                    const_var.newLeanArr['right'] = const_var.leantoright;
                    params.ShowLeanRecord = true;
                }else if(const_var.defaultBuildingArr[state.defaultBuilding].leanto=="left")
                {
                    const_var.leantoleft.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[0]);
                    const_var.leantoleft.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[1]);
                    const_var.leantoleft.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[2]);
                    const_var.leantoleft.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
                    const_var.leantoleft.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
                    const_var.leantoleft.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;

                    if(const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch!=undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch!=null)
                    {
                        params.isDefault_l_t_r_p = params.b_l_t_r_p = const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch.split("/")[0];
                        state.const_var.BuildingLRoofPitch[const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch] = const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch.split("/")[0];
                    }
                    const_var.newLeanArr['left'] = const_var.leantoleft;
                    // console.log(const_var.newLeanArr['left'],"loadDefaultBuilding");
                    const_var.newLeanArr['right'] = undefined;
                    params.ShowLeanRecord = true;
                }else if(const_var.defaultBuildingArr[state.defaultBuilding].leanto=="right")
                {
                    const_var.leantoright.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[0]);
                    const_var.leantoright.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[1]);
                    const_var.leantoright.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[2]);
                    const_var.leantoright.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
                    const_var.leantoright.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
                    const_var.leantoright.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
                    if(const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch!=undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch!=null)
                    {
                        params.isDefault_l_t_r_p = params.b_l_t_r_pR = const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch.split("/")[0];
                        state.const_var.BuildingLRoofPitch[const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch] = const_var.defaultBuildingArr[state.defaultBuilding].leanto_roof_pitch.split("/")[0];
                    }
                    const_var.newLeanArr['left'] = undefined;
                    const_var.newLeanArr['right'] = const_var.leantoright;
                    params.ShowLeanRecord = true;
                }
            }
        }
       

           // else
           //  {
           //      const_var.newLeanArr = [];
           //      params.ShowLeanRecord = false;
           //  }
    }else{
        if(const_var.defaultBuildingArr[state.defaultBuilding].leanto=="both")
        {
            const_var.leantoleft.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[0]);
            const_var.leantoleft.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[1]);
            const_var.leantoleft.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[2]);
            const_var.leantoleft.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
            const_var.leantoleft.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
            const_var.leantoleft.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;

            const_var.leantoright.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[0]);
            const_var.leantoright.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[1]);
            const_var.leantoright.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[2]);
            const_var.leantoright.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
            const_var.leantoright.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
            const_var.leantoright.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;

            const_var.newLeanArr['left'] = const_var.leantoleft;
            const_var.newLeanArr['right'] = const_var.leantoright;
            params.ShowLeanRecord = true;
        }else if(const_var.defaultBuildingArr[state.defaultBuilding].leanto=="left")
        {
            const_var.leantoleft.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[0]);
            const_var.leantoleft.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[1]);
            const_var.leantoleft.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[2]);
            const_var.leantoleft.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
            const_var.leantoleft.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
            const_var.leantoleft.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;

            const_var.newLeanArr['left'] = const_var.leantoleft;
            // console.log(const_var.newLeanArr['left'],"loadDefaultBuilding");
            const_var.newLeanArr['right'] = undefined;
            params.ShowLeanRecord = true;
        }else if(const_var.defaultBuildingArr[state.defaultBuilding].leanto=="right")
        {
            const_var.leantoright.width = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[0]);
            const_var.leantoright.length = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[1]);
            const_var.leantoright.height = parseInt(const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[2]);
            const_var.leantoright.front_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
            const_var.leantoright.back_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;
            const_var.leantoright.side_wall = const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall;

            const_var.newLeanArr['left'] = undefined;
            const_var.newLeanArr['right'] = const_var.leantoright;
            params.ShowLeanRecord = true;
        }else
        {
            const_var.newLeanArr = [];
            params.ShowLeanRecord = false;
        }
    }

    const_var.defalutProductLoad = true;

    const_var.defaultBuildingImgName = const_var.defaultBuildingArr[state.defaultBuilding].image_name.split(".")[0];
    const_var.isTripleWide = const_var.defaultBuildingImgName.includes("Triple_Wide") ? true : false;
    params.p_b_t = const_var.defaultBuildingArr[state.defaultBuilding].building_id!= undefined ? const_var.defaultBuildingArr[state.defaultBuilding].building_id : params.p_b_t;
    params.building_type_name = const_var.defaultBuildingArr[state.defaultBuilding].name!= undefined ? const_var.defaultBuildingArr[state.defaultBuilding].name:"Carport";
    params.p_r_s = const_var.defaultBuildingArr[state.defaultBuilding].roof_id!= undefined ? const_var.defaultBuildingArr[state.defaultBuilding].roof_id : params.p_r_s;
    params.p_w = const_var.defaultBuildingArr[state.defaultBuilding].size!= undefined ? parseInt(const_var.defaultBuildingArr[state.defaultBuilding].size.split('x')[0]) : params.p_w;
    params.p_d = const_var.defaultBuildingArr[state.defaultBuilding].size!= undefined ? parseInt(const_var.defaultBuildingArr[state.defaultBuilding].size.split('x')[1]) : params.p_d;
    params.p_h = const_var.defaultBuildingArr[state.defaultBuilding].size!= undefined ? parseInt(const_var.defaultBuildingArr[state.defaultBuilding].size.split('x')[2]) : params.p_h;
    params.other_building_type_name = params.building_type_name +" - "+params.p_w+" x "+params.p_d+" x "+params.p_h;
    params.p_w_c_n = const_var.defaultBuildingArr[state.defaultBuilding].wainscot_color != undefined && const_var.defaultBuildingArr[state.defaultBuilding].wainscot_color != 0 ? true : false
    const_var.lengthData.center.length = params.p_d;
    if(const_var.defaultBuildingArr[state.defaultBuilding]!=undefined && const_var.defaultBuildingArr[state.defaultBuilding].central_roof_pitch!=undefined && const_var.defaultBuildingArr[state.defaultBuilding].central_roof_pitch!=null)
    {
        state.params.b_r_p = const_var.defaultBuildingArr[state.defaultBuilding].central_roof_pitch.replace("/", "");
        state.params.p_r_p = const_var.defaultBuildingArr[state.defaultBuilding].central_roof_pitch.split("/")[0];
    }
    const_var.defaultBuildingColorArray['RoofColor'] =  const_var.defaultBuildingArr[state.defaultBuilding].roof_color!= undefined ? const_var.defaultBuildingArr[state.defaultBuilding].roof_color:'';
    const_var.defaultBuildingColorArray['WallColor'] =  const_var.defaultBuildingArr[state.defaultBuilding].wall_color!= undefined ? const_var.defaultBuildingArr[state.defaultBuilding].wall_color:'';
    const_var.defaultBuildingColorArray['TrimColor'] =  const_var.defaultBuildingArr[state.defaultBuilding].trim_color!= undefined ? const_var.defaultBuildingArr[state.defaultBuilding].trim_color:'';
    const_var.defaultBuildingColorArray['WainscotColor'] =  const_var.defaultBuildingArr[state.defaultBuilding].wainscot_color!= undefined ? const_var.defaultBuildingArr[state.defaultBuilding].wainscot_color:'';
    
    // params.p_r_c = const_var.defaultBuildingArr[state.defaultBuilding].roof_color!= undefined ? const_var.defaultBuildingArr[state.defaultBuilding].roof_color.replace("#","0x") : params.p_r_c;
    // params.p_t_c = const_var.defaultBuildingArr[state.defaultBuilding].trim_color!= undefined ? const_var.defaultBuildingArr[state.defaultBuilding].trim_color.replace("#","0x") : params.p_t_c;
    // params.p_w_c = const_var.defaultBuildingArr[state.defaultBuilding].wall_color!= undefined ? const_var.defaultBuildingArr[state.defaultBuilding].wall_color.replace("#","0x") : params.p_w_c;
    params.p_w_c_n = const_var.defaultBuildingArr[state.defaultBuilding].wainscot_color != undefined && const_var.defaultBuildingArr[state.defaultBuilding].wainscot_color != 0 ? true : false
    params.p_u_c = (const_var.defaultBuildingArr[state.defaultBuilding].utility!= undefined && const_var.defaultBuildingArr[state.defaultBuilding].utility!=0)?true:false;
    params.p_u_t = (const_var.defaultBuildingArr[state.defaultBuilding].utility!= undefined && const_var.defaultBuildingArr[state.defaultBuilding].utility!=0)?parseInt(const_var.defaultBuildingArr[state.defaultBuilding].utility):5;
    params.p_i_s = params.p_i_s;
    if(params.p_u_c==true)
    {
      params.nostorage = false;
    }
    params.cB_addStorage_check_front = (const_var.defaultBuildingArr[state.defaultBuilding].utility_front && const_var.defaultBuildingArr[state.defaultBuilding].utility!=0) ? true : false;
    params.cB_addStorage_front = (const_var.defaultBuildingArr[state.defaultBuilding].utility_front && const_var.defaultBuildingArr[state.defaultBuilding].utility!=0) ? Number(const_var.defaultBuildingArr[state.defaultBuilding].utility_front):5;
    
    // params.lean_p_w = (const_var.defaultBuildingArr[state.defaultBuilding].leanto != undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto != null) ? const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[0] : params.lean_p_w;
    // params.lean_p_d = (const_var.defaultBuildingArr[state.defaultBuilding].leanto != undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto != null) ? const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[1] : params.lean_p_d;
    // params.lean_p_h = (const_var.defaultBuildingArr[state.defaultBuilding].leanto != undefined && const_var.defaultBuildingArr[state.defaultBuilding].leanto != null) ? const_var.defaultBuildingArr[state.defaultBuilding].leanto_size.split('x')[2] : params.lean_p_h;
    // params.p_b_c_b_l_f=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall):params.p_b_c_b_l_f;
    // params.p_b_c_b_l_b=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall):params.p_b_c_b_l_b;
    // params.p_b_c_b_l=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall):params.p_b_c_b_l;
    // params.p_b_c_b_r_f=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall):params.p_b_c_b_r_f;
    // params.p_b_c_b_r_b=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall):params.p_b_c_b_r_b;
    // params.p_b_c_b_r=(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall!=null)?upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].leanto_wall):params.p_b_c_b_r;
    // params.b_l_l_t_l = params.p_b_c_b_l;
    // params.b_l_l_t_f = params.p_b_c_b_l_f;
    // params.b_l_l_t_b = params.p_b_c_b_l_b;
    // params.b_r_l_t_r = params.p_b_c_b_r;
    // params.b_r_l_t_f = params.p_b_c_b_r_f;
    // params.b_r_l_t_b = params.p_b_c_b_r_b;
    params.b_l_l_t_l = params.p_b_c_b_l;
    params.b_l_l_t_f = params.p_b_c_b_l_f;
    params.b_l_l_t_b = params.p_b_c_b_l_b;

    params.b_r_l_t_r = params.p_b_c_b_r;
    params.b_r_l_t_f = params.p_b_c_b_r_f;
    params.b_r_l_t_b = params.p_b_c_b_r_b;

    params.p_b_c_b_f_f=params.p_b_c_b_f_f;
    params.p_b_c_b_f_b=params.p_b_c_b_f_b;
    params.p_b_c_b_f_l=params.p_b_c_b_f_l;

    params.p_b_c_b_b_f=params.p_b_c_b_b_f;
    params.p_b_c_b_b_b=params.p_b_c_b_b_b;
    params.p_b_c_b_b_l=params.p_b_c_b_b_l;
    params.p_l_b_l = (const_var.newLeanArr['left']!=undefined &&  (const_var.newLeanArr['left'].leanto_type==1))?false:true;
    params.p_r_b_l = (const_var.newLeanArr['right']!=undefined && (const_var.newLeanArr['right'].leanto_type==2))?false:true;
    
    if(Object.keys(const_var.defaultBuildingArr[state.defaultBuilding].wall).length>1 && const_var.defaultBuildingArr[state.defaultBuilding].wall.front!=undefined)
    {
        params.p_f_w = const_var.defaultBuildingArr[state.defaultBuilding].wall!=null ? upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].wall.front) : params.p_f_w;
        params.p_b_w = const_var.defaultBuildingArr[state.defaultBuilding].wall!=null ? upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].wall.back) : params.p_b_w;
        params.p_l_w = const_var.defaultBuildingArr[state.defaultBuilding].wall!=null ? upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].wall.left) : params.p_l_w;
        params.p_r_w = const_var.defaultBuildingArr[state.defaultBuilding].wall!=null ? upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].wall.right) : params.p_r_w;
        params.p_f_w_f = params.p_f_w;
    }else
    {
        params.p_f_w = const_var.defaultBuildingArr[state.defaultBuilding].wall!=null ? upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].wall) : params.p_f_w;
        params.p_b_w = const_var.defaultBuildingArr[state.defaultBuilding].wall!=null ? upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].wall) : params.p_b_w;
        params.p_l_w = const_var.defaultBuildingArr[state.defaultBuilding].wall!=null ? upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].wall) : params.p_l_w;
        params.p_r_w = const_var.defaultBuildingArr[state.defaultBuilding].wall!=null ? upperCaseFirst(const_var.defaultBuildingArr[state.defaultBuilding].wall) : params.p_r_w;
        params.p_f_w_f = params.p_f_w;
    }
    
    params.p_c_a_w = ((params.p_b_w=="Close" && params.p_l_w=="Close" && params.p_r_w=="Close" && params.p_f_w=="Close"))?true:false;
    params.p_c_a_l_l_w = ((params.p_b_c_b_l_f=="Close" && params.p_b_c_b_l_b=="Close" && params.p_b_c_b_l=="Close"))?true:false;
    params.p_c_a_r_l_w = ((params.p_b_c_b_r_f=="Close" && params.p_b_c_b_r_b=="Close" && params.p_b_c_b_r=="Close"))?true:false;
    if((const_var.newLeanArr['left']!=undefined) && (const_var.newLeanArr['left'].leanto_type==1))
            {
    
                params.continous_left_lean = (const_var.newLeanArr['left'].continous_lean==true)?true:false;
                params.add_left_lean = true;
                params.lean_p_w = parseInt(const_var.newLeanArr['left'].width);
                params.lean_p_d = parseInt(const_var.newLeanArr['left'].length);
                params.lean_p_h = parseInt(const_var.newLeanArr['left'].height);
                params.add_storage_check = (const_var.newLeanArr['left'].has_utility==true)?true:false;
                params.add_storage = (const_var.newLeanArr['left'].utility_length)?const_var.newLeanArr['left'].utility_length:5;
                const_var.lengthData.leftLean.length = Number(params.lean_p_d);
                if(params.add_storage_check==true)
                {
                    //$(".add_storage input:checkbox").prop('checked',true);
                }
                if(params.continous_left_lean==true)
                {
                     //$(".continous_left_lean input:checkbox").prop('checked',true);
                }
                //$(".LeftBranLean input:checkbox").prop('checked',true);
                // console.log(const_var.newLeanArr,editData.building.leanto,params.add_storage_check,params.add_storage);
            }else
            {
                params.continous_left_lean = false;
                params.add_left_lean = false;
                params.lean_p_w = 12;
                params.lean_p_d = 21;
                params.lean_p_h = 6;
                params.add_storage_check = false;
                //$(".LeftBranLean input:checkbox").prop('checked',false);
            }
            if((const_var.newLeanArr['right']!=undefined) && (const_var.newLeanArr['right'].leanto_type==2))
            {
                params.continous_right_lean = (const_var.newLeanArr['right'].continous_lean==true)?true:false;
                params.add_right_lean = true;
                params.leanR_p_w = parseInt(const_var.newLeanArr['right'].width);
                params.leanR_p_d = parseInt(const_var.newLeanArr['right'].length);
                params.leanR_p_h = parseInt(const_var.newLeanArr['right'].height);
                params.add_storage_check_right = (const_var.newLeanArr['right'].has_utility==true)?true:false;
                params.add_storage_right = (const_var.newLeanArr['right'].utility_length)?const_var.newLeanArr['right'].utility_length:5;
                const_var.lengthData.rightLean.length = Number(params.leanR_p_d);
                if(params.add_storage_check_right==true)
                {
                    //$(".add_storage_right input:checkbox").prop('checked',true);
                }
                if(params.continous_right_lean==true)
                {
                    // $(".continous_right_lean input:checkbox").prop('checked',true);
                }
                //$(".RightBranLean input:checkbox").prop('checked',true);
                
            }else
            {
                params.continous_right_lean = false;
                params.add_right_lean = false;
                params.leanR_p_w = 12;
                params.leanR_p_d = 21;
                params.leanR_p_h = 6;
                params.add_storage_check_right = false;
                //$(".RightBranLean input:checkbox").prop('checked',false);
            }

            if((const_var.newLeanArr['front']!=undefined) && (const_var.newLeanArr['front'].leanto_type==3))
            {
                params.add_front_lean = true;
                params.leanF_p_w = parseInt(const_var.newLeanArr['front'].width);
                params.leanF_p_d = parseInt(const_var.newLeanArr['front'].length);
                params.leanF_p_h = parseInt(const_var.newLeanArr['front'].height);
                // params.add_storage_check_right = (const_var.newLeanArr['front'].has_utility==true)?true:false;
                // params.add_storage_right = (const_var.newLeanArr['front'].utility_length)?const_var.newLeanArr['front'].utility_length:5;
                const_var.lengthData.frontLean.length = Number(params.leanF_p_d);
                
                //$(".RightBranLean input:checkbox").prop('checked',true);
                
            }else
            {
                //params.continous_right_lean = false;
                params.add_front_lean = false;
                params.leanF_p_w = 12;
                params.leanF_p_d = 21;
                params.leanF_p_h = 6;
                //params.add_storage_check_right = false;
                //$(".RightBranLean input:checkbox").prop('checked',false);
            }
            
            if((const_var.newLeanArr['back']!=undefined) && (const_var.newLeanArr['back'].leanto_type==4))
            {
                params.add_back_lean = true;
                params.leanB_p_w = parseInt(const_var.newLeanArr['back'].width);
                params.leanB_p_d = parseInt(const_var.newLeanArr['back'].length);
                params.leanB_p_h = parseInt(const_var.newLeanArr['back'].height);
                // params.add_storage_check_right = (const_var.newLeanArr['front'].has_utility==true)?true:false;
                // params.add_storage_right = (const_var.newLeanArr['front'].utility_length)?const_var.newLeanArr['front'].utility_length:5;
                const_var.lengthData.frontLean.length = Number(params.leanF_p_d);
                
                //$(".RightBranLean input:checkbox").prop('checked',true);
                
            }else
            {
                //params.continous_right_lean = false;
                params.add_back_lean = false;
                params.leanB_p_w = 12;
                params.leanB_p_d = 21;
                params.leanB_p_h = 6;
                //params.add_storage_check_right = false;
                //$(".RightBranLean input:checkbox").prop('checked',false);
            }

            params.add_storage_check_1 = params.add_storage_check;
            params.add_storage_check_right_1 = params.add_storage_check_right;

            const_var.ConditionArr = [];
            const_var.ConditionArr[params.p_b_t] = [];
            const_var.DistanceArr = [];
            const_var.DistanceArr[params.p_b_t] = [];

            const_var.DistanceArr[params.p_b_t][params.p_r_s] = 5;//data.data.pricing_data.building_structure[0].distance_on_center;

            if(const_var.crmSetting.is_show_background!=undefined && const_var.crmSetting.is_show_background==true )
            {
                const_var.controls.maxPolarAngle = Math.PI* 0.5;
            }else
            {
                const_var.controls.maxPolarAngle = Math.PI;
            }
            const_var.controls.target.set(0, params.p_h / 2, 0);
            //camera.position.set(0, params.p_h + 0, 2.05 * params.p_d);
            
            const_var.camera.position.set(0 , params.p_h + 0, 1.25 * params.p_d);
            const_var.controls.update();
            
    
}
export const rEaEfW = (object)=>{
    const_var.d_w_a_r = [];
    const_var.d_w_a_r_N_w = [];
    
    const_var.door_arry = {'window':[],'garage':[],'door':[],'frameout':[]};
    for(var i=0;i<object.length;i++)
    {
        
        if("b_B_g_B" != object[i].name && "b_h_t1Bx" != object[i].name && "b_h_t2Bx" != object[i].name && "b_h_t5Bx" != object[i].name && "b_h_t6Bx" != object[i].name && "b_h_t3Bx" != object[i].name && "b_h_t4Bx" != object[i].name)
        {
            object[i].visible = false;
            params[object[i].name.replace("-clone", "") + "Qty"]--;
            const_var.scene.remove(object[i]);
            
        }
    } 
    const_var.entry_points = []; 
    const_var.ManageDoorArrar ={"front":[],"back":[],"left":[],"right":[],"ltleft":[],"ltright":[],"frontl":[],"frontr":[],"backl":[],"backr":[],"lefts":[],"rights":[],"fronts":[]};
    const_var.ManageGlobalComponent ={"front":[],"back":[],"left":[],"right":[],"ltleft":[],"ltright":[],"frontl":[],"frontr":[],"backl":[],"backr":[],"lefts":[],"rights":[],"fronts":[]};
    const_var.ManageSpaces =[];
    const_var.ManageDoorPlaces ={"front":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "back":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "left":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "right":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "ltleft":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "ltright":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "frontl":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "frontr":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "backl":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "backr":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "lefts":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "rights":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                       "fronts":{"Garage":true,"CustomFrameout":true,"Walk":true,"WalkFrameout":true,"Windows":true,"WindowsFrameout":true,"GarageFrameout":true},
                   };

}
export const addComponent = (state,editData)=>{
    if(editData.entry_points.length>0)
    {
        const_var.sum = 0;
        var counts = [];
        for(var i=0;i<=editData.entry_points.length-1;i++)
        {
                if(editData.entry_points[i].entry_type=="walkin" && const_var.newComponentArray['Walk'][editData.entry_points[i].child_array_key]==undefined)
                {
                    if(const_var.newComponentArray['Walk']['diamond_window_walkin']!=undefined)
                    {
                        editData.entry_points[i].child_array_key = 'diamond_window_walkin';
                        editData.entry_points[i].nested_array_key = 'Diamond Window';
                        editData.entry_points[i].component_name = "diamond_window_walkin";
                        editData.entry_points[i].entry_size = const_var.newComponentArray['Walk']['diamond_window_walkin']['Diamond Window'][0];
                        editData.entry_points[i].name = const_var.newComponentArray['Walk']['diamond_window_walkin']['Diamond Window'][0].name;
                    }
                    
                }
                if(editData.entry_points[i].entry_type=="walkin" && const_var.editAPIDataByResponse.data.pricing_data!=undefined )
                {
                    if(const_var.editAPIDataByResponse.data.pricing_data.walkin_door_v3==undefined)
                    {
                        if(const_var.editAPIDataByResponse.data.pricing_data.walkin_door_frameout_v3!=undefined && editData.entry_points[i].child_array_key=="standard_walkin")
                        {
                            if (const_var.editAPIDataByResponse.data.pricing_data.walkin_door_frameout_v3['standard_walkin']!=undefined && const_var.editAPIDataByResponse.data.pricing_data.walkin_door_frameout_v3['standard_walkin'].length>0) {
                                if(const_var.editAPIDataByResponse.data.pricing_data.walkin_door_frameout_v3['standard_walkin'][0].name != editData.entry_points[i].nested_array_key)
                                {
                                    editData.entry_points[i].nested_array_key = const_var.editAPIDataByResponse.data.pricing_data.walkin_door_frameout_v3['standard_walkin'][0].name;
                                }
                                
                            }
                        }
                    }
                }
                //commonFunctionForColor(editData.entry_points[i].component_name, editData.entry_points[i].parent_array_key, editData.entry_points[i].child_array_key, editData.entry_points[i].nested_array_key);
                params.trimkit = editData.entry_points[i].entry_trim_kit!=undefined?editData.entry_points[i].entry_trim_kit:params.trimkit;
                params.chain_hoist = editData.entry_points[i].entry_chain_hoist!=undefined?editData.entry_points[i].entry_chain_hoist:params.chain_hoist;
                params.header_seal = editData.entry_points[i].entry_header_seal!=undefined?editData.entry_points[i].entry_header_seal:params.header_seal;
                params.automatic_openers = editData.entry_points[i].entry_automatic_openers!=undefined?editData.entry_points[i].entry_automatic_openers:params.entry_automatic_openers;
                params.certified_door = editData.entry_points[i].entry_certified!=undefined?editData.entry_points[i].entry_certified:params.certified_door;
                params.extra_notes = editData.entry_points[i].entry_note!=undefined?editData.entry_points[i].entry_note:params.extra_notes;
                params.insulated = editData.entry_points[i].entry_insulated!=undefined?editData.entry_points[i].entry_insulated:params.insulated;
                params.motor = editData.entry_points[i].entry_motor!=undefined?editData.entry_points[i].entry_motor:params.motor;
                Object.keys(editData.entry_points[i]).map((e) => {
                    if (e.includes("add_on_options") && !e.includes("_is") && !e.includes("_price"))  {
                        let prop = e.replace("entry_", "");
                        params[prop] = editData.entry_points[i][e] != undefined ? editData.entry_points[i][e]: params[prop];
                    }
                })
                if(editData.entry_points[i].parent_array_key=="Garage")
                {
                    if(const_var.newComponentArray['Garage'][editData.entry_points[i].child_array_key]!=undefined)
                    {
                        if(const_var.newComponentArray['Garage'][editData.entry_points[i].child_array_key][editData.entry_points[i].nested_array_key]!=undefined && editData.entry_points[i].entry_doorNewType!=undefined && editData.entry_points[i].entry_doorNewType!="Custom Size")
                        {
                            params.chain_hoist = const_var.newComponentArray['Garage'][editData.entry_points[i].child_array_key][editData.entry_points[i].nested_array_key]['Size'][editData.entry_points[i].name].is_chain_hoist==2?true:params.chain_hoist;
                        }
                    }
                }
                if(editData.entry_points[i].entry_garageDoor_color_Obj!=undefined)
                {
                    let newColorObj = const_var.garageDoorColor.filter(data=> data.hex_value == editData.entry_points[i].entry_garageDoor_color_Obj.hex_value);
                    if(newColorObj!=undefined && newColorObj.length>0)
                    {
                        state.params.g_d_c_name = newColorObj[0].name;
                        state.params.g_d_c_id = newColorObj[0].id;
                        params.g_d_c = newColorObj[0].hex_value.replace('#', '0x');
                    }
                            //ColorHelper.C();
                }
                //params.g_d_c_id = editData.entry_points[i].entry_garageDoor_color_Obj!=undefined?editData.entry_points[i].entry_garageDoor_color_Obj.id:params.g_d_c_id;

               let isBreezewayFrameOut = editData.entry_points[i].is_breezeway_frameout !== undefined && editData.entry_points[i].is_breezeway_frameout === true ?"isBreezewayFrame":undefined
            
               cuComponent.RemoveDoorComponent(editData.entry_points[i].uniqueId,editData.entry_points[i].entry_type,(editData.entry_points[i].component_name == "overhead_door_door") ? (editData.entry_points[i].uniqueName).replace(/\d/g, '') : editData.entry_points[i].component_name, editData.entry_points[i].component_wall_name, editData.entry_points[i],editData.entry_points[i].parent_array_key,editData.entry_points[i].child_array_key,editData.entry_points[i].nested_array_key,editData.entry_points[i].entry_rotation,editData.entry_points[i].entry_position,'',editData.entry_points[i].entry_size,isBreezewayFrameOut);
        }
        
        SetPriceforComponent(const_var.componentPriceUpdateData);

    }    
    params.doorType = "Garage";
}
export const upperCaseFirst = (str)=>{
    if(typeof str=='string')
    {    
        return str.charAt(0).toUpperCase() + str.substring(1);
    }else
    {
        return str;
    }
}
export const upperCaseAllFirst = (str)=>{
    if(str == "Extended gable")
    {
        str = "Extended Gable";
    }
    return str; 
}
export const makeBackgroundwithImage = (state,value)=>
{
        if ("undefined" != typeof const_var.scene.getObjectByName("Ground")) const_var.scene.remove(const_var.scene.getObjectByName("Ground"));
        if ("undefined" != typeof const_var.scene.getObjectByName("building-sky")) const_var.scene.remove(const_var.scene.getObjectByName("building-sky"));
        if((const_var.crmSetting.is_show_background==true))
        {
            let groundGeometry = new THREE.PlaneGeometry(window.innerWidth, window.innerHeight);
            let textureUrl = process.env.REACT_APP_BASE_URL+GROUND_IMG;
            let loader = new THREE.TextureLoader();
            let texture = loader.load(textureUrl);
            texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
            texture.repeat.x = texture.repeat.y = 90;
            let groundMaterial = new THREE.MeshBasicMaterial({
                name: "grassGroundPlane-Material",
                map: texture,
                side: THREE.DoubleSide,
            });
            const_var.ground = new THREE.Mesh(groundGeometry, groundMaterial);
            const_var.ground.name = "Ground";
            const_var.ground.rotateX(-Math.PI / 2);
            const_var.ground.position.set(0, 0, 0);
            const_var.ground.castShadow = false;
            const_var.ground.receiveShadow = true;
            const_var.ground.visible = true;
            const_var.scene.add(const_var.ground);
            const_var.scene.fog = null;

            var skyGeo = new THREE.SphereGeometry(300, 190, 160);
            var bloader = new THREE.TextureLoader();
            var bgTexture = bloader.load(process.env.REACT_APP_BASE_URL+SKY_IMG);
            var bmaterial = new THREE.MeshBasicMaterial({ map: bgTexture, opacity: 1 });
            var sky = new THREE.Mesh(skyGeo, bmaterial);
            sky.material.side = THREE.DoubleSide;
            sky.position.set(0, 0, 0);
            sky.name = "building-sky";
            // console.log(sky.name , "building-sky");
            sky.visible = true;
            const_var.scene.add(sky);
        }else{
            let groundGeometry = new THREE.PlaneGeometry(5000,5000,100,100);
            let textureUrl = process.env.REACT_APP_BASE_URL+GROUND_IMG1;
            let loader = new THREE.TextureLoader();
            let texture = loader.load(textureUrl);
            texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
            texture.repeat.x = texture.repeat.y = 90;
            let groundMaterial = new THREE.MeshBasicMaterial({
                name: "grassGroundPlane-Material",
                // map: texture,
                side: THREE.FrontSide,
                color:0xC8E6BA,

            });
            const_var.ground = new THREE.Mesh(groundGeometry, groundMaterial);
            const_var.ground.name = "Ground";
            const_var.ground.rotateX(-Math.PI / 2);
            const_var.ground.position.set(0, 0, 0);
            const_var.ground.castShadow = false;
            const_var.ground.receiveShadow = true;
            const_var.ground.visible = true;
            const_var.scene.add(const_var.ground);
            const_var.scene.fog = new THREE.Fog( 0xF2F2F2, 160, 1000 );

            var skyGeo = new THREE.SphereGeometry(10000, 240, 240);
            var bloader = new THREE.TextureLoader();
            var bgTexture = bloader.load(process.env.REACT_APP_BASE_URL+SKY_IMG1);
            var bmaterial = new THREE.MeshBasicMaterial({ map: bgTexture, opacity: 1 });
            var sky = new THREE.Mesh(skyGeo, bmaterial);
            sky.material.side = THREE.DoubleSide;
            sky.position.set(0, 0, 0);
            sky.name = "building-sky";
            // console.log(sky.name , "building-sky");
            sky.visible = true;
            const_var.scene.add(sky);
        }
        

    
    if(const_var.crmSetting.is_show_background!=undefined && const_var.crmSetting.is_show_background==true)
    {
        const_var.controls.maxPolarAngle = Math.PI * 0.5;
    }else
    {
        const_var.controls.maxPolarAngle = Math.PI;
    }
    const_var.controls.update();

    
} 

export const wallNameInBackgroundImage = (type)=> {
    if(const_var.crmSetting.is_show_background==true)
    {
       let backGround = const_var.crmSetting.is_show_background 
       if (type == "center"){
           let frontWallName = const_var.scene.getObjectByName("frontWallName");
           let backWallName = const_var.scene.getObjectByName("backWallName");
           let rightWallName = const_var.scene.getObjectByName("rightWallName");
           let leftWallName = const_var.scene.getObjectByName("leftWallName");
           
           if (frontWallName != undefined ) {
               frontWallName.position.set((params.p_w/-2), (backGround ? 1.3 : 0), (backGround ? params.p_d/2+0.3 : params.p_d/2))
               backWallName.position.set((params.p_w/2), (backGround ? 1.3 : 0), (backGround ? params.p_d/-2-0.3 : params.p_d/-2));
               rightWallName.position.set((params.p_w/2)+0.2, (backGround ? 1.3 : 0),  (params.p_d/2));
               leftWallName.position.set((params.p_w/-2)-0.2, (backGround ? 1.3 : 0), (params.p_d/-2));
           }
       } else if (type  == "leftLean") {
            if ( params.add_left_lean) {
                let LLfrontWallName = const_var.scene.getObjectByName("LLfrontWallName");
                let LLsideWallName = const_var.scene.getObjectByName("LLsideWallName");
                let LLbackWallName = const_var.scene.getObjectByName("LLbackWallName");
                if (LLfrontWallName != undefined) {
                    LLfrontWallName.position.y =  (backGround ? 0.8 : 0);
                    LLsideWallName.position.y =   (backGround ? 0.8 : 0);
                    LLbackWallName.position.y =   (backGround ? 0.8 : 0);
                }
            }
      } else if (type  == "rightLean") {
        
        if (params.add_right_lean) {
            
            let  RLfrontWallName = const_var.scene.getObjectByName("RLfrontWallName");
            let  RLsideWallName = const_var.scene.getObjectByName("RLsideWallName");
            let  RLbackWallName = const_var.scene.getObjectByName("RLbackWallName");
            if(RLfrontWallName != undefined){
            
                RLfrontWallName.position.y =   (backGround ? 0.8 : 0);
                RLsideWallName.position.y =   (backGround ? 0.8 : 0);
                RLbackWallName.position.y =   (backGround ? 0.8 : 0);
            }
        }
      } else if (type  == "frontLean") {
        if (params.add_front_lean) {
            let  FLbackWallName = const_var.scene.getObjectByName("FLbackWallName");
            let  FLfrontWallName = const_var.scene.getObjectByName("FLfrontWallName");
            let  FLsideWallName = const_var.scene.getObjectByName("FLsideWallName");
            if (FLbackWallName != undefined && params.add_front_lean) {
                FLbackWallName.position.y =   (backGround ? 0.8 : 0);
                FLfrontWallName.position.y =   (backGround ? 0.8 : 0);
                FLsideWallName.position.y =   (backGround ? 0.8 : 0);
            }
        }
      } else if (type  == "backLean") {
        if (params.add_back_lean) {
            let  BLfrontWallName = const_var.scene.getObjectByName("BLfrontWallName");
            let  BLsideWallName = const_var.scene.getObjectByName("BLsideWallName");
            let  BLbackWallName = const_var.scene.getObjectByName("BLbackWallName");
            if (BLfrontWallName != undefined) {
                BLfrontWallName.position.y =   (backGround ? 0.8 : 0);
                BLsideWallName.position.y =   (backGround ? 0.8 : 0);
                BLbackWallName.position.y =   (backGround ? 0.8 : 0);
            }
        }
      } else if (type  == "all") {
        let frontWallName = const_var.scene.getObjectByName("frontWallName");
        let backWallName = const_var.scene.getObjectByName("backWallName");
        let rightWallName = const_var.scene.getObjectByName("rightWallName");
        let leftWallName = const_var.scene.getObjectByName("leftWallName");
        if(frontWallName != undefined ){
         frontWallName.position.set((params.p_w/-2), (backGround ? 1.3 : 0), (backGround ? params.p_d/2+0.3 : params.p_d/2))
         backWallName.position.set((params.p_w/2), (backGround ? 1.3 : 0), (backGround ? params.p_d/-2-0.3 : params.p_d/-2));
         rightWallName.position.set((params.p_w/2)+0.2, (backGround ? 1.3 : 0),  (params.p_d/2));
         leftWallName.position.set((params.p_w/-2)-0.2, (backGround ? 1.3 : 0), (params.p_d/-2));
         // frontWallName.scale.set(2,2,2);
         }
         if (params.add_left_lean) {
             let LLfrontWallName = const_var.scene.getObjectByName("LLfrontWallName");
             let LLsideWallName = const_var.scene.getObjectByName("LLsideWallName");
             let LLbackWallName = const_var.scene.getObjectByName("LLbackWallName");
             LLfrontWallName.position.y =  (backGround ? 0.8 : 0);
             LLsideWallName.position.y =   (backGround ? 0.8 : 0);
             LLbackWallName.position.y =   (backGround ? 0.8 : 0);
          }
          if (params.add_right_lean) {
              let  RLfrontWallName = const_var.scene.getObjectByName("RLfrontWallName")
              let  RLsideWallName = const_var.scene.getObjectByName("RLsideWallName")
              let  RLbackWallName = const_var.scene.getObjectByName("RLbackWallName")
              RLfrontWallName.position.y =   (backGround ? 0.8 : 0);
              RLsideWallName.position.y =   (backGround ? 0.8 : 0);
              RLbackWallName.position.y =   (backGround ? 0.8 : 0);
          } 

          if (params.add_front_lean) {
              let  FLbackWallName = const_var.scene.getObjectByName("FLbackWallName")
              let  FLfrontWallName = const_var.scene.getObjectByName("FLfrontWallName")
              let  FLsideWallName = const_var.scene.getObjectByName("FLsideWallName")
              FLbackWallName.position.y =   (backGround ? 0.8 : 0);
              FLfrontWallName.position.y =   (backGround ? 0.8 : 0);
              FLsideWallName.position.y =   (backGround ? 0.8 : 0);
          }   
          if (params.add_back_lean) {
              let  BLfrontWallName = const_var.scene.getObjectByName("BLfrontWallName")
              let  BLsideWallName = const_var.scene.getObjectByName("BLsideWallName")
              let  BLbackWallName = const_var.scene.getObjectByName("BLbackWallName")
              BLfrontWallName.position.y =   (backGround ? 0.8 : 0);
              BLsideWallName.position.y =   (backGround ? 0.8 : 0);
              BLbackWallName.position.y =   (backGround ? 0.8 : 0);
           }   
      }
      
    }
}
export const makeInstallationBackground = (state,value)=>
{
    
    let geometry = new THREE.BoxGeometry(1.05, .05, 1.05);
    let textureUrl = require('../../assets/images/imgTextures/'+value+'.jpg');
    let loader = new THREE.TextureLoader();
    let texture = loader.load(textureUrl);
    texture.anisotropy = state.const_var.renderer.capabilities.getMaxAnisotropy();
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    let material = new THREE.MeshPhongMaterial({
        color: "white",
        name: "foundation-Material",
        map: texture,
        bumpMap: texture,
        bumpScale: .04,
        specularMap: texture
    });
    let foundation = new THREE.Mesh(geometry, material);
    foundation.name = "foundation";
    foundation.castShadow = true;
    foundation.receiveShadow = true;
    state.const_var.scene.add(foundation);
    if("undefined" != typeof state.const_var.scene.getObjectByName("foundation"))state.const_var.scene.remove(state.const_var.scene.getObjectByName("foundation"));   
}    
export const makeExtraElements = () =>{

    let dataNew = const_var.a_p_d_a;
    for(var i=0;i< dataNew.base.length;i++)
    {
        const_var.main_gauge_arr[dataNew.base[i].gauge+" Gauge"] = dataNew.base[i].gauge;
        params.gauge_val = (params.gauge_val=="")?dataNew.base[i].gauge:params.gauge_val;
    }
    const_var.trsArr = {}; 
    const_var.trsArr[0] = 'Select';
    //params.p_t_u = 0;
    if(dataNew.trusses.length>0)
    {
        if(dataNew.trusses[0].height==0)
        {
            for(var i=0;i<=dataNew.trusses.length-1;i++)
            {
                const_var.trsArr[dataNew.trusses[i].cost] = dataNew.trusses[i].truss;
            }
        }
    }else{
        params.p_t_u = 0;
    }
    if(dataNew.insulation.length>0)
    {
        params.insulation.center.showInsulation = true;
        const_var.insulationJson = [];
        const_var.insulationJson[0] = 'None';
        for(var i=0;i<dataNew.insulation.length;i++)
        {

            const_var.insulationJson[dataNew.insulation[i].insulation_id] = dataNew.insulation[i].name;
            const_var.insulationPriceJson[dataNew.insulation[i].insulation_id] = dataNew.insulation[i];
        }
    }
    else {
        params.insulation.center.showInsulation = false;  
    }
//    console.log(const_var.insulationPriceJson,"const_var.insulationJson")
    
    // if(dataNew.bows.length >0)
    // {
    //     folder10.add(params, "p_e_b",{"0":0,"1":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9,"10":10}).name("Extra Bows").class("extra_bow").onChange(function() {
    //         rLaSt(true);
    //         cP(a_p_d_a);
    //         rLaSt(false);
    //     });
    // }
    
    
}
export const makeInsulationArrayForLeanto = ()=>
{
    if(const_var.leanGetDataLeft!="")
    {
        const_var.insulationArrayForLeantoLeft = [];
        const_var.insulationArrayForLeantoLeft[0] = '';
        for(var i=0;i<=const_var.leanGetDataLeft.insulation.length-1;i++)
        {
            const_var.insulationArrayForLeantoLeft[const_var.leanGetDataLeft.insulation[i].insulation_id] =  const_var.leanGetDataLeft.insulation[i];        
        }
        params.insulation.leftLean.showInsulation = const_var.insulationArrayForLeantoLeft.length > 0 ? true : false;
    }if(const_var.leanGetDataFront!="")
    {
        const_var.insulationArrayForLeantoFront = [];
        const_var.insulationArrayForLeantoFront[0] = 'Select';
        for(var i=0;i<=const_var.leanGetDataFront.insulation.length-1;i++)
        {
            const_var.insulationArrayForLeantoFront[const_var.leanGetDataFront.insulation[i].insulation_id] =  const_var.leanGetDataFront.insulation[i];        
        }
        params.insulation.frontLean.showInsulation = const_var.insulationArrayForLeantoFront.length > 0 ? true : false;
    }if(const_var.leanGetDataBack!="")
    {
        const_var.insulationArrayForLeantoBack = [];
        const_var.insulationArrayForLeantoBack[0] = 'Select';
        for(var i=0;i<=const_var.leanGetDataBack.insulation.length-1;i++)
        {
            const_var.insulationArrayForLeantoBack[const_var.leanGetDataBack.insulation[i].insulation_id] =  const_var.leanGetDataBack.insulation[i];        
        }
        params.insulation.backLean.showInsulation = const_var.insulationArrayForLeantoBack.length > 0 ? true : false;
    }if(const_var.leanGetDataRight!="")
    {
        const_var.insulationArrayForLeantoRight = [];
        const_var.insulationArrayForLeantoRight[0] = 'Select';
        for(var i=0;i<=const_var.leanGetDataRight.insulation.length-1;i++)
        {
            const_var.insulationArrayForLeantoRight[const_var.leanGetDataRight.insulation[i].insulation_id] =  const_var.leanGetDataRight.insulation[i];        
        }
        params.insulation.rightLean.showInsulation = const_var.insulationArrayForLeantoRight.length > 0 ? true : false;
    }
}
export const CheckLegsByResponse = (state)=>
{
    var j = 0;
    if(const_var.ConditionArr[params.p_b_t].length>0 && const_var.ConditionArr[params.p_b_t][params.p_r_s]!=undefined){
        // console.log(const_var.ConditionArr,"[params.p_b_t] 1235",const_var.ConditionArr[params.p_b_t],"prs",const_var.ConditionArr[params.p_b_t][params.p_r_s]);
        for(var i=0;i<=const_var.ConditionArr[params.p_b_t][params.p_r_s].length-1;i++)
        {
            const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_width = (const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_width=='' || const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_width==null)?0:const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_width;
            const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_height = (const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_height=='' || const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_height==null)?0:const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_height;
            if(const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_width==0 && const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_height <= params.p_h && const_var.ConditionArr[params.p_b_t][params.p_r_s][i].max_height >= params.p_h)
            {
                if(const_var.ConditionArr[params.p_b_t][params.p_r_s][i].is_default=="Y")
                {
                    params.p_e_l=true;
                    const_var.hasDoublelegdisable = true;
                    const_var.hasDoublelegshow = true;
                    const_var.hasDoublelegName = const_var.ConditionArr[params.p_b_t][params.p_r_s][i].name;
                    // $('.extraLegs').show();
                    // $('.extraLegs').addClass("disabled");
                    // $(".extraLegs input:checkbox").prop('checked',true);
                    // $(".extraLegs input:checkbox").prop('disabled',true);
                }else{
                    params.p_e_l= (params.p_e_l && const_var.crmSetting.is_Edit) ? params.p_e_l : false;
                    const_var.hasDoublelegdisable = false;
                    const_var.hasDoublelegshow = true;
                    const_var.hasDoublelegName = const_var.ConditionArr[params.p_b_t][params.p_r_s][i].name;
                    // $('.extraLegs').show();
                    // $(".extraLegs input:checkbox").prop('disabled',false);
                    //$(".extraLegs .c").find('span').remove();
                    //$(".extraLegs .c").append(" <span>(Including Base Rails)</span>");
                }  
                const_var.legstype = (const_var.ConditionArr[params.p_b_t][params.p_r_s][i].legs_type=="reinforced")?"double":const_var.ConditionArr[params.p_b_t][params.p_r_s][i].legs_type;
            }else if(const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_height==0 && const_var.ConditionArr[params.p_b_t][params.p_r_s][i].min_width <= params.p_w && const_var.ConditionArr[params.p_b_t][params.p_r_s][i].max_width >= params.p_w){
                if(const_var.ConditionArr[params.p_b_t][params.p_r_s][i].is_default=="Y")
                {
                    params.p_e_l=true;
                    const_var.hasDoublelegdisable = true;
                    const_var.hasDoublelegshow = true;
                    const_var.hasDoublelegName = const_var.ConditionArr[params.p_b_t][params.p_r_s][i].name;
                    // $('.extraLegs').show();
                    // $(".extraLegs input:checkbox").prop('checked',true);
                    // $(".extraLegs input:checkbox").prop('disabled',true);
                }else{
                    params.p_e_l=(params.p_e_l && const_var.crmSetting.is_Edit) ? params.p_e_l : false;;
                    const_var.hasDoublelegdisable = false;
                    const_var.hasDoublelegshow = true;
                    const_var.hasDoublelegName = const_var.ConditionArr[params.p_b_t][params.p_r_s][i].name;
                    // $('.extraLegs').show();
                    // $(".extraLegs input:checkbox").prop('disabled',false);
                    //$(".extraLegs .c").find('span').remove();
                    //$(".extraLegs .c").append(" <span>(Including Base Rails)</span>");
                }  
                const_var.legstype = (const_var.ConditionArr[params.p_b_t][params.p_r_s][i].legs_type=="reinforced")?"double":const_var.ConditionArr[params.p_b_t][params.p_r_s][i].legs_type;
            }else{
                j = j+1;
                
                if(j==const_var.ConditionArr[params.p_b_t][params.p_r_s].length)
                {
                    params.p_e_l = false;
                    const_var.hasDoublelegdisable = false;
                    const_var.hasDoublelegshow = false;
                    const_var.hasDoublelegName = '';
                    // $(".extraLegs input:checkbox").prop('checked',false);
                    // $('.extraLegs').hide();
                    const_var.legstype = "single";
                }

            }
        }
    }else{
        params.p_e_l = false;
        const_var.hasDoublelegdisable = false;
        const_var.hasDoublelegshow = false;
        const_var.hasDoublelegName = '';
        // $(".extraLegs input:checkbox").prop('checked',false);
        // $('.extraLegs').hide();
        const_var.legstype = "single";
    }

    params.p_e_l = (state.defalutProductLoad==true && const_var.defaultProData.building.has_double_leg==true && const_var.CallApionAction ==false)?true:params.p_e_l;
    const_var.legstype = (state.defalutProductLoad==true && const_var.defaultProData.building.legstype!=undefined && const_var.CallApionAction ==false)?const_var.defaultProData.building.legstype:const_var.legstype;
    BuildingUpdate(true,'');

} 
export const CheckLeanLegsByResponse = (state, type)=>
{
    // console.log(type,"CheckLeanLegsByResponse");
    if (params.add_left_lean && (type == "addLeftLean" || type == "all") ){
    var j = 0;
    // console.log(const_var.ConditionArrForLean, "rightLeanToLegsDouble1 pleft",const_var.ConditionArrForLean['left']);

    if(const_var.ConditionArrForLean['left']!=undefined && const_var.ConditionArrForLean['left'].length>0 ){

        for(var i=0;i<=const_var.ConditionArrForLean['left'].length-1;i++)
        {
            // console.log(const_var.ConditionArrForLean['left'],"const_var.ConditionArrForLean['left'] for");
            const_var.ConditionArrForLean['left'][i].min_width = (const_var.ConditionArrForLean['left'][i].min_width=='' || const_var.ConditionArrForLean['left'][i].min_width==null)?0:const_var.ConditionArrForLean['left'][i].min_width;
            const_var.ConditionArrForLean['left'][i].min_height = (const_var.ConditionArrForLean['left'][i].min_height=='' || const_var.ConditionArrForLean['left'][i].min_height==null)?0:const_var.ConditionArrForLean['left'][i].min_height;
            if(const_var.ConditionArrForLean['left'][i].min_width==0 && const_var.ConditionArrForLean['left'][i].min_height <= params.lean_p_h && const_var.ConditionArrForLean['left'][i].max_height >= params.lean_p_h)
            {
                if(const_var.ConditionArrForLean['left'][i].is_default=="Y")
                {
                    params.lean_p_e_l=true;
                    const_var.leanHasDoublelegdisable = true;
                    const_var.leanHasDoublelegshow = true;
                    const_var.leanHasDoublelegName = const_var.ConditionArrForLean['left'][i].name;
                }else{
                    params.lean_p_e_l = (params.lean_p_e_l && const_var.crmSetting.is_Edit) ? params.lean_p_e_l : false;
                    const_var.leanHasDoublelegdisable = false;
                    const_var.leanHasDoublelegshow = true;
                    const_var.leanHasDoublelegName = const_var.ConditionArrForLean['left'][i].name;
                }  
                const_var.leanLegstype = (const_var.ConditionArrForLean['left'][i].legs_type=="reinforced")?"double":const_var.ConditionArrForLean['left'][i].legs_type;
            }else if(const_var.ConditionArrForLean['left'][i].min_height==0 && const_var.ConditionArrForLean['left'][i].min_width <= params.lean_p_w && const_var.ConditionArrForLean['left'][i].max_width >= params.lean_p_w){
                if(const_var.ConditionArrForLean['left'][i].is_default=="Y")
                {
                    params.lean_p_e_l=true;
                    const_var.leanHasDoublelegdisable = true;
                    const_var.leanHasDoublelegshow = true;
                    const_var.leanHasDoublelegName = const_var.ConditionArrForLean['left'][i].name;
                }else{
                    params.lean_p_e_l = (params.lean_p_e_l && const_var.crmSetting.is_Edit) ? params.lean_p_e_l : false;
                    const_var.leanHasDoublelegdisable = false;
                    const_var.leanHasDoublelegshow = true;
                    const_var.leanHasDoublelegName = const_var.ConditionArrForLean['left'][i].name;
                }  
                const_var.leanLegstype = (const_var.ConditionArrForLean['left'][i].legs_type=="reinforced")?"double":const_var.ConditionArrForLean['left'][i].legs_type;
            }else{
                j = j+1;
                
                if(j==const_var.ConditionArrForLean['left'].length)
                {
                    params.lean_p_e_l = false;
                    const_var.leanHasDoublelegdisable = false;
                    const_var.leanHasDoublelegshow = false;
                    const_var.leanHasDoublelegName = '';
                    const_var.leanLegstype = "single";
                }

            }
        }
        } else{
            params.lean_p_e_l = false;
            const_var.leanHasDoublelegdisable = false;
            const_var.leanHasDoublelegshow = false;
            const_var.leanHasDoublelegName = '';
            const_var.leanLegstype = "single";
    }
    // console.log(const_var.defaultProData.building.lean_has_double_leg,"const_var.defaultProData.building",const_var.defaultProData.building,const_var.defaultProData);
        // params.lean_p_e_l = (state.defalutProductLoad==true && const_var.defaultProData.building.lean_has_double_leg==true && const_var.CallApionAction ==false)?true:params.lean_p_e_l;
        params.lean_p_e_l = (state.defalutProductLoad==true && const_var.defaultProData.building.has_double_leg==true && const_var.CallApionAction ==false)?true:params.lean_p_e_l;
        const_var.leanLegstype = (state.defalutProductLoad==true && const_var.defaultProData.building.leanLegstype!=undefined && const_var.CallApionAction ==false)?const_var.defaultProData.building.legstype:const_var.leanLegstype;
        // BuildingUpdate(true,'');
        UpdateLeftLean("legs");
    }
         if (params.add_right_lean  && (type == "addRightLean" || type == "all")){
            var j = 0;
            // console.log(const_var.ConditionArrForLean['right'], "rightLeanToLegsDouble1 pRight",const_var.ConditionArrForLean['right']);
            if(const_var.ConditionArrForLean['right']!=undefined && const_var.ConditionArrForLean['right'].length>0){
                for(var i=0;i<=const_var.ConditionArrForLean['right'].length-1;i++)
                {
                    const_var.ConditionArrForLean['right'][i].min_width = (const_var.ConditionArrForLean['right'][i].min_width=='' || const_var.ConditionArrForLean['right'][i].min_width==null)?0:const_var.ConditionArrForLean['right'][i].min_width;
                    const_var.ConditionArrForLean['right'][i].min_height = (const_var.ConditionArrForLean['right'][i].min_height=='' || const_var.ConditionArrForLean['right'][i].min_height==null)?0:const_var.ConditionArrForLean['right'][i].min_height;
                    if(const_var.ConditionArrForLean['right'][i].min_width==0 && const_var.ConditionArrForLean['right'][i].min_height <= params.leanR_p_h && const_var.ConditionArrForLean['right'][i].max_height >= params.leanR_p_h)
                    {
                        if(const_var.ConditionArrForLean['right'][i].is_default=="Y")
                        {
                            params.leanR_p_e_l=true;
                            const_var.leanRHasDoublelegdisable = true;
                            const_var.leanRHasDoublelegshow = true;
                            const_var.leanRHasDoublelegName = const_var.ConditionArrForLean['right'][i].name;
                        }else{
                            params.leanR_p_e_l = (params.leanR_p_e_l && const_var.crmSetting.is_Edit) ? params.leanR_p_e_l : false;
                            const_var.leanRHasDoublelegdisable = false;
                            const_var.leanRHasDoublelegshow = true;
                            const_var.leanRHasDoublelegName = const_var.ConditionArrForLean['right'][i].name;
                        }  
                        const_var.leanRLegstype = (const_var.ConditionArrForLean['right'][i].legs_type=="reinforced")?"double":const_var.ConditionArrForLean['right'][i].legs_type;
                    }else if(const_var.ConditionArrForLean['right'][i].min_height==0 && const_var.ConditionArrForLean['right'][i].min_width <= params.leanR_p_w && const_var.ConditionArrForLean['right'][i].max_width >= params.leanR_p_w){
                        if(const_var.ConditionArrForLean['right'][i].is_default=="Y")
                        {
                            params.leanR_p_e_l=true;
                            const_var.leanRHasDoublelegdisable = true;
                            const_var.leanRHasDoublelegshow = true;
                            const_var.leanRHasDoublelegName = const_var.ConditionArrForLean['right'][i].name;
                        }else{
                            params.leanR_p_e_l = (params.leanR_p_e_l && const_var.crmSetting.is_Edit) ? params.leanR_p_e_l : false;
                            const_var.leanRHasDoublelegdisable = false;
                            const_var.leanRHasDoublelegshow = true;
                            const_var.leanRHasDoublelegName = const_var.ConditionArrForLean['right'][i].name;
                        }  
                        const_var.leanRLegstype = (const_var.ConditionArrForLean['right'][i].legs_type=="reinforced")?"double":const_var.ConditionArrForLean['right'][i].legs_type;
                    }else{
                        j = j+1;
                        
                        if(j==const_var.ConditionArrForLean['right'].length)
                        {
                            params.leanR_p_e_l = false;
                            const_var.leanRHasDoublelegdisable = false;
                            const_var.leanRHasDoublelegshow = false;
                            const_var.leanRHasDoublelegName = '';
                            const_var.leanRLegstype = "single";
                        }

                    }
                }
            }else{
                // params.leanR_p_e_l = (params.leanR_p_e_l && const_var.crmSetting.is_Edit) ? params.leanR_p_e_l : false;
                params.leanR_p_e_l = false;
                const_var.leanRHasDoublelegdisable = false;
                const_var.leanRHasDoublelegshow = false;
                const_var.leanRHasDoublelegName = '';
                const_var.leanRLegstype = "single";
            }
            // params.leanR_p_e_l = (state.defalutProductLoad==true && const_var.defaultProData.building.leanR_has_double_leg==true && const_var.CallApionAction ==false)?true:params.leanR_p_e_l;
            params.leanR_p_e_l = (state.defalutProductLoad==true && const_var.defaultProData.building.has_double_leg==true && const_var.CallApionAction ==false)?true:params.leanR_p_e_l;
            const_var.leanRLegstype = (state.defalutProductLoad==true && const_var.defaultProData.building.leanRLegstype!=undefined && const_var.CallApionAction ==false)?const_var.defaultProData.building.legstype:const_var.leanRLegstype;
            // BuildingUpdate(true,'');
            UpdateRightLean("legs");
        } 
         if (params.add_front_lean  && (type == "addFrontLean" || type == "all")){
            var j = 0;
            if(const_var.ConditionArrForLean['front']!=undefined && const_var.ConditionArrForLean['front'].length>0){

                for(var i=0;i<=const_var.ConditionArrForLean['front'].length-1;i++)
                {
                    const_var.ConditionArrForLean['front'][i].min_width = (const_var.ConditionArrForLean['front'][i].min_width=='' || const_var.ConditionArrForLean['front'][i].min_width==null)?0:const_var.ConditionArrForLean['front'][i].min_width;
                    const_var.ConditionArrForLean['front'][i].min_height = (const_var.ConditionArrForLean['front'][i].min_height=='' || const_var.ConditionArrForLean['front'][i].min_height==null)?0:const_var.ConditionArrForLean['front'][i].min_height;
                    if(const_var.ConditionArrForLean['front'][i].min_width==0 && const_var.ConditionArrForLean['front'][i].min_height <= params.leanF_p_h && const_var.ConditionArrForLean['front'][i].max_height >= params.leanF_p_h)
                    {
                        if(const_var.ConditionArrForLean['front'][i].is_default=="Y")
                        {
                            params.leanF_p_e_l=true;
                            const_var.leanFHasDoublelegdisable = true;
                            const_var.leanFHasDoublelegshow = true;
                            const_var.leanFHasDoublelegName = const_var.ConditionArrForLean['front'][i].name;
                        }else{
                            params.leanF_p_e_l= (params.leanF_p_e_l && const_var.crmSetting.is_Edit) ? params.leanF_p_e_l : false;
                            const_var.leanFHasDoublelegdisable = false;
                            const_var.leanFHasDoublelegshow = true;
                            const_var.leanFHasDoublelegName = const_var.ConditionArrForLean['front'][i].name;
                        }  
                        const_var.leanFLegstype = (const_var.ConditionArrForLean['front'][i].legs_type=="reinforced")?"double":const_var.ConditionArrForLean['front'][i].legs_type;
                    }else if(const_var.ConditionArrForLean['front'][i].min_height==0 && const_var.ConditionArrForLean['front'][i].min_width <= params.leanF_p_w && const_var.ConditionArrForLean['front'][i].max_width >= params.leanF_p_w){
                        if(const_var.ConditionArrForLean['front'][i].is_default=="Y")
                        {
                            params.leanF_p_e_l=true;
                            const_var.leanFHasDoublelegdisable = true;
                            const_var.leanFHasDoublelegshow = true;
                            const_var.leanFHasDoublelegName = const_var.ConditionArrForLean['front'][i].name;
                        }else{
                            params.leanF_p_e_l= (params.leanF_p_e_l && const_var.crmSetting.is_Edit) ? params.leanF_p_e_l : false;
                            const_var.leanFHasDoublelegdisable = false;
                            const_var.leanFHasDoublelegshow = true;
                            const_var.leanFHasDoublelegName = const_var.ConditionArrForLean['front'][i].name;
                        }  
                        const_var.leanFLegstype = (const_var.ConditionArrForLean['front'][i].legs_type=="reinforced")?"double":const_var.ConditionArrForLean['front'][i].legs_type;
                    }else{
                        j = j+1;
                        
                        if(j==const_var.ConditionArrForLean['front'].length)
                        {
                            params.leanF_p_e_l = false;
                            const_var.leanFHasDoublelegdisable = false;
                            const_var.leanFHasDoublelegshow = false;
                            const_var.leanFHasDoublelegName = '';
                            const_var.leanFLegstype = "single";
                        }

                    }
                }
            }else{
                params.leanF_p_e_l = false;
                const_var.leanFHasDoublelegdisable = false;
                const_var.leanFHasDoublelegshow = false;
                const_var.leanFHasDoublelegName = '';
                const_var.leanFLegstype = "single";
            }
            // console.log(params.leanF_p_e_l,"const_var.defaultProData.building.legstype",const_var.defaultProData.building,const_var.legstype);
            // params.leanF_p_e_l = (state.defalutProductLoad==true && const_var.defaultProData.building.leanF_has_double_leg==true && const_var.CallApionAction ==false)?true:params.leanF_p_e_l;
            params.leanF_p_e_l = (state.defalutProductLoad==true && const_var.defaultProData.building.has_double_leg==true && const_var.CallApionAction ==false)?true:params.leanF_p_e_l;
            const_var.leanFLegstype = (state.defalutProductLoad==true && const_var.defaultProData.building.leanFLegstype!=undefined && const_var.CallApionAction ==false)?const_var.defaultProData.building.legstype:const_var.leanFLegstype;
            // BuildingUpdate(true,'');
            UpdateFrontLean("legs");
            // console.log(params.leanF_p_e_l,"const_var.defaultProData.building.legstype",const_var.defaultProData.building,const_var.legstype);

        } 
         if (params.add_back_lean  && (type == "addBackLean" || type == "all")){
            var j = 0;
            if(const_var.ConditionArrForLean['back']!=undefined && const_var.ConditionArrForLean['back'].length>0 ){
                for(var i=0;i<=const_var.ConditionArrForLean['back'].length-1;i++)
                {
                    // console.log(const_var.ConditionArrForLean['back'],"const_var.ConditionArrForLean['back'] for");
                    const_var.ConditionArrForLean['back'][i].min_width = (const_var.ConditionArrForLean['back'][i].min_width=='' || const_var.ConditionArrForLean['back'][i].min_width==null)?0:const_var.ConditionArrForLean['back'][i].min_width;
                    const_var.ConditionArrForLean['back'][i].min_height = (const_var.ConditionArrForLean['back'][i].min_height=='' || const_var.ConditionArrForLean['back'][i].min_height==null)?0:const_var.ConditionArrForLean['back'][i].min_height;
                    if(const_var.ConditionArrForLean['back'][i].min_width==0 && const_var.ConditionArrForLean['back'][i].min_height <= params.leanB_p_h && const_var.ConditionArrForLean['back'][i].max_height >= params.leanB_p_h)
                    {
                        if(const_var.ConditionArrForLean['back'][i].is_default=="Y")
                        {
                            params.leanB_p_e_l=true;
                            const_var.leanBHasDoublelegdisable = true;
                            const_var.leanBHasDoublelegshow = true;
                            const_var.leanBHasDoublelegName = const_var.ConditionArrForLean['back'][i].name;
                        }else{
                            params.leanB_p_e_l= (params.leanB_p_e_l && const_var.crmSetting.is_Edit) ? params.leanB_p_e_l : false;
                            const_var.leanBHasDoublelegdisable = false;
                            const_var.leanBHasDoublelegshow = true;
                            const_var.leanBHasDoublelegName = const_var.ConditionArrForLean['back'][i].name;
                        }  
                        const_var.leanBLegstype = (const_var.ConditionArrForLean['back'][i].legs_type=="reinforced")?"double":const_var.ConditionArrForLean['back'][i].legs_type;
                    }else if(const_var.ConditionArrForLean['back'][i].min_height==0 && const_var.ConditionArrForLean['back'][i].min_width <= params.leanB_p_w && const_var.ConditionArrForLean['back'][i].max_width >= params.leanB_p_w){
                        if(const_var.ConditionArrForLean['back'][i].is_default=="Y")
                        {
                            params.leanB_p_e_l=true;
                            const_var.leanBHasDoublelegdisable = true;
                            const_var.leanBHasDoublelegshow = true;
                            const_var.leanBHasDoublelegName = const_var.ConditionArrForLean['back'][i].name;
                        }else{
                            params.leanB_p_e_l=(params.leanB_p_e_l && const_var.crmSetting.is_Edit) ? params.leanB_p_e_l : false;
                            const_var.leanBHasDoublelegdisable = false;
                            const_var.leanBHasDoublelegshow = true;
                            const_var.leanBHasDoublelegName = const_var.ConditionArrForLean['back'][i].name;
                        }  
                        const_var.leanBLegstype = (const_var.ConditionArrForLean['back'][i].legs_type=="reinforced")?"double":const_var.ConditionArrForLean['back'][i].legs_type;
                    }else{
                        j = j+1;
                        
                        if(j==const_var.ConditionArrForLean['back'].length)
                        {
                            params.leanB_p_e_l = false;
                            const_var.leanBHasDoublelegdisable = false;
                            const_var.leanBHasDoublelegshow = false;
                            const_var.leanBHasDoublelegName = '';
                            const_var.leanBLegstype = "single";
                        }

                    }
                }
            }else{
                params.leanB_p_e_l = false;
                const_var.leanBHasDoublelegdisable = false;
                const_var.leanBHasDoublelegshow = false;
                const_var.leanBHasDoublelegName = '';
                const_var.leanBLegstype = "single";
            }
            // params.leanB_p_e_l = (state.defalutProductLoad==true && const_var.defaultProData.building.leanB_has_double_leg==true && const_var.CallApionAction ==false)?true:params.leanB_p_e_l;
            params.leanB_p_e_l = (state.defalutProductLoad==true && const_var.defaultProData.building.has_double_leg==true && const_var.CallApionAction ==false)?true:params.leanB_p_e_l;
            const_var.leanBLegstype = (state.defalutProductLoad==true && const_var.defaultProData.building.leanBLegstype!=undefined && const_var.CallApionAction ==false)?const_var.defaultProData.building.legstype:const_var.leanBLegstype;
            // BuildingUpdate(true,'');
            UpdateBackLean("legs");

}
} 
export const uUdD = () => {
    // console.log(const_var.DistanceArr,"const_var.DistanceArr",params.p_b_t,params.p_r_s)
  if (!params.isBreezeway) {
    if(const_var.DistanceArr[params.p_b_t][params.p_r_s]==5)
    {
        var b_u_D_p_a = const_var.b_u_D_p_a5;
    }else{
        var b_u_D_p_a = const_var.b_u_D_p_a4;
    }

    params.p_u_t = (params.p_u_t > const_var.DistanceArr[params.p_b_t][params.p_r_s])?params.p_u_t:const_var.DistanceArr[params.p_b_t][params.p_r_s];
    let drop_arr = {};

    var numberofOption = Math.floor((params.p_d-const_var.DistanceArr[params.p_b_t][params.p_r_s]) / const_var.DistanceArr[params.p_b_t][params.p_r_s]);
    
    for(var i=1;i<= numberofOption;i++)
    {
        drop_arr[(i * const_var.DistanceArr[params.p_b_t][params.p_r_s]) + " Feet"]= i * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    }
    // for(var i=0;i<= b_u_D_p_a.length;i++)
    // {
    //     if(b_u_D_p_a[i] < params.p_d-5)
    //     {
    //         drop_arr[b_u_D_p_a[i] + " Feet"]= b_u_D_p_a[i];
    //     }
    // }
    if(params.p_u_t > drop_arr[Object.keys(drop_arr)[Object.keys(drop_arr).length-1]]){
        params.p_u_t = drop_arr[Object.keys(drop_arr)[Object.keys(drop_arr).length-1]]
    }
  
    if(drop_arr[params.p_u_t+ " Feet"] == undefined){
        let dropDownValues = Object.values(drop_arr);
        let closest =  dropDownValues.length>0 && dropDownValues.reduce((a, b) =>  { return Math.abs(b - Number(params.p_u_t)) < Math.abs(a - Number(params.p_u_t)) ? b : a });
        params.p_u_t = closest;
        if (const_var.entry_points.length>0) {
            cuComponent.handleComponentPositionOnDimensionChange("l");
            cuComponent.handleComponentPositionOnDimensionChange("w");
        } 
    }

   if(drop_arr[params.p_u_t+ " Feet"]==undefined)
   {
        params.p_u_c = false;
        if ( params.p_b_w != "Close" ){
            cuComponent.removeWallSpecificComponent( 'c_b_f_s_w', 'c_b_l_s_w', 'c_b_r_s_w', 'c_b_l_w', 'c_b_b_w');
        } else {
            cuComponent.removeWallSpecificComponent('c_b_f_s_w', 'c_b_l_s_w', 'c_b_r_s_w');
        }
        // $(".utilityCheck input:checkbox").prop('checked',false);
        // params.p_f_w = "Open";
        // params.p_l_w = "Open";
        // params.p_r_w = "Open";
   }   
    const_var.b_u_D_p_a = drop_arr;
    // cuComponent.handleComponentPositionOnDimensionChange();
  } else {
    breezwayStoragevalues();
  } 
}

export const breezwayStoragevalues = () => {

    let frontStorageValues = {},backStorageValues = {} ;
    let distanceOnCenter = const_var.DistanceArr[params.p_b_t][params.p_r_s];
    let dropDownLength = ( params.p_d / distanceOnCenter ) - 2;
    if( dropDownLength * distanceOnCenter >= 20 ) {
        dropDownLength = distanceOnCenter == 5 ? 4 : 5;
    }
    const_var.breezewayFrameoutOptions = Array.from({ length: dropDownLength }, (_, i) => ({
        label: `${ (i + 1) *  distanceOnCenter } Feet`,
        value: (i + 1) * distanceOnCenter,
    }));
    
    const storageOptions = Math.floor((params.p_d - (distanceOnCenter * 2)) / distanceOnCenter);
    for (let i = 1; i <= storageOptions; i++) {
        frontStorageValues[(i * distanceOnCenter) + " Feet"]= i * distanceOnCenter;
    }
    const_var.breezewayFrontStorageOptions = frontStorageValues;
    
    for (let i = 1; i <= storageOptions; i++) {
        backStorageValues[(i * distanceOnCenter) + " Feet"]= i * distanceOnCenter;
    }
    const_var.breezewayBackStorageOptions = backStorageValues;
}
export const leanuUdD = ()=>
{
    var numberofOption = Math.floor((params.lean_p_d-const_var.DistanceArr[params.p_b_t][params.p_r_s]) / const_var.DistanceArr[params.p_b_t][params.p_r_s]);
    var numberofOptionF = Math.floor((params.leanF_p_d-const_var.DistanceArr[params.p_b_t][params.p_r_s]) / const_var.DistanceArr[params.p_b_t][params.p_r_s]);
    var numberofOptionB = Math.floor((params.leanB_p_d-const_var.DistanceArr[params.p_b_t][params.p_r_s]) / const_var.DistanceArr[params.p_b_t][params.p_r_s]);
    var numberofOptionR = Math.floor((params.leanR_p_d-const_var.DistanceArr[params.p_b_t][params.p_r_s]) / const_var.DistanceArr[params.p_b_t][params.p_r_s]);
    const_var.LeftLeandrop_arr = {};
    for(var i=1;i<= numberofOption;i++)
    {
        // params.add_storage = (params.add_storage < params.lean_p_d)?params.add_storage:1 * const_var.DistanceArr[params.p_b_t][params.p_r_s];
        const_var.LeftLeandrop_arr[(i * const_var.DistanceArr[params.p_b_t][params.p_r_s]) + " Feet"]= i * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    }
    if(params.add_storage > const_var.LeftLeandrop_arr[Object.keys(const_var.LeftLeandrop_arr)[Object.keys(const_var.LeftLeandrop_arr).length-1]]){
        params.add_storage = const_var.LeftLeandrop_arr[Object.keys(const_var.LeftLeandrop_arr)[Object.keys(const_var.LeftLeandrop_arr).length-1]]
    }

    let arrayValues = Object.values(const_var.LeftLeandrop_arr)
    let storageLength = arrayValues.find(element => element == params.add_storage)
    
    if(storageLength == undefined){
        let closest =  arrayValues.length>0 && arrayValues.reduce((a, b) =>  { return Math.abs(b - params.add_storage) < Math.abs(a - params.add_storage) ? b : a; })
        params.add_storage = closest
    }


    const_var.RightLeandrop_arr = {};
    for(var i=1;i<= numberofOptionR;i++)
    {
        // params.add_storage_right = (params.add_storage_right < params.leanR_p_d)?params.add_storage_right:1 * const_var.DistanceArr[params.p_b_t][params.p_r_s];
        const_var.RightLeandrop_arr[(i * const_var.DistanceArr[params.p_b_t][params.p_r_s]) + " Feet"]= i * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    }
    if(params.add_storage_right > const_var.RightLeandrop_arr[Object.keys(const_var.RightLeandrop_arr)[Object.keys(const_var.RightLeandrop_arr).length-1]]){
        params.add_storage_right = const_var.RightLeandrop_arr[Object.keys(const_var.RightLeandrop_arr)[Object.keys(const_var.RightLeandrop_arr).length-1]]
    }
    let arrayValuesR = Object.values(const_var.RightLeandrop_arr)
    let storageLengthR = arrayValuesR.find(element => element == params.add_storage_right)

    if(storageLengthR == undefined){
        let closestR =  arrayValuesR.length > 0 &&  arrayValuesR.reduce((a, b) =>  { return Math.abs(b - params.add_storage_right) < Math.abs(a - params.add_storage_right) ? b : a; })
        params.add_storage_right = closestR
    }


    const_var.FrontLeandrop_arr = {};
    for(var i=1;i<= numberofOptionF;i++)
    {
        // params.add_storage_front = (params.add_storage_front < params.leanF_p_d)?params.add_storage_front:1 * const_var.DistanceArr[params.p_b_t][params.p_r_s];
        const_var.FrontLeandrop_arr[(i * const_var.DistanceArr[params.p_b_t][params.p_r_s]) + " Feet"]= i * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    }
    if(params.add_storage_front > const_var.FrontLeandrop_arr[Object.keys(const_var.FrontLeandrop_arr)[Object.keys(const_var.FrontLeandrop_arr).length-1]]){
        params.add_storage_front = const_var.FrontLeandrop_arr[Object.keys(const_var.FrontLeandrop_arr)[Object.keys(const_var.FrontLeandrop_arr).length-1]]
    }
    if(const_var.FrontLeandrop_arr.length>0)
    {
        let arrayValuesF = Object.values(const_var.FrontLeandrop_arr)
        let storageLengthF = arrayValuesF.find(element => element == params.add_storage_front)

    if(storageLengthF == undefined){
        let closestF = arrayValuesF.length > 0 && arrayValuesF.reduce((a, b) =>  { return Math.abs(b - params.add_storage_front) < Math.abs(a - params.add_storage_front) ? b : a; });
        params.add_storage_front = closestF
    }
    }

    const_var.BackLeandrop_arr = {};
     for(var i=1;i<= numberofOptionB;i++)
    {
        // params.add_storage_back = (params.add_storage_back < params.leanF_p_d)?params.add_storage_back:1 * const_var.DistanceArr[params.p_b_t][params.p_r_s];
        const_var.BackLeandrop_arr[(i * const_var.DistanceArr[params.p_b_t][params.p_r_s]) + " Feet"]= i * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    }
    if(params.add_storage_back > const_var.BackLeandrop_arr[Object.keys(const_var.BackLeandrop_arr)[Object.keys(const_var.BackLeandrop_arr).length-1]]){
        params.add_storage_back = const_var.BackLeandrop_arr[Object.keys(const_var.BackLeandrop_arr)[Object.keys(const_var.BackLeandrop_arr).length-1]]
    }
    // cuComponent.handleComponentPositionOnDimensionChange();
    if(const_var.BackLeandrop_arr.length>0)
    {
        let arrayValuesB = Object.values(const_var.BackLeandrop_arr)
        let storageLengthB = arrayValuesB.find(element => element == params.add_storage_back)

        if(storageLengthB == undefined){
            let closestB = arrayValuesB.length > 0 && arrayValuesB.reduce((a, b) =>  { return Math.abs(b - params.add_storage_back) < Math.abs(a - params.add_storage_back) ? b : a; });
            params.add_storage_back = closestB
        }
    }
}
export const uBmLDimension = () =>{
    if(params.add_left_lean==true)
    {   
        if(params.p_h<(const_var.b_m_i_hlean + parseInt(params.b_l_t_r_p)))
        {
            var heig = const_var.b_m_i_hlean + parseInt(params.b_l_t_r_p);
            //b_m_i_h = heig;

            params.p_h =(heig<= const_var.roofObject[params.p_b_t][params.p_r_s].max_height)? heig:const_var.roofObject[params.p_b_t][params.p_r_s].max_height;
        }else
        {
            params.p_h = params.p_h;
        }
    }else if(params.add_right_lean==true)
    {
        if(params.p_h<(const_var.b_m_i_hlean + parseInt(params.b_l_t_r_pR)))
        {
            var heig = const_var.b_m_i_hlean + parseInt(params.b_l_t_r_pR);
            //b_m_i_h = heig;
            params.p_h =(heig<= const_var.roofObject[params.p_b_t][params.p_r_s].max_height)? heig:const_var.roofObject[params.p_b_t][params.p_r_s].max_height;
        }else
        {
            params.p_h = params.p_h;
        }
    }else if(params.add_front_lean==true)
    {
        if(params.p_h<(const_var.b_m_i_hlean + parseInt(params.b_l_t_r_pF)))
        {
            var heig = const_var.b_m_i_hlean + parseInt(params.b_l_t_r_pF);
            //b_m_i_h = heig;
            params.p_h =(heig<= const_var.roofObject[params.p_b_t][params.p_r_s].max_height)? heig:const_var.roofObject[params.p_b_t][params.p_r_s].max_height;
        }else
        {
            params.p_h = params.p_h;
        }
    }else if(params.add_back_lean==true)
    {
        if(params.p_h<(const_var.b_m_i_hlean + parseInt(params.b_l_t_r_pB)))
        {
            var heig = const_var.b_m_i_hlean + parseInt(params.b_l_t_r_pB);
            //b_m_i_h = heig;
            params.p_h =(heig<= const_var.roofObject[params.p_b_t][params.p_r_s].max_height)? heig:const_var.roofObject[params.p_b_t][params.p_r_s].max_height;
        }else
        {
            params.p_h = params.p_h;
        }
    }
    else
    { 
        params.p_h = (params.p_h<const_var.b_m_i_h)?const_var.b_m_i_h:params.p_h;
    }
    
    cP(const_var.a_p_d_a);
}

export const uUdDCB = () => {
    
    if(const_var.DistanceArr[params.p_b_t][params.p_r_s]==5)
    {
        var b_u_D_p_a_c_b = const_var.b_u_D_p_a6;
    }else{
        var b_u_D_p_a_c_b = const_var.b_u_D_p_a6;
    }
    //console.log(params.p_u_t,const_var.DistanceArr[params.p_b_t][params.p_r_s],"const_var.DistanceArr[params.p_b_t][params.p_r_s]")
    params.cB_addStorage_right = (params.cB_addStorage_right > const_var.DistanceArr[params.p_b_t][params.p_r_s])?params.cB_addStorage_right:const_var.DistanceArr[params.p_b_t][params.p_r_s];
    let drop_arr = {};
  
    var numberofOption = Math.floor((params.p_d-const_var.DistanceArr[params.p_b_t][params.p_r_s]) / const_var.DistanceArr[params.p_b_t][params.p_r_s]);
    
    // for(var i=1;i<= numberofOption;i++)
    // {
    //     params.add_storage = (params.add_storage < params.lean_p_d)?params.add_storage:1 * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    //     const_var.LeftLeandrop_arr[(i * const_var.DistanceArr[params.p_b_t][params.p_r_s]) + " Feet"]= i * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    //     drop_arr[(i * const_var.DistanceArr[params.p_b_t][params.p_r_s]) + " Feet"]= i * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    // }
    for(var i=0;i<= b_u_D_p_a_c_b.length;i++)
    {
        if(b_u_D_p_a_c_b[i] < params.p_w)
        {
            drop_arr[b_u_D_p_a_c_b[i] + " Feet"]= b_u_D_p_a_c_b[i];
        }
    }
   if(drop_arr[params.cB_addStorage_right+ " Feet"]==undefined)
   {
        params.cB_addStorage_check_right = false;
        // $(".utilityCheck input:checkbox").prop('checked',false);
        // params.p_f_w = "Open";
        // params.p_l_w = "Open";
        // params.p_r_w = "Open";
   }   
    const_var.b_u_D_p_a_c_b = drop_arr;
  
  }

  export const uUdDp = () => {
    
    if(const_var.DistanceArr[params.p_b_t][params.p_r_s]==5)
    {
        var r_f_p_w1 = const_var.r_f_p_w_arr;
    }else{
        var r_f_p_w1 = const_var.r_f_p_w_arr;
    }
    //console.log(params.p_u_t,const_var.DistanceArr[params.p_b_t][params.p_r_s],"const_var.DistanceArr[params.p_b_t][params.p_r_s]")
    params.r_f_p_w = (params.r_f_p_w > const_var.DistanceArr[params.p_b_t][params.p_r_s])?params.r_f_p_w:const_var.DistanceArr[params.p_b_t][params.p_r_s];
    let drop_arr = {};
  
    var numberofOption = Math.floor((params.p_d-const_var.DistanceArr[params.p_b_t][params.p_r_s]) / const_var.DistanceArr[params.p_b_t][params.p_r_s]);
    
    // for(var i=1;i<= numberofOption;i++)
    // {
    //     params.add_storage = (params.add_storage < params.lean_p_d)?params.add_storage:1 * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    //     const_var.LeftLeandrop_arr[(i * const_var.DistanceArr[params.p_b_t][params.p_r_s]) + " Feet"]= i * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    //     drop_arr[(i * const_var.DistanceArr[params.p_b_t][params.p_r_s]) + " Feet"]= i * const_var.DistanceArr[params.p_b_t][params.p_r_s];
    // }
    for(var i=0;i<= r_f_p_w1.length;i++)
    {
        if(r_f_p_w1[i] < params.p_w)
        {
            drop_arr[r_f_p_w1[i] + " Feet"]= r_f_p_w1[i];
        }
    }
   if(drop_arr[params.r_f_p_w+ " Feet"]==undefined)
   {
        // params.cB_addStorage_check_right = false;
        // $(".utilityCheck input:checkbox").prop('checked',false);
        // params.p_f_w = "Open";
        // params.p_l_w = "Open";
        // params.p_r_w = "Open";
   }   
    const_var.r_f_p_w1 = drop_arr;
  
  }


  


export const updateEntryData = ()=>{
    //console.log("const_var.WallClassEdit[const_var.entry_points[i].entry_location]")
    if(const_var.entry_points.length>0)
    {
        for(var i=0;i<=const_var.entry_points.length-1;i++)
        {
            //console.log(const_var.WallClassEdit[const_var.entry_points[i].entry_location],"const_var.WallClassEdit[const_var.entry_points[i].entry_location]")
            if(const_var.entry_points[i].extra_component_key=="front")
            {
                const_var.entry_points[i].entry_position.z = params.p_d/2;
            }if(const_var.entry_points[i].extra_component_key=="back")
            {
                const_var.entry_points[i].entry_position.z = params.p_d/-2;
            }
            // if(const_var.entry_points[i].extra_component_key=="FrontL")
            // {
            //     const_var.entry_points[i].entry_position.z = params.lean_p_d/2;
            // }if(const_var.entry_points[i].extra_component_key=="BackL")
            // {
            //     const_var.entry_points[i].entry_position.z = params.lean_p_d/-2;
            // }
        }
    }
    //console.log(const_var.entry_points,"const_var.entry_points")
}
export const dawplace = () => {
    for(var i=0;i<const_var.b_d_g_b_O_c.length;i++)
     {
         if("b_B_g_B" != const_var.b_d_g_b_O_c[i].name && "b_h_t1Bx" != const_var.b_d_g_b_O_c[i].name && "b_h_t2Bx" != const_var.b_d_g_b_O_c[i].name && "b_h_t5Bx" != const_var.b_d_g_b_O_c[i].name && "b_h_t6Bx" != const_var.b_d_g_b_O_c[i].name && "b_h_t3Bx" != const_var.b_d_g_b_O_c[i].name && "b_h_t4Bx" != const_var.b_d_g_b_O_c[i].name && "b_h_t7Bx" != const_var.b_d_g_b_O_c[i].name && "b_h_t8Bx" != const_var.b_d_g_b_O_c[i].name)
         {
             if(const_var.b_d_g_b_O_c[i].pos == "front" && const_var.b_d_g_b_O_c[i].BarnPos == "FrontS")
             {
                 if(params.p_u_c == true)
                 {
                     var disValTexture1 = (params.fourth_center_cost==true)?0.5:0.8;
                     var dpos;
                     if(params.p_u_t > parseFloat(params.p_d/2))
                     {
                         dpos = (parseFloat(parseInt(params.p_u_t) - parseFloat(const_var.b_M_g_V)) - parseFloat(params.p_d/2)) + disValTexture1; 
                     }else{
                         dpos = -(parseFloat(params.p_d/2) - parseFloat(parseInt(params.p_u_t) + (0.8 - parseFloat(const_var.b_M_g_V))));  
                     }
                     const_var.b_d_g_b_O_c[i].position.z = dpos;
                 }
             }
         }
     }
 }
//  export const setUpWatermarkLogo = async () => {
//     if ("undefined" != typeof const_var.scene.getObjectByName("frontWallWaterMark")) const_var.scene.remove(const_var.scene.getObjectByName("frontWallWaterMark"));
//     if ("undefined" != typeof const_var.scene.getObjectByName("backWallWaterMark")) const_var.scene.remove(const_var.scene.getObjectByName("backWallWaterMark"));
//     if ("undefined" != typeof const_var.scene.getObjectByName("usSteelbuildingCenterGround")) const_var.scene.remove(const_var.scene.getObjectByName("usSteelbuildingCenterGround"));
//     if(const_var.scene.getObjectByName("usSteelbuildingCenterGround") != undefined)
//     {
//         const_var.scene.remove(const_var.scene.getObjectByName("usSteelbuildingCenterGround"));
//     }
//     if(const_var.scene.getObjectByName("frontWallWaterMark") != undefined)
//     {
//         const_var.scene.remove(const_var.scene.getObjectByName("frontWallWaterMark"));
//     }
//     if(const_var.scene.getObjectByName("backWallWaterMark") != undefined)
//     {
//        const_var.scene.remove(const_var.scene.getObjectByName("backWallWaterMark"));
//     }
//     if(const_var.crmSetting.main_domain_url !== undefined && const_var.crmSetting.main_domain_url !== "" && const_var.crmSetting.main_domain_url !==null && const_var.crmSetting.main_domain_url){
//         var loader = new THREE.TextureLoader();
//         // var texture = loader.load(const_var.crmSetting.LogIm);
//         // var textureUrl = waterMark;
//         let waterMarkLogo='';
//         let waterMarkType ='';
//         let watermarkHeight = params.p_h;
//         if(params.singleSlope==true)
//         {
//             watermarkHeight = params.p_h - (params.p_w * Math.abs(params.p_r_p) / 12);
//         }
//         try {
//             waterMarkLogo = const_var.crmSetting.main_domain_url !== undefined && const_var.crmSetting.main_domain_url.split('.')[0];
//             waterMarkLogo = waterMarkLogo !== "cibirix" ? waterMarkLogo : "" ;  //Put the image name in blank ("") to see on local. Watermark will show live
//             // waterMarkLogo = "universalmetalstructures";
//             waterMarkType = (params.p_w_c_name == "White" || params.p_w_c_name == "white" || params.p_w_c == "0xffffff") ? "dark" : "light";
//             let fileURL = require(`../../assets/images/watermark/${waterMarkLogo}-${waterMarkType}.png`).default;
//             const response = await axios.get(fileURL);
//             if(response.status === 200){
//                 const textureUrl =  require(`../../assets/images/watermark/${waterMarkLogo}-${waterMarkType}.png`).default;
//                 var texture = loader.load(textureUrl);
//                 texture.wrapS = THREE.RepeatWrapping;
//                 texture.wrapT = THREE.RepeatWrapping;
//                 var material = new THREE.MeshLambertMaterial({            
//                     map: texture,
//                     shininess: 1,
//                     transparent: true,                        
//                     opacity:0.4     
//                 });
//                 var geometry = new THREE.PlaneGeometry(4,4);
//                 if(const_var.crmSetting.main_domain_url=="jvmetalbuildingsllc.com")
//                 {
//                     geometry = new THREE.PlaneGeometry(4,1.5);
//                 }
//                 if ( const_var.centerGroundWaterMark.includes(waterMarkLogo) ){
//                     const  centerHorizantalTextureUrl =  require(`../../assets/images/watermark/${waterMarkLogo}-center.png`).default;
//                     let texture = loader.load(centerHorizantalTextureUrl);
//                     texture.wrapS = THREE.RepeatWrapping;
//                     texture.wrapT = THREE.RepeatWrapping;

//                     let  CHMaterial = new THREE.MeshLambertMaterial({            
//                         map: texture,
//                         shininess: 1,
//                         transparent: true,                        
//                         opacity:0.4     
//                     });

//                     const CHGeometry = new THREE.PlaneGeometry(params.p_w/2, params.p_w/2);
//                     let centerHorizantal = new THREE.Mesh(CHGeometry, CHMaterial);
//                     centerHorizantal.name = "usSteelbuildingCenterGround";
//                     centerHorizantal.rotation.x = -Math.PI / 2;
//                     centerHorizantal.visible = true;
//                     // centerHorizantal.renderOrder = new Date().getTime() + (3600 * 24 * 1000);
//                     centerHorizantal.position.set(0,0.1,0);
//                     // const_var.scene.add(centerHorizantal);


//                     geometry = new THREE.PlaneGeometry(5,5);
//                 }
                
//                 var mesh11 = new THREE.Mesh(geometry, material);
//                 mesh11.name="frontWallWaterMark";
//                 mesh11.visible = (params.p_f_w=="Close")?true:false;
//                 mesh11.renderOrder = new Date().getTime() + (3600 * 24 * 1000);
//                 mesh11.position.set(0,((watermarkHeight-1)),(params.p_d / 2)+0.1);                
                
//                     // const_var.scene.add(mesh11);
//                 var mesh111 = new THREE.Mesh(geometry, material);
//                 mesh111.name="backWallWaterMark";
//                 mesh111.rotation.x = -9.43;
//                 mesh111.rotation.z = 3.14;
//                 mesh111.visible = (params.p_b_w=="Close")?true:false;
//                 mesh111.renderOrder = new Date().getTime() + (3600 * 24 * 1000);
//                 mesh111.position.set(0,((watermarkHeight - 1)),-(params.p_d / 2)-0.1);
                
//                     // const_var.scene.add(mesh111);
                 
//             } else{
//                 console.log("response:", response);
//             }
//             } catch (error) {
//             if(error.Error) {
//                 console.error(`${waterMarkLogo}-${waterMarkType}.png  image not found`);
//                 return;
//             };
//         }
      
//      }
// }
// export const setUpWatermarkLogoforLoggedin = async () => {
//     let manufacturerLogoFront = const_var.scene.getObjectByName("manufacturerLogoFront")
//     manufacturerLogoFront.renderOrder = new Date().getTime() + (3600 * 24 * 1000);
//     console.log(manufacturerLogoFront,"manufacturerLogoFrontmanufacturerLogoFront");
//     if(const_var.selectWaterMarkByMNF[const_var.crmSetting.api_token]==undefined)
//     {
//         return;
//     }
//     if ("undefined" != typeof const_var.scene.getObjectByName("frontWallWaterMark")) const_var.scene.remove(const_var.scene.getObjectByName("frontWallWaterMark"));
//     if ("undefined" != typeof const_var.scene.getObjectByName("backWallWaterMark")) const_var.scene.remove(const_var.scene.getObjectByName("backWallWaterMark"));
//     if ("undefined" != typeof const_var.scene.getObjectByName("usSteelbuildingCenterGround")) const_var.scene.remove(const_var.scene.getObjectByName("usSteelbuildingCenterGround"));
//     if(const_var.scene.getObjectByName("usSteelbuildingCenterGround") != undefined)
//     {
//         const_var.scene.remove(const_var.scene.getObjectByName("usSteelbuildingCenterGround"));
//     }
//     if(const_var.scene.getObjectByName("frontWallWaterMark") != undefined)
//     {
//         const_var.scene.remove(const_var.scene.getObjectByName("frontWallWaterMark"));
//     }
//     if(const_var.scene.getObjectByName("backWallWaterMark") != undefined)
//     {
//        const_var.scene.remove(const_var.scene.getObjectByName("backWallWaterMark"));
//     }
    
        

//         var loader = new THREE.TextureLoader();
//         // var texture = loader.load(const_var.crmSetting.LogIm);
//         // var textureUrl = waterMark;
//         let waterMarkLogo = const_var.selectWaterMarkByMNF[const_var.crmSetting.api_token];;
//         let waterMarkType ='';
//         let watermarkHeight = params.p_h;
//         if(params.singleSlope==true)
//         {
//             watermarkHeight = params.p_h - (params.p_w * Math.abs(params.p_r_p) / 12);
//         }
//         try {
//             waterMarkLogo = const_var.selectWaterMarkByMNF[const_var.crmSetting.api_token];
//             waterMarkLogo = waterMarkLogo !== "cibirix" ? waterMarkLogo : "" ;  //Put the image name in blank ("") to see on local. Watermark will show live
//             // waterMarkLogo = "building4Less"; 
//             waterMarkType = (params.p_w_c_name == "White" || params.p_w_c_name == "white" || params.p_w_c == "0xffffff") ? "dark" : "light";
//             let fileURL = require(`../../assets/images/watermark/${waterMarkLogo}-${waterMarkType}.png`).default;
//             const response = await axios.get(fileURL);
//             if(response.status === 200){                
//                 const textureUrl =  require(`../../assets/images/watermark/${waterMarkLogo}-${waterMarkType}.png`).default;
//                 var texture = loader.load(textureUrl);
//                 texture.wrapS = THREE.RepeatWrapping;
//                 texture.wrapT = THREE.RepeatWrapping;
//                 var material = new THREE.MeshLambertMaterial({            
//                     map: texture,
//                     shininess: 1,
//                     transparent: true,                        
//                     opacity:1.0      
//                 });
//                 var geometry = new THREE.PlaneGeometry(4,4);
//                     const  centerHorizantalTextureUrl =  require(`../../assets/images/watermark/${waterMarkLogo}-center.png`).default;
//                     texture = loader.load(centerHorizantalTextureUrl);
//                     texture.wrapS = THREE.RepeatWrapping;
//                     texture.wrapT = THREE.RepeatWrapping;

//                     let  CHMaterial = new THREE.MeshLambertMaterial({            
//                         map: texture,
//                         shininess: 1,
//                         transparent: true,                        
//                         opacity:1.0      
//                     });

//                     const CHGeometry = new THREE.PlaneGeometry(params.p_w/2, params.p_w/2);
//                     let centerHorizantal = new THREE.Mesh(CHGeometry, CHMaterial);
//                     centerHorizantal.name = "usSteelbuildingCenterGround";
//                     centerHorizantal.rotation.x = -Math.PI / 2;
//                     centerHorizantal.visible = true;
//                     // centerHorizantal.renderOrder = new Date().getTime() + (3600 * 24 * 1000);
//                     centerHorizantal.position.set(0,0.1,0);
//                     const_var.scene.add(centerHorizantal);


//                     geometry = new THREE.PlaneGeometry(5,5);
//                     if (waterMarkLogo == "building4Less") geometry = new THREE.PlaneGeometry(4.2, 2.6);
                
                
//                 var mesh11 = new THREE.Mesh(geometry, material);
//                 mesh11.name="frontWallWaterMark";
//                 mesh11.visible = (params.p_f_w=="Close")?true:false;
//                 mesh11.renderOrder = new Date().getTime() + (3600 * 24 * 1000);
//                 mesh11.position.set(0,((watermarkHeight-1)),(params.p_d / 2)+0.1);                
                
//                     const_var.scene.add(mesh11);
//                 var mesh111 = new THREE.Mesh(geometry, material);
//                 mesh111.name="backWallWaterMark";
//                 mesh111.rotation.x = -9.43;
//                 mesh111.rotation.z = 3.14;
//                 mesh111.visible = (params.p_b_w=="Close")?true:false;
//                 mesh111.renderOrder = new Date().getTime() + (3600 * 24 * 1000);
//                 mesh111.position.set(0,((watermarkHeight - 1)),-(params.p_d / 2)-0.1);
                
//                     const_var.scene.add(mesh111);
                 
//             } else{
//                 console.log("response:", response);
//             }
//             } catch (error) {
//             if(error.Error) {
//                 console.error(`${waterMarkLogo}-${waterMarkType}.png  image not found`);
//                 return;
//             };
//         }
      
     
// }
export const CkBngDr = () =>
{
    if((params.p_b_c_b_l_f=="Close" && params.p_b_c_b_l=="Close" && params.p_b_c_b_r_f=="Close" && params.p_b_c_b_r=="Close") && ((params.p_f_w=="Close" && params.p_b_w=="Close") || (params.p_u_c==true)))
    {
        if(const_var.d_w_a_r.length>0)
        {
            for(var i=0;i<=const_var.d_w_a_r.length-1;i++)
            {
                if(const_var.d_w_a_r[i].type=="garage" || const_var.d_w_a_r[i].type=="door")
                {
                    return i;
                }
            }return null;  
        }return null;  
    }else if((params.p_f_w=="Close" && params.p_b_w=="Close" && params.p_l_w=="Close" && params.p_r_w=="Close") || params.p_u_c==true)
    {
        if(const_var.d_w_a_r.length>0)
        {
            for(var i=0;i<=const_var.d_w_a_r.length-1;i++)
            {
                if(const_var.d_w_a_r[i].type=="garage" || const_var.d_w_a_r[i].type=="door")
                {
                    return i;
                }
            }return null;  
        }return null;    
    } return 1;
}
function calcPriceWithCostType(data, leantoPriceCalculation){
    let finalCost = 0
    if(data.cost_type == '%'){
        var splitVal = data.price_of != undefined && data.price_of.length > 0 ? data.price_of : 0;
        var splval = 0; 
        if(splitVal!=0)
        {
            if(splitVal.includes("full_building_price")!=false)
            {
                // splval = parseFloat(splval) + parseFloat(t_c) + parseFloat(leantoPriceCalculation.totalLeanPrice);
                splval = parseFloat(splval) + parseFloat(leantoPriceCalculation.totalLeanPrice);
            }
            if(splitVal.includes("base_price")!=false)
            {
                splval = parseFloat(splval) + parseFloat(leantoPriceCalculation.totalBasePrice);
            }
            if(splitVal.includes("wall_price")!=false)
            {
                splval = parseFloat(splval) + parseFloat(leantoPriceCalculation.totalWallPrice);
            }
            if(splitVal.includes("height_price")!=false)
            {
              splval = parseFloat(splval) + parseFloat(leantoPriceCalculation.totalHeightPrice);              
            }
            
        }
        // else
        // {
        //     splval = parseFloat(splval) + parseFloat(totalPriceWithoutAdditionalItem);
        // }
        finalCost  = (splval * data.cost) / 100;    
            
    }
    else if(data.cost_type == 'sqft'){
        let sideWallsCount = const_var.cbClosedSideWalls + const_var.flClosedSideWalls + const_var.llClosedSideWalls + const_var.rlClosedSideWalls + const_var.blClosedSideWalls;
        let endWallsCount = const_var.cbClosedEndWalls + const_var.flClosedEndWalls + const_var.llClosedEndWalls + const_var.rlClosedEndWalls + const_var.blClosedEndWalls;
        
        let roofPrice =  0;
        let sidePrice = 0;
        let endPrice = 0;
        let endCount = 0;
        let sideCount = 0;
        // console.log(const_var.wallsData,"const_var.wallsData")
        if(Object.keys(const_var.wallsData['center']).length>0)
        {
            sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['center'].closedSideWalls);
            endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['center'].closedEndWalls);
            roofPrice =  parseFloat(roofPrice) + parseFloat(((params.p_w+1) * (params.p_d) * (data.cost)));
            sidePrice = parseFloat(sidePrice) + parseFloat(((params.p_d) * (params.p_h) * (data.cost )* sideCount)); 
            endPrice = parseFloat(endPrice) + parseFloat(((params.p_h+1) * (params.p_w) *(data.cost)* endCount));
        }if(Object.keys(const_var.wallsData['frontLean']).length>0 && params.add_front_lean==true)
        {
            if(const_var.wallsData['frontLean'].closedSideWalls!=0)
            {
                sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['frontLean'].closedSideWalls);
                sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanF_p_d) * (params.leanF_p_h) * (data.cost )* sideCount)); 
            }
            if(const_var.wallsData['frontLean'].closedEndWalls!=0)
            {
                endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['frontLean'].closedEndWalls);
                endPrice = parseFloat(endPrice) + parseFloat(((params.leanF_p_h+1) * (params.leanF_p_w) *(data.cost)* endCount));
            }
            
            roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanF_p_w+1) * (params.leanF_p_d) * (data.cost)));
            
        }if(Object.keys(const_var.wallsData['backLean']).length>0 && params.add_back_lean==true)
        {
            if(const_var.wallsData['backLean'].closedSideWalls!=0)
            {
                sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['backLean'].closedSideWalls);
                sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanB_p_d) * (params.leanB_p_h) * (data.cost )* sideCount)); 
            }
            if(const_var.wallsData['backLean'].closedEndWalls!=0)
            {
                endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['backLean'].closedEndWalls);
                endPrice = parseFloat(endPrice) + parseFloat(((params.leanB_p_h+1) * (params.leanB_p_w) *(data.cost)* endCount));
            }
            roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanB_p_w+1) * (params.leanB_p_d) * (data.cost)));
        }if(Object.keys(const_var.wallsData['leftLean']).length>0 && params.add_left_lean==true)
        {
            if(const_var.wallsData['leftLean'].closedSideWalls!=0)
            {
                sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['leftLean'].closedSideWalls);
                sidePrice = parseFloat(sidePrice) + parseFloat(((params.lean_p_d) * (params.lean_p_h) * (data.cost )* sideCount)); 
            }
            if(const_var.wallsData['leftLean'].closedEndWalls!=0)
            {
                endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['leftLean'].closedEndWalls);
                endPrice = parseFloat(endPrice) + parseFloat(((params.lean_p_h+1) * (params.lean_p_w) *(data.cost)* endCount));
            }
            
            roofPrice = parseFloat(roofPrice) + parseFloat(((params.lean_p_w+1) * (params.lean_p_d) * (data.cost)));
            
        }if(Object.keys(const_var.wallsData['rightLean']).length>0 && params.add_right_lean==true)
        {
            if(const_var.wallsData['rightLean'].closedSideWalls!=0)
            {
                sideCount = parseFloat(sideCount) + parseFloat(const_var.wallsData['rightLean'].closedSideWalls);
                sidePrice = parseFloat(sidePrice) + parseFloat(((params.leanR_p_d) * (params.leanR_p_h) * (data.cost )* sideCount)); 
            }
            if(const_var.wallsData['rightLean'].closedEndWalls!=0)
            {
                endCount = parseFloat(endCount) + parseFloat(const_var.wallsData['rightLean'].closedEndWalls);
                endPrice = parseFloat(endPrice) + parseFloat(((params.leanR_p_h+1) * (params.leanR_p_w) *(data.cost)* endCount));
            }
            roofPrice = parseFloat(roofPrice) + parseFloat(((params.leanR_p_w+1) * (params.leanR_p_d) * (data.cost)));
        }
        finalCost=parseFloat(roofPrice) + parseFloat(sidePrice) + parseFloat(endPrice);
    }
    else{
        finalCost = data.cost
    }
    return finalCost
}
export default pricingReducer;